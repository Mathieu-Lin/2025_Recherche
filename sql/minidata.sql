-- phpMyAdmin SQL Dump
-- version 5.0.4
-- https://www.phpmyadmin.net/
--
-- Hôte : localhost:3308
-- Généré le : sam. 25 mai 2024 à 14:07
-- Version du serveur :  5.7.33
-- Version de PHP : 7.4.33

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de données : `linm`
--

--
-- Déchargement des données de la table `2025_attachments`
--

INSERT INTO `2025_attachments` (`id`, `pdf_link`, `article_link`, `video_link`) VALUES
(1, 'https://pages.lip6.fr/Sergey.Legtchenko/data/RapportStageM2.pdf', 'https://pages.lip6.fr/Sergey.Legtchenko/data/RapportStageM2.pdf', NULL),
(6, 'https://inria.hal.science/inria-00000987/file/AntDevMon06CPE.pdf', 'https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.1024', NULL),
(7, 'https://pages.lip6.fr/Olivier.Marin/Publis/nossdav14.pdf', 'https://dl.acm.org/doi/abs/10.1145/2578260.2578265', NULL),
(8, 'http://lip6.fr/Pierre.Sens/publications/taas11.pdf', 'https://dl.acm.org/doi/abs/10.1145/2240166.2240178', NULL),
(9, 'https://inria.hal.science/inria-00000991/document', 'https://ieeexplore.ieee.org/abstract/document/1336712/', NULL),
(10, 'https://inria.hal.science/inria-00071432/file/RR-5151.pdf', 'https://link.springer.com/chapter/10.1007/978-3-540-27866-5_140', NULL),
(11, 'https://www.mdpi.com/2306-5729/7/8/113', 'https://www.mdpi.com/2306-5729/7/8/113', NULL),
(12, 'https://hal.science/hal-00861971/document', 'https://ieeexplore.ieee.org/abstract/document/6413697/', NULL),
(13, 'http://www-public.tem-tsp.eu/~thomas_g/research/biblio/2010/legtchenko10dsn-bluebanana.pdf', 'https://ieeexplore.ieee.org/abstract/document/5544919/', NULL),
(14, 'https://inria.hal.science/inria-00374095/file/RR-6897.pdf', 'https://link.springer.com/chapter/10.1007/978-3-642-05118-0_34', NULL),
(15, 'https://inria.hal.science/docs/00/07/14/92/PDF/RR-5091.pdf', 'https://ieeexplore.ieee.org/abstract/document/1303242/', NULL),
(16, 'https://inria.hal.science/inria-00070691/file/RR-5309.pdf', 'https://inria.hal.science/inria-00070691/', NULL),
(17, 'https://theses.hal.science/docs/00/41/14/47/PDF/monnet06-thesis.pdf', 'https://theses.hal.science/tel-00411447/', NULL),
(18, 'https://inria.hal.science/inria-00000983/file/AntBerCarDesBouJanMonSens05GDS.pdf', 'https://link.springer.com/chapter/10.1007/978-0-387-29445-2_8', NULL),
(19, 'https://inria.hal.science/hal-00712990/document', 'https://link.springer.com/chapter/10.1007/978-3-642-36949-0_3', NULL),
(20, 'https://arxiv.org/pdf/1609.04604', 'https://arxiv.org/abs/1609.04604', NULL),
(21, '', 'https://ieeexplore.ieee.org/abstract/document/7810126/', NULL),
(22, 'https://inria.hal.science/hal-00988374/file/RR-8533.pdf', 'https://inria.hal.science/hal-00988374/', NULL),
(23, 'https://people.ece.ubc.ca/maximel/publications/systor15.pdf', 'https://dl.acm.org/doi/abs/10.1145/2757667.2757669', NULL),
(24, 'https://www.academia.edu/download/39141612/icpp15.pdf', 'https://ieeexplore.ieee.org/abstract/document/7349564/', NULL),
(25, 'https://maxime.unicornbox.net/netgamesJournal.pdf', 'https://link.springer.com/article/10.1007/s00530-014-0358-0', NULL),
(26, 'https://pages.lip6.fr/Pierre.Sens/publications/icpads13.pdf', 'https://ieeexplore.ieee.org/abstract/document/6808201/', NULL),
(27, 'https://inria.hal.science/hal-00932795/file/gargamel-ICPADS-2012.pdf', 'https://ieeexplore.ieee.org/abstract/document/6414459/', NULL),
(28, 'https://arxiv.org/pdf/1701.00335', 'https://dl.acm.org/doi/abs/10.1145/3084462', NULL),
(29, 'https://inria.hal.science/inria-00103663/document', 'https://ieeexplore.ieee.org/abstract/document/4032498/', NULL),
(30, 'https://hal.sorbonne-universite.fr/hal-01567735/document', 'https://link.springer.com/article/10.1007/s12243-017-0598-z', NULL),
(31, '', 'https://ieeexplore.ieee.org/abstract/document/7371728/', NULL),
(32, 'https://inria.hal.science/docs/00/07/02/11/PDF/RR-5813.pdf', 'https://ieeexplore.ieee.org/abstract/document/1630870/', NULL),
(33, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=569ac297d5c44655180ee0696290e4da6c6aa7d1', 'https://ieeexplore.ieee.org/abstract/document/4383312/', NULL),
(34, 'https://www.researchgate.net/profile/Asma-Dhaouadi/publication/359598238_A_Multi-layer_Modeling_for_the_Generation_of_New_Architectures_for_Big_Data_Warehousing/links/64be3a2495bbbe0c6e5aedcd/A-Multi-layer-Modeling-for-the-Generation-of-New-Architectures-for-Big-Data-Warehousing.pdf', 'https://link.springer.com/chapter/10.1007/978-3-030-99587-4_18', NULL),
(35, 'https://lip6.fr/Pierre.Sens/publications/tldks2015.pdf', 'https://link.springer.com/chapter/10.1007/978-3-662-46703-9_2', NULL),
(36, 'https://hal.science/hal-00861970/document', 'https://ieeexplore.ieee.org/abstract/document/6641394/', NULL),
(37, 'https://hal.science/hal-01226608/document', 'https://hal.science/hal-01226608/', NULL),
(38, 'https://www.lip6.fr/Pierre.Sens/publications/icpads14.pdf', 'https://ieeexplore.ieee.org/abstract/document/7097873/', NULL),
(39, 'https://inria.hal.science/docs/00/93/27/08/PDF/ecadeg_accepted-FHIES-2012.pdf', 'https://link.springer.com/chapter/10.1007/978-3-642-39088-3_9', NULL),
(40, 'https://hal.univ-smb.fr/hal-02274165/file/CandorNCA%20%285%29.pdf', 'https://ieeexplore.ieee.org/abstract/document/8935051/', NULL),
(41, 'https://hal.univ-smb.fr/hal-01619216/file/article%20%281%29.pdf', 'https://ieeexplore.ieee.org/abstract/document/8368354/', NULL),
(42, 'https://inria.hal.science/hal-01673304/document', 'https://ieeexplore.ieee.org/abstract/document/8171363/', NULL),
(43, 'https://inria.hal.science/hal-01515372/file/aina2017b.pdf', 'https://ieeexplore.ieee.org/abstract/document/7920913/', NULL),
(44, 'http://lip6.fr/Pierre.Sens/publications/compas2014_POPS.pdf', 'http://lip6.fr/Pierre.Sens/publications/compas2014_POPS.pdf', NULL),
(45, '', 'https://onlinelibrary.wiley.com/doi/abs/10.1002/9781118601365.ch4', NULL),
(46, 'https://inria.hal.science/inria-00440476/document', 'https://inria.hal.science/inria-00440476/document', NULL),
(47, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=4c975da040a33b5adcb589c9c281c943f4faa8f3', 'https://link.springer.com/chapter/10.1007/978-3-540-71351-7_48', NULL),
(48, 'https://personales.upv.es/thinkmind/dl/conferences/advcomp/advcomp_2022/advcomp_2022_1_50_20019.pdf', 'https://personales.upv.es/thinkmind/dl/conferences/advcomp/advcomp_2022/advcomp_2022_1_50_20019.pdf', NULL),
(49, 'https://www.scitepress.org/PublishedPapers/2022/113550/113550.pdf', 'https://www.scitepress.org/PublishedPapers/2022/113550/113550.pdf', NULL),
(50, 'https://hal.science/hal-02945953/file/nca2020.pdf', 'https://hal.science/hal-02945953/', NULL),
(51, 'https://hal.science/hal-00832976/file/paper_20.pdf', 'https://hal.science/hal-00832976/', NULL),
(52, 'https://inria.hal.science/inria-00001194/document', 'https://link.springer.com/chapter/10.1007/978-3-540-71351-7_55', NULL),
(53, 'https://inria.hal.science/inria-00001039/document', 'https://inria.hal.science/inria-00001039/', NULL),
(54, 'https://hal.science/hal-04419947/document', 'https://ieeexplore.ieee.org/abstract/document/10306006/', NULL),
(55, 'https://hal.science/hal-04090678/document', 'https://hal.science/hal-04090678/', NULL),
(56, '', 'https://hal.science/hal-04446358/', NULL),
(57, 'https://hal.science/hal-01171226/file/compas2015.pdf', 'https://hal.science/hal-01171226/', NULL),
(58, '', 'https://scholar.google.com/scholar?cluster=18139218985508427899&hl=en&oi=scholarr', NULL),
(59, '', 'https://hal.sorbonne-universite.fr/hal-01158008/', NULL),
(60, 'https://pages.lip6.fr/Marc.Shapiro/papers/multi-gargamel-MW4NG-2014-12.pdf', 'https://dl.acm.org/doi/abs/10.1145/2676733.2676737', NULL),
(61, '', 'https://hal.science/hal-01104668/', NULL),
(62, 'https://hal.science/docs/00/98/39/84/PDF/compas2014_submission_27.pdf', 'https://hal.science/hal-00983984/', NULL),
(63, '', 'https://onlinelibrary.wiley.com/doi/abs/10.1002/9781118601365.ch5', NULL),
(64, 'https://hal.sorbonne-universite.fr/hal-00931400/document', 'https://hal.sorbonne-universite.fr/hal-00931400/', NULL),
(65, 'https://inria.hal.science/inria-00591922/document', 'https://ieeexplore.ieee.org/abstract/document/6076766/', NULL),
(66, 'https://inria.hal.science/docs/00/44/79/24/PDF/isc07.pdf', 'https://link.springer.com/chapter/10.1007/978-0-387-78446-5_15', NULL),
(67, 'https://hal.science/docs/00/00/09/82/PDF/hecke.latex.pdf', 'https://hal.science/hal-00000982/', NULL),
(68, 'https://hal-lara.archives-ouvertes.fr/hal-02102654/file/RR2005-28.pdf', 'https://hal-lara.archives-ouvertes.fr/hal-02102654/', NULL),
(69, 'https://inria.hal.science/inria-00000992/file/DevMon05RenPar.pdf', 'https://inria.hal.science/inria-00000992/', NULL),
(70, '', 'https://ieeexplore.ieee.org/abstract/document/10386089/', NULL),
(71, 'https://hal.science/hal-04446399/document', 'https://ieeexplore.ieee.org/abstract/document/10423974/', NULL),
(72, 'https://hal.science/hal-04040554/document', 'https://link.springer.com/chapter/10.1007/978-3-031-29056-5_23', NULL),
(73, 'https://diglib.eg.org/xmlui/bitstream/handle/10.2312/evp20231063/041-043.pdf?sequence=1&isAllowed=y', 'https://diglib.eg.org/xmlui/bitstream/handle/10.2312/evp20231063/041-043.pdf?sequence=1&isAllowed=y', NULL),
(74, '', 'https://search.proquest.com/openview/6ea40021c5491d6a715eaad8add9e825/1?pq-origsite=gscholar&cbl=4998668', NULL),
(75, 'https://theses.hal.science/tel-01241522/document', 'https://theses.hal.science/tel-01241522/', NULL),
(76, 'https://people.irisa.fr/Martin.Quinson/Research/Students/2015-M2R-simterpose-rapport.pdf', 'https://people.irisa.fr/Martin.Quinson/Research/Students/2015-M2R-simterpose-rapport.pdf', NULL),
(77, '', 'https://scholar.google.com/scholar?cluster=17855095685336326640&hl=en&oi=scholarr', NULL),
(78, 'https://www.researchgate.net/profile/Gabriel-Antoniu/publication/226830341_Peer-to-Peer_Metadata_Management_for_Knowledge_Discovery_Applications_in_Grids/links/53dd1ae00cf216e4210c199a/Peer-to-Peer-Metadata-Management-for-Knowledge-Discovery-Applications-in-Grids.pdf', 'https://www.researchgate.net/profile/Gabriel-Antoniu/publication/226830341_Peer-to-Peer_Metadata_Management_for_Knowledge_Discovery_Applications_in_Grids/links/53dd1ae00cf216e4210c199a/Peer-to-Peer-Metadata-Management-for-Knowledge-Discovery-Applications-in-Grids.pdf', NULL),
(79, '', 'https://scholar.google.com/scholar?cluster=584287192700701044&hl=en&oi=scholarr', NULL),
(80, 'https://theses.hal.science/file/index/docid/411447/filename/MonnetPhD-slides.pdf', 'https://theses.hal.science/file/index/docid/411447/filename/MonnetPhD-slides.pdf', NULL),
(81, '', 'https://scholar.google.com/scholar?cluster=112516147230167088&hl=en&oi=scholarr', NULL),
(82, 'https://inria.hal.science/inria-00070212/document', 'https://inria.hal.science/inria-00070212/', NULL),
(83, 'https://inria.hal.science/docs/00/07/02/13/PDF/RR-5811.pdf', 'https://inria.hal.science/inria-00070213/', NULL),
(84, 'https://core.ac.uk/download/pdf/48277726.pdf', 'https://core.ac.uk/download/pdf/48277726.pdf', NULL),
(85, '', 'https://scholar.google.com/scholar?cluster=4571704814220507451&hl=en&oi=scholarr', NULL),
(86, '', 'https://scholar.google.com/scholar?cluster=16676598887406155640&hl=en&oi=scholarr', NULL),
(87, '', 'https://scholar.google.com/scholar?cluster=12500626072348245623&hl=en&oi=scholarr', NULL),
(88, '', 'https://www.computer.org/csdl/proceedings-article/dsnw/2010/05542640/12OmNBqv2ot', NULL),
(89, 'https://www-phare.lip6.fr/cloudnet12/reviewers-cloudnet12.pdf', '', NULL),
(90, 'https://inria.hal.science/hal-01121937/document', 'https://ieeexplore.ieee.org/abstract/document/6012907/', NULL),
(91, 'https://inria.hal.science/hal-01953167/document', 'https://ieeexplore.ieee.org/abstract/document/5560143/', NULL),
(92, 'https://inria.hal.science/hal-00696154/document', 'https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.3173', NULL),
(93, 'https://inria.hal.science/hal-01121941/file/ipdps2012.pdf', 'https://ieeexplore.ieee.org/abstract/document/6267924/', NULL),
(94, 'https://inria.hal.science/hal-00786558/document', 'https://link.springer.com/chapter/10.1007/978-3-642-23400-2_53', NULL),
(95, '', '', NULL),
(96, 'https://infoscience.epfl.ch/record/189836/files/sc2013.pdf', 'https://dl.acm.org/doi/abs/10.1145/2503210.2503271', NULL),
(97, 'https://inria.hal.science/hal-01352109/file/sc16-hal.pdf', 'https://ieeexplore.ieee.org/abstract/document/7877105/', NULL),
(98, 'https://www.researchgate.net/profile/Benoit-Pradelle/publication/261265827_Reactive_DVFS_Control_for_Multicore_Processors/links/588b72c092851cef135fc4f9/Reactive-DVFS-Control-for-Multicore-Processors.pdf', 'https://ieeexplore.ieee.org/abstract/document/6682055/', NULL),
(99, 'https://par.nsf.gov/servlets/purl/10096280', 'https://journals.sagepub.com/doi/abs/10.1177/1094342017711505', NULL),
(100, 'https://inria.hal.science/hal-00926606/document', 'https://link.springer.com/chapter/10.1007/978-3-642-40047-6_43', NULL),
(101, 'https://www.researchgate.net/profile/Benoit-Pradelle/publication/282284873_FoREST-mn_Runtime_DVFS_beyond_communication_slack/links/588ff6c0a6fdcc2351bec1cc/FoREST-mn-Runtime-DVFS-beyond-communication-slack.pdf', 'https://ieeexplore.ieee.org/abstract/document/7039158/', NULL),
(102, 'https://arxiv.org/pdf/1502.06733', 'https://arxiv.org/abs/1502.06733', NULL),
(103, '', 'https://inria.hal.science/hal-01784556/', NULL),
(104, 'http://graal.ens-lyon.fr/~yrobert/onlinepapers/main-europar13.pdf', 'http://graal.ens-lyon.fr/~yrobert/onlinepapers/main-europar13.pdf', NULL),
(105, 'https://inria.hal.science/hal-01121939/document', 'https://inria.hal.science/hal-01121939/', NULL),
(106, 'https://www.netlib.org/utk/people/JD/JackDongarra/PAPERS/msglog.final.pdf', 'https://ieeexplore.ieee.org/abstract/document/5289157/', NULL),
(107, 'https://inria.hal.science/hal-01121956/document', 'https://dl.acm.org/doi/abs/10.1145/2555243.2555251', NULL),
(108, 'https://inria.hal.science/hal-02135545/document', 'https://dl.acm.org/doi/abs/10.1145/3337821.3337893', NULL),
(109, 'https://arxiv.org/pdf/2204.09624', 'https://dl.acm.org/doi/abs/10.1145/3210377.3210408', NULL),
(110, 'https://inria.hal.science/hal-01121943/document', 'https://dl.acm.org/doi/abs/10.1145/2312005.2312029', NULL),
(111, 'https://inria.hal.science/docs/00/34/69/55/PDF/RR-6772.pdf', 'https://link.springer.com/chapter/10.1007/978-3-642-03869-3_42', NULL),
(112, '', 'https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.1775', NULL),
(113, 'https://infoscience.epfl.ch/record/189833/files/ftxs06-lefray.pdf', 'https://dl.acm.org/doi/abs/10.1145/2465813.2465819', NULL),
(114, 'https://inria.hal.science/hal-01121947/document', 'https://ieeexplore.ieee.org/abstract/document/6337798/', NULL),
(115, 'https://hal.science/hal-00719022/document', 'https://hal.science/hal-00719022/', NULL),
(116, 'https://tropars.github.io/downloads/pdf/publications/eurosys2022-KRD-ResPCT.pdf', 'https://dl.acm.org/doi/abs/10.1145/3492321.3519590', NULL),
(117, 'https://hal.science/hal-01949708/document', 'https://ieeexplore.ieee.org/abstract/document/8564488/', NULL),
(118, '', 'https://link.springer.com/chapter/10.1007/978-3-642-15277-1_49', NULL),
(119, '', 'https://link.springer.com/chapter/10.1007/978-3-642-03869-3_58', NULL),
(120, 'https://www.researchgate.net/profile/Christine-Morin-6/publication/4260932_GAMoSe_An_Accurate_Monitoring_Service_for_Grid_Applications/links/5405b6720cf23d9765a7276a/GAMoSe-An-Accurate-Monitoring-Service-for-Grid-Applications.pdf', 'https://ieeexplore.ieee.org/abstract/document/4271930/', NULL),
(121, 'https://inria.hal.science/hal-01121957/file/icdcn2015.pdf', 'https://dl.acm.org/doi/abs/10.1145/2684464.2684476', NULL),
(122, 'https://inria.hal.science/hal-01121959/document', 'https://ieeexplore.ieee.org/abstract/document/7161552/', NULL),
(123, 'https://inria.hal.science/inria-00187682/document', 'https://inria.hal.science/inria-00187682/document', NULL),
(124, 'https://tropars.github.io/downloads/pdf/publications/icdcn2021-PRPP-Logflow.pdf', 'https://dl.acm.org/doi/abs/10.1145/3427796.3427808', NULL),
(125, 'https://infoscience.epfl.ch/record/196582/files/tech_rep_2.pdf', 'https://link.springer.com/chapter/10.1007/978-3-319-09873-9_45', NULL),
(126, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=f95070a83315e53f7311a2acb1282e6415570a24', 'https://ieeexplore.ieee.org/abstract/document/4534308/', NULL),
(127, 'https://inria.hal.science/hal-00854204/document', 'https://inria.hal.science/hal-00854204/document', NULL),
(128, '', 'https://scholar.google.com/scholar?cluster=4718113233151607135&hl=en&oi=scholarr', NULL),
(129, '', 'https://scholar.google.com/scholar?cluster=4981815202970008806&hl=en&oi=scholarr', NULL),
(130, '', 'https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.6231', NULL),
(131, 'https://inria.hal.science/inria-00476276/file/RR-7264.pdf', 'https://inria.hal.science/inria-00476276/', NULL),
(132, '', 'https://link.springer.com/chapter/10.1007/978-3-319-27308-2_52', NULL),
(133, 'https://inria.hal.science/inria-00121059/document', 'https://inria.hal.science/inria-00121059/', NULL),
(134, '', 'https://ieeexplore.ieee.org/abstract/document/5623396/', NULL),
(135, '', 'https://hal.science/inria-00424021/', NULL),
(136, '', 'https://link.springer.com/chapter/10.1007/978-3-030-71593-9_23', NULL),
(137, 'https://sdm.lbl.gov/snta/2020/snta07-Sharma-slides.pdf', 'https://dl.acm.org/doi/abs/10.1145/3391812.3396271', NULL),
(138, 'https://revistas.tec.ac.cr/index.php/memorias/article/download/4514/4086', 'https://revistas.tec.ac.cr/index.php/memorias/article/view/4514', NULL),
(139, 'https://ieeexplore.ieee.org/iel7/7562293/7568299/07568304.pdf', 'https://ieeexplore.ieee.org/abstract/document/7568304/', NULL),
(140, 'https://inria.hal.science/hal-01952884/file/tsi2011.pdf', 'https://inria.hal.science/hal-01952884/', NULL),
(141, 'http://cloud-at-work.irisa.fr/publications/files/3pgcic_catalin_v4.pdf', 'https://ieeexplore.ieee.org/abstract/document/5662745/', NULL),
(142, 'https://theses.hal.science/tel-00456490/file/manuscrit_tropars.pdf', 'https://theses.hal.science/tel-00456490/', NULL),
(143, 'https://inria.hal.science/inria-00430443/document', 'https://inria.hal.science/inria-00430443/document', NULL),
(144, '', 'https://hal.science/inria-00424027/', NULL),
(145, 'https://tropars.github.io/downloads/lectures/DS/DS-6-atomic_broadcast.pdf', 'https://tropars.github.io/downloads/lectures/DS/DS-6-atomic_broadcast.pdf', NULL),
(146, 'https://tropars.github.io/downloads/lectures/DS/DS-3-failure_detectors.pdf', 'https://tropars.github.io/downloads/lectures/DS/DS-3-failure_detectors.pdf', NULL),
(147, 'https://tropars.github.io/downloads/lectures/DS/DS-5-consensus.pdf', 'https://tropars.github.io/downloads/lectures/DS/DS-5-consensus.pdf', NULL),
(148, 'https://tropars.github.io/downloads/lectures/DS/DS-1-motivations_ordering.pdf', 'https://tropars.github.io/downloads/lectures/DS/DS-1-motivations_ordering.pdf', NULL),
(149, 'https://tropars.github.io/downloads/lectures/Cloud/Cloud--Replication.pdf', 'https://tropars.github.io/downloads/lectures/Cloud/Cloud--Replication.pdf', NULL),
(150, 'https://tropars.github.io/downloads/lectures/Cloud/Cloud--Failures.pdf', 'https://tropars.github.io/downloads/lectures/Cloud/Cloud--Failures.pdf', NULL),
(151, '', 'https://infoscience.epfl.ch/record/252206', NULL),
(152, 'https://scholar.archive.org/work/v2gugai5xra6dnzqwqtvlnruzi/access/wayback/https://hal.inria.fr/hal-01952884/document', 'https://scholar.archive.org/work/v2gugai5xra6dnzqwqtvlnruzi/access/wayback/https://hal.inria.fr/hal-01952884/document', NULL),
(153, 'http://cloud-at-work.irisa.fr/publications/files/ccgrid10_catalin_v3.pdf', 'http://cloud-at-work.irisa.fr/publications/files/ccgrid10_catalin_v3.pdf', NULL),
(154, 'https://lig-membres.imag.fr/ropars/wp-content/uploads/sites/205/2016/02/2_error_detection.pdf', 'https://lig-membres.imag.fr/ropars/wp-content/uploads/sites/205/2016/02/2_error_detection.pdf', NULL),
(155, '', 'https://scholar.google.com/scholar?cluster=3765961890501307132&hl=en&oi=scholarr', NULL),
(156, '', 'https://ieeexplore.ieee.org/abstract/document/6903556/', NULL),
(157, '', 'https://scholar.google.com/scholar?cluster=11605149344436078689&hl=en&oi=scholarr', NULL),
(158, '', 'https://scholar.google.com/scholar?cluster=6652293495513030188&hl=en&oi=scholarr', NULL),
(159, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=12cfebd40a360e884943a456bccec37ebee7f990', 'https://ieeexplore.ieee.org/abstract/document/1676201/', NULL),
(160, 'https://www.netlib.org/utk/people/JackDongarra/journals/217_2011_the-international-exascale-software-roadmap.pdf', 'https://journals.sagepub.com/doi/abs/10.1177/1094342010391989', NULL),
(161, 'https://snir.cs.illinois.edu/listed/J8.pdf', 'https://ieeexplore.ieee.org/abstract/document/1676169/', NULL),
(162, 'https://digitalcommons.unl.edu/cgi/viewcontent.cgi?article=1359&context=usdoepub', 'https://journals.sagepub.com/doi/abs/10.1177/1094342014522573', NULL),
(163, 'https://dl.acm.org/doi/pdf/10.1145/42190.42277', 'https://dl.acm.org/doi/abs/10.1145/42190.42277', NULL),
(164, 'http://snir.cs.illinois.edu/listed/J53.pdf', 'https://journals.sagepub.com/doi/abs/10.1177/1094342009347767', NULL),
(165, 'https://dl.acm.org/doi/abs/10.14529/jsfi140101', 'https://dl.acm.org/doi/abs/10.14529/jsfi140101', NULL),
(166, 'https://users.cs.cf.ac.uk/David.W.Walker/papers/supercomputer96.ps', 'https://users.cs.cf.ac.uk/David.W.Walker/papers/supercomputer96.ps', NULL),
(167, 'https://dl.acm.org/doi/pdf/10.1145/28395.28428', 'https://dl.acm.org/doi/abs/10.1145/28395.28428', NULL),
(168, '', 'https://books.google.com/books?hl=en&lr=&id=oadVAgAAQBAJ&oi=fnd&pg=PA1&dq=info:hs7Y2Mt_gPEJ:scholar.google.com&ots=pAOFqa97pH&sig=mel_DvjjavHGgzhXMvDMEyEQRXY', NULL),
(169, 'https://www.sciencedirect.com/science/article/pii/030439759090192K/pdf?md5=59215c5f2c5cc58036a89ba38538ca31&pid=1-s2.0-030439759090192K-main.pdf', 'https://www.sciencedirect.com/science/article/pii/030439759090192K', NULL),
(170, 'https://snir.cs.illinois.edu/listed/J14.pdf', 'https://ieeexplore.ieee.org/abstract/document/6312202/', NULL),
(171, 'https://www.academia.edu/download/41880411/Allen_F._et_al._Blue_Gene_A_Vision_for_P20160202-30232-hybaq0.pdf', 'https://ieeexplore.ieee.org/abstract/document/5386970/', NULL),
(172, 'https://www.sciencedirect.com/science/article/pii/030439759090188N/pdf?md5=e65d8df17dfb0ef2b7bfb0e145c14864&pid=1-s2.0-030439759090188N-main.pdf&_valck=1', 'https://www.sciencedirect.com/science/article/pii/030439759090188N', NULL),
(173, 'https://www.academia.edu/download/49626743/sj.342.015220161015-6496-au1izb.pdf', 'https://ieeexplore.ieee.org/abstract/document/5387269/', NULL),
(174, 'https://dl.acm.org/doi/pdf/10.1145/48014.48247', 'https://dl.acm.org/doi/abs/10.1145/48014.48247', NULL),
(175, '', 'https://scholar.google.com/scholar?cluster=6860672456968689889&hl=en&oi=scholarr', NULL),
(176, 'http://ww.w.unixer.de/publications/img/hoefler_snir_topology_mapping.pdf', 'https://dl.acm.org/doi/abs/10.1145/1995896.1995909', NULL),
(177, 'https://www.academia.edu/download/100284728/C24.pdf', 'https://ieeexplore.ieee.org/abstract/document/4568273/', NULL),
(178, 'https://www.academia.edu/download/100270714/Haim_20Gaifman_20and_20Marc_20Snir_20-_20Probabilities_20Over_20Rich_20Languages__20Testing_20and_20Randomness.pdf', 'https://www.cambridge.org/core/journals/journal-of-symbolic-logic/article/probabilities-over-rich-languages-testing-and-randomness/C0439A4B9D9541401E323C63DF17865C', NULL),
(179, 'https://www.usenix.org/legacy/events/hotpar09/tech/full_papers/bocchino/bocchino.pdf', 'https://www.usenix.org/legacy/events/hotpar09/tech/full_papers/bocchino/bocchino.pdf', NULL),
(180, 'https://www.osti.gov/servlets/purl/419266', 'https://link.springer.com/chapter/10.1007/3-540-61626-8_16', NULL),
(181, 'https://dl.acm.org/doi/pdf/10.1145/72935.72937', 'https://dl.acm.org/doi/pdf/10.1145/72935.72937', NULL),
(182, '', 'https://scholar.google.com/scholar?cluster=526596436682873127&hl=en&oi=scholarr', NULL),
(183, 'https://dl.acm.org/doi/pdf/10.1145/48022.48024', 'https://dl.acm.org/doi/abs/10.1145/48022.48024', NULL),
(184, 'https://dl.acm.org/doi/pdf/10.1145/800220.806703', 'https://dl.acm.org/doi/abs/10.1145/800220.806703', NULL),
(185, 'https://dl.acm.org/doi/pdf/10.1145/233977.234000', 'https://dl.acm.org/doi/abs/10.1145/233977.234000', NULL),
(186, 'https://snir.cs.illinois.edu/listed/C49.pdf', 'https://link.springer.com/chapter/10.1007/978-1-4613-1401-1_5', NULL),
(187, 'https://dl.acm.org/doi/pdf/10.1145/174130.174131', 'https://dl.acm.org/doi/pdf/10.1145/174130.174131', NULL),
(188, 'https://www.nature.com/articles/nrg2857-c1', 'https://www.nature.com/articles/nrg2857-c1', NULL),
(189, 'http://snir.cs.illinois.edu/listed/C30.pdf', 'https://link.springer.com/content/pdf/10.1007/BFb0035792.pdf', NULL),
(190, 'https://core.ac.uk/download/pdf/4874775.pdf', 'https://ieeexplore.ieee.org/abstract/document/342126/', NULL),
(191, 'https://snir.cs.illinois.edu/listed/C83.pdf', 'https://ieeexplore.ieee.org/abstract/document/6468487/', NULL),
(192, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=6d33c408110f6dff869177c4edf3fcd9845bb05a', 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=6d33c408110f6dff869177c4edf3fcd9845bb05a', NULL),
(193, 'https://www.sciencedirect.com/science/article/pii/0304397586900848/pdf?md5=dcb9a6877dba2428188d983b7c336cd5&pid=1-s2.0-0304397586900848-main.pdf&_valck=1', 'https://www.sciencedirect.com/science/article/pii/0304397586900848', NULL),
(194, 'https://dl.acm.org/doi/pdf/10.1145/322326.322341', 'https://dl.acm.org/doi/pdf/10.1145/322326.322341', NULL),
(195, 'https://dl.acm.org/doi/pdf/10.1145/1067649.801711', 'https://dl.acm.org/doi/abs/10.1145/1067649.801711', NULL),
(196, 'https://www.cs.cmu.edu/~artigas/papers/sysjour2000.pdf', 'https://ieeexplore.ieee.org/abstract/document/5387068/', NULL),
(197, 'https://inria.hal.science/hal-00715252/document', 'https://ieeexplore.ieee.org/abstract/document/6337776/', NULL),
(198, 'https://dl.acm.org/doi/pdf/10.1145/3192366.3192404', 'https://dl.acm.org/doi/abs/10.1145/3192366.3192404', NULL),
(199, 'https://escholarship.org/content/qt9js989n4/qt9js989n4.pdf', 'https://dl.acm.org/doi/abs/10.1145/2503210.2503278', NULL),
(200, 'https://ieeexplore.ieee.org/ielaam/71/8289387/8082139-aam.pdf', 'https://ieeexplore.ieee.org/abstract/document/8082139/', NULL),
(201, '', 'https://www.sciencedirect.com/science/article/pii/0196677486900039', NULL),
(202, 'http://snir.cs.illinois.edu/listed/J22.pdf', 'https://link.springer.com/article/10.1007/BF01840376', NULL),
(203, 'https://snir.cs.illinois.edu/listed/J38.pdf', 'https://ieeexplore.ieee.org/abstract/document/5387272/', NULL),
(204, 'https://www.sciencedirect.com/science/article/pii/0304397585902105/pdf?md5=8c4dfe1997d8dbb402304312a86d18c4&pid=1-s2.0-0304397585902105-main.pdf', 'https://www.sciencedirect.com/science/article/pii/0304397585902105', NULL),
(205, 'https://snir.cs.illinois.edu/listed/J37.pdf', 'https://ieeexplore.ieee.org/abstract/document/5387276/', NULL),
(206, 'https://inria.hal.science/hal-01251938/document', 'https://ieeexplore.ieee.org/abstract/document/7161586/', NULL),
(207, 'https://pdfs.semanticscholar.org/f4a2/e67dcff01f5b8af7b4cc7606a536cdeea99f.pdf', 'https://dl.acm.org/doi/abs/10.1145/2063348.2063356', NULL),
(208, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=4220831747256647bad1acd97860262b9ec084b8', 'https://ieeexplore.ieee.org/abstract/document/1592763/', NULL),
(209, 'http://snir.cs.illinois.edu/listed/C85.pdf', 'https://dl.acm.org/doi/abs/10.1145/2462902.2462903', NULL),
(210, 'https://www.academia.edu/download/48199220/12.870020160820-20602-19q6m77.pdf', 'https://ieeexplore.ieee.org/abstract/document/8700/', NULL),
(211, '', 'https://scholar.google.com/scholar?cluster=7165532247805320107&hl=en&oi=scholarr', NULL),
(212, 'https://dl.acm.org/doi/pdf/10.1145/327070.327143', 'https://dl.acm.org/doi/pdf/10.1145/327070.327143', NULL),
(213, 'http://fredrikbk.com/publications/ghost_cell_pattern.pdf', 'https://dl.acm.org/doi/abs/10.1145/1953611.1953615', NULL),
(214, '', 'https://scholar.google.com/scholar?cluster=7290107429018416041&hl=en&oi=scholarr', NULL),
(215, 'https://dominoweb.draco.res.ibm.com/reports/RC22059.pdf', 'https://link.springer.com/article/10.1007/s00224-003-1071-0', NULL),
(216, 'https://patentimages.storage.googleapis.com/10/f3/2d/90e2fae32b2a27/US6085295.pdf', 'https://patents.google.com/patent/US6085295A/en', NULL),
(217, 'https://patentimages.storage.googleapis.com/5c/fa/ee/028840df5f55c7/US6886085.pdf', 'https://patents.google.com/patent/US6886085B1/en', NULL),
(218, 'https://ntrs.nasa.gov/api/citations/19970026966/downloads/19970026966.pdf', 'https://ntrs.nasa.gov/citations/19970026966', NULL),
(219, 'https://snir.cs.illinois.edu/listed/J26.pdf', 'https://www.sciencedirect.com/science/article/pii/019667749190002G', NULL),
(220, 'https://www.academia.edu/download/48841970/sj.373.040920160914-18779-1bji9bj.pdf', 'https://ieeexplore.ieee.org/abstract/document/5387115/', NULL),
(221, 'https://snir.cs.illinois.edu/listed/J49.pdf', 'https://journals.sagepub.com/doi/abs/10.1177/1094342004048535', NULL),
(222, 'https://www.osti.gov/servlets/purl/1140752', 'https://journals.sagepub.com/doi/abs/10.1177/1094342014548772', NULL),
(223, 'https://pdfs.semanticscholar.org/6484/5da95165e0ca40b34400c3fa1795dd722a7d.pdf', 'https://link.springer.com/chapter/10.1007/978-3-319-14325-5_47', NULL),
(224, 'https://www.ideals.illinois.edu/items/11033/bitstreams/40651/data.pdf', 'https://ieeexplore.ieee.org/abstract/document/1515592/', NULL),
(225, 'https://pavanbalaji.github.io/pubs/2013/eurompi/eurompi13.endpoints.pdf', 'https://dl.acm.org/doi/abs/10.1145/2488551.2488553', NULL),
(226, 'http://snir.cs.illinois.edu/listed/J34.pdf', 'https://www.sciencedirect.com/science/article/pii/0167819194900221', NULL),
(227, 'https://snir.cs.illinois.edu/listed/J28.pdf', 'https://ieeexplore.ieee.org/abstract/document/136185/', NULL),
(228, 'https://snir.cs.illinois.edu/listed/J55.pdf', 'https://ieeexplore.ieee.org/abstract/document/6636318/', NULL),
(229, 'https://www.academia.edu/download/44969659/273.full.pdf', 'https://journals.sagepub.com/doi/abs/10.1177/1094342013488258', NULL),
(230, '', 'https://ieeexplore.ieee.org/abstract/document/5389499/', NULL),
(231, 'http://snir.cs.illinois.edu/listed/C105.pdf', 'https://ieeexplore.ieee.org/abstract/document/7973730/', NULL),
(232, 'https://www.academia.edu/download/49143320/cgo09.pdf', 'https://ieeexplore.ieee.org/abstract/document/4907649/', NULL),
(233, 'https://escholarship.org/uc/item/77s572x0', 'https://dl.acm.org/doi/abs/10.1145/2600212.2600708', NULL),
(234, 'https://arxiv.org/pdf/1903.06681', 'https://ieeexplore.ieee.org/abstract/document/8820780/', NULL),
(235, 'https://dl.acm.org/doi/pdf/10.1145/4221.4259', 'https://dl.acm.org/doi/abs/10.1145/4221.4259', NULL),
(236, 'https://www.osti.gov/pages/servlets/purl/1346736', 'https://dl.acm.org/doi/abs/10.1145/2987371', NULL),
(237, 'https://journals.sagepub.com/doi/pdf/10.1177/1094342018762036', 'https://journals.sagepub.com/doi/abs/10.1177/1094342018762036', NULL),
(238, '', 'https://scholar.google.com/scholar?cluster=9208425060636371182&hl=en&oi=scholarr', NULL),
(239, 'http://svmoore.pbworks.com/w/file/fetch/78461153/mpi2.pdf', 'http://svmoore.pbworks.com/w/file/fetch/78461153/mpi2.pdf', NULL),
(240, 'https://patentimages.storage.googleapis.com/7c/52/03/05beeae9feca91/US5345229.pdf', 'https://patents.google.com/patent/US5345229A/en', NULL),
(241, 'https://dl.acm.org/doi/pdf/10.1145/3309205', 'https://dl.acm.org/doi/abs/10.1145/3309205', NULL),
(242, 'https://dl.acm.org/doi/pdf/10.1145/3295500.3356207', 'https://dl.acm.org/doi/abs/10.1145/3295500.3356207', NULL),
(243, 'https://www.academia.edu/download/76551523/mpi_programming_environment_for_ibm_sp_sp.pdf', 'https://ieeexplore.ieee.org/abstract/document/500011/', NULL),
(244, 'http://snir.cs.illinois.edu/listed/J3.pdf', 'https://link.springer.com/article/10.1007/BF01744302', NULL),
(245, 'http://fredrikbk.com/publications/immutator.pdf', 'https://dl.acm.org/doi/abs/10.1145/1985793.1985803', NULL),
(246, 'http://parlab.eecs.berkeley.edu/sites/all/parlab/files/BIS%20for%20IEEE%20Micro%20V6.pdf', 'https://ieeexplore.ieee.org/abstract/document/5446250/', NULL),
(247, 'https://www.osti.gov/servlets/purl/1366464', 'https://dl.acm.org/doi/abs/10.1145/2966884.2966914', NULL),
(248, 'https://www.christian-engelmann.info/publications/bautista-gomez16reducing.pdf', 'https://ieeexplore.ieee.org/abstract/document/7516017/', NULL),
(249, 'https://www.ideals.illinois.edu/items/18795/bitstreams/67720/data.pdf', 'https://dl.acm.org/doi/abs/10.1145/2063384.2063485', NULL),
(250, 'https://www.osti.gov/servlets/purl/1489452', 'https://www.osti.gov/servlets/purl/1489452', NULL),
(251, '', 'https://scholar.google.com/scholar?cluster=12857723498543664142&hl=en&oi=scholarr', NULL),
(252, 'https://core.ac.uk/download/pdf/52922277.pdf', 'https://www.sciencedirect.com/science/article/pii/S0743731505001577', NULL),
(253, 'https://repository.bilkent.edu.tr/bitstreams/1dfa7876-a358-4d17-87c9-45332e16af49/download', 'https://epubs.siam.org/doi/abs/10.1137/080737770', NULL),
(254, 'https://inria.hal.science/hal-01148202/file/als_distmem.pdf', 'https://dl.acm.org/doi/abs/10.1145/2807591.2807624', NULL),
(255, 'https://inria.hal.science/hal-00803479/file/YJPDC2489.pdf', 'https://www.sciencedirect.com/science/article/pii/S0743731507001724', NULL),
(256, 'https://inria.hal.science/hal-00807276/file/UcarAykanatSISCv25n6.pdf', 'https://epubs.siam.org/doi/abs/10.1137/S1064827502410463', NULL),
(257, 'https://oatao.univ-toulouse.fr/22013/1/knight_22013.pdf', 'https://epubs.siam.org/doi/abs/10.1137/110825753', NULL),
(258, 'https://inria.hal.science/hal-00786551/file/cku-didc11v2.pdf', 'https://dl.acm.org/doi/abs/10.1145/1996014.1996022', NULL),
(259, 'https://www.sciencedirect.com/science/article/pii/S0024379516001257', 'https://www.sciencedirect.com/science/article/pii/S0024379516001257', NULL),
(260, 'https://inria.hal.science/hal-01397464/document', 'https://epubs.siam.org/doi/abs/10.1137/16M1102744', NULL),
(261, 'https://inria.hal.science/hal-01354894/file/PID4261953.pdf', 'https://ieeexplore.ieee.org/abstract/document/7573808/', NULL),
(262, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=edf93a9e4ba76da7b21dde87ac0cb59ae9e1dcc0', 'https://epubs.siam.org/doi/abs/10.1137/100799411', NULL),
(263, 'https://www.sciencedirect.com/science/article/am/pii/S0743731514002275', 'https://www.sciencedirect.com/science/article/pii/S0743731514002275', NULL),
(264, 'https://inria.hal.science/hal-00786548/document', 'https://dl.acm.org/doi/abs/10.1145/2049673.2049677', NULL),
(265, 'http://www.cs.bilkent.edu.tr/~aykanat/papers/07JPDC-kamer.pdf', 'https://www.sciencedirect.com/science/article/pii/S0743731506002310', NULL),
(266, 'https://hal.science/hal-00803507/document', 'https://epubs.siam.org/doi/abs/10.1137/060662459', NULL),
(267, 'https://ens-lyon.hal.science/ensl-00527462/document', 'https://ieeexplore.ieee.org/abstract/document/6012869/', NULL),
(268, 'https://inria.hal.science/hal-00763563/document', 'https://books.google.com/books?hl=en&lr=&id=oasxAAAAQBAJ&oi=fnd&pg=PA53&dq=info:nLC93OIIvxkJ:scholar.google.com&ots=67TOwPYfgf&sig=A4CTvUjF2J24F7rp6Oad86LMWlM', NULL),
(269, '', 'https://inria.hal.science/hal-00787042/', NULL),
(270, 'https://inria.hal.science/hal-01159677/document', 'https://ieeexplore.ieee.org/abstract/document/7161509/', NULL),
(271, 'https://inria.hal.science/hal-02306566/file/paper_dagPart_sisc.pdf', 'https://epubs.siam.org/doi/abs/10.1137/18M1176865', NULL),
(272, 'https://inria.hal.science/hal-00763920/file/paper.pdf', 'https://www.sciencedirect.com/science/article/pii/S030505481200278X', NULL),
(273, 'https://repository.bilkent.edu.tr/bitstream/handle/11693/23266/Partitioning%20sparse%20matrices%20for%20parallel%20preconditioned%20iterative%20methods.pdf?sequence=1', 'https://epubs.siam.org/doi/abs/10.1137/040617431', NULL),
(274, 'https://dl.acm.org/doi/pdf/10.1145/3330345.3330366', 'https://dl.acm.org/doi/abs/10.1145/3330345.3330366', NULL),
(275, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=961ba892f7fed7f501c5a6f21f04c137a51ea476', 'https://ieeexplore.ieee.org/abstract/document/5703072/', NULL),
(276, 'https://inria.hal.science/hal-01817501/document', 'https://ieeexplore.ieee.org/abstract/document/8820781/', NULL),
(277, 'https://inria.hal.science/hal-00763565/file/cdku-ipdps12.pdf', 'https://ieeexplore.ieee.org/abstract/document/6267893/', NULL),
(278, 'https://hal.science/hal-00803489/file/adruvecpar.pdf', 'https://link.springer.com/chapter/10.1007/978-3-540-92859-1_27', NULL),
(279, 'https://inria.hal.science/hal-01159687/document', 'https://ieeexplore.ieee.org/abstract/document/7161578/', NULL),
(280, 'https://inria.hal.science/hal-01672010/document', 'https://ieeexplore.ieee.org/abstract/document/7973723/', NULL),
(281, 'https://repository.bilkent.edu.tr/bitstreams/c747be93-410f-473e-b5d9-2f34f499479c/download', 'https://link.springer.com/chapter/10.1007/978-3-540-39737-3_115', NULL),
(282, 'https://etna.math.kent.edu/vol.26.2007/pp209-227.dir/pp209-227.pdf', 'https://etna.math.kent.edu/vol.26.2007/pp209-227.dir/pp209-227.pdf', NULL),
(283, 'https://ens-lyon.hal.science/ensl-00411638/document', 'https://api.taylorfrancis.com/content/chapters/edit/download?identifierName=doi&identifierValue=10.1201/b11644-6&type=chapterpdf', NULL),
(284, 'https://www.sciencedirect.com/science/article/pii/S0024379518302568', 'https://www.sciencedirect.com/science/article/pii/S0024379518302568', NULL),
(285, '', 'https://scholar.google.com/scholar?cluster=13437782930886233998&hl=en&oi=scholarr', NULL),
(286, 'https://core.ac.uk/download/pdf/52922855.pdf', 'https://www.sciencedirect.com/science/article/pii/S0167819109001306', NULL),
(287, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=8250a40850b971d1ec20c781f39842e7fb6a1596', 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=8250a40850b971d1ec20c781f39842e7fb6a1596', NULL),
(288, 'https://www.researchgate.net/profile/Mustafa-Pinar/publication/220378929_Parallel_image_restoration_using_surrogate_constraint_methods/links/0c960530b33b3d6e89000000/Parallel-image-restoration-using-surrogate-constraint-methods.pdf', 'https://www.sciencedirect.com/science/article/pii/S0743731506001973', NULL),
(289, 'https://www.sciencedirect.com/science/article/am/pii/S1877750316300461', 'https://www.sciencedirect.com/science/article/pii/S1877750316300461', NULL),
(290, 'https://inria.hal.science/hal-01219316/document', 'https://inria.hal.science/hal-01219316/document', NULL),
(291, 'https://arxiv.org/pdf/1303.1379', 'https://link.springer.com/chapter/10.1007/978-3-642-40047-6_84', NULL),
(292, 'https://arxiv.org/pdf/1901.02775', 'https://dl.acm.org/doi/abs/10.1145/3418077', NULL),
(293, 'https://inria.hal.science/hal-00923454/document', 'https://link.springer.com/chapter/10.1007/978-3-642-55195-6_16', NULL),
(294, 'https://www.sciencedirect.com/science/article/pii/S0304397517307053', 'https://www.sciencedirect.com/science/article/pii/S0304397517307053', NULL),
(295, 'https://ens-lyon.hal.science/ensl-00536955/document', 'https://epubs.siam.org/doi/abs/10.1137/080720036', NULL),
(296, 'https://www.researchgate.net/profile/Michele-Benzi/publication/228684729_Product_preconditioning_for_Markov_chain_problems/links/00b7d52cae02e3bcc7000000/Product-preconditioning-for-Markov-chain-problems.pdf', 'https://www.researchgate.net/profile/Michele-Benzi/publication/228684729_Product_preconditioning_for_Markov_chain_problems/links/00b7d52cae02e3bcc7000000/Product-preconditioning-for-Markov-chain-problems.pdf', NULL),
(297, 'https://inria.hal.science/hal-01242516/document', 'https://www.sciencedirect.com/science/article/pii/S0743731515001070', NULL),
(298, 'https://ens-lyon.hal.science/ensl-00381907/file/bucar.pdf', 'https://www.worldscientific.com/doi/abs/10.1142/S012962640900033X', NULL),
(299, 'https://inria.hal.science/hal-01159692/file/kayaaslan.pdf', 'https://ieeexplore.ieee.org/abstract/document/7284436/', NULL),
(300, 'https://inria.hal.science/hal-01111707/file/RR-8675.pdf', 'https://inria.hal.science/hal-01111707/', NULL),
(301, 'https://inria.hal.science/hal-00923447/file/paper.pdf', 'https://ieeexplore.ieee.org/abstract/document/6651032/', NULL),
(302, 'https://inria.hal.science/inria-00567129/file/RR-7546.pdf', 'https://link.springer.com/chapter/10.1007/978-3-642-29737-3_38', NULL),
(303, 'https://epubs.siam.org/doi/pdf/10.1137/1.9781611975215.6', 'https://epubs.siam.org/doi/abs/10.1137/1.9781611975215.6', NULL),
(304, '', 'https://inria.hal.science/hal-00787015/', NULL),
(305, 'https://www.sciencedirect.com/science/article/am/pii/S187775031831130X', 'https://www.sciencedirect.com/science/article/pii/S187775031831130X', NULL),
(306, 'https://inria.hal.science/hal-00763559/document', 'https://books.google.com/books?hl=en&lr=&id=oasxAAAAQBAJ&oi=fnd&pg=PA171&dq=info:HODqCFqNNFcJ:scholar.google.com&ots=67TOwPZaig&sig=EvimH6exx-dlz2afR0Zje-V6biI', NULL),
(307, 'https://inria.hal.science/hal-01897555/file/1-5sisc.pdf', 'https://epubs.siam.org/doi/abs/10.1137/16M1105591', NULL),
(308, 'https://inria.hal.science/docs/00/92/34/64/PDF/matchingGPU.pdf', 'https://ieeexplore.ieee.org/abstract/document/6687335/', NULL),
(309, 'https://api.taylorfrancis.com/content/chapters/edit/download?identifierName=doi&identifierValue=10.1201/b11644-8&type=chapterpdf', '', NULL),
(310, 'https://inria.hal.science/hal-00786552/file/hp-encyc.pdf', 'https://inria.hal.science/hal-00786552/', NULL),
(311, 'https://epubs.siam.org/doi/pdf/10.1137/1.9781611976007.11', 'https://epubs.siam.org/doi/abs/10.1137/1.9781611976007.11', NULL),
(312, 'https://inria.hal.science/hal-01159679/document', 'https://ieeexplore.ieee.org/abstract/document/7284417/', NULL),
(313, 'https://inria.hal.science/docs/00/93/28/82/PDF/RR-8448.pdf', 'https://inria.hal.science/hal-00932882/', NULL),
(314, 'https://ens-lyon.hal.science/ensl-00529088/document', 'https://ieeexplore.ieee.org/abstract/document/5452415/', NULL),
(315, 'https://arxiv.org/pdf/2103.05394', 'https://arxiv.org/abs/2103.05394', NULL),
(316, 'https://inria.hal.science/hal-01354892/document', 'https://link.springer.com/chapter/10.1007/978-3-319-46376-6_11', NULL),
(317, 'https://inria.hal.science/hal-00763535/file/clusterpaper.pdf', 'https://ieeexplore.ieee.org/abstract/document/6337787/', NULL),
(318, '', 'https://scholar.google.com/scholar?cluster=18226999206287204530&hl=en&oi=scholarr', NULL),
(319, '', 'https://scholar.google.com/scholar?cluster=9701051809011840768&hl=en&oi=scholarr', NULL),
(320, 'https://inria.hal.science/hal-01318486/document', 'https://www.degruyter.com/document/doi/10.1515/cmam-2016-0040/html', NULL),
(321, '', 'https://scholar.google.com/scholar?cluster=13802957865626820650&hl=en&oi=scholarr', NULL),
(322, 'https://inria.hal.science/hal-00797207/document', 'https://inria.hal.science/hal-00797207/', NULL),
(323, 'http://webdoc.sub.gwdg.de/ebook/serien/ah/AIB/2011-09.pdf#page=90', 'http://webdoc.sub.gwdg.de/ebook/serien/ah/AIB/2011-09.pdf#page=90', NULL),
(324, 'https://inria.hal.science/docs/00/80/34/70/PDF/ucarCTPSM.pdf', 'https://link.springer.com/chapter/10.1007/978-3-540-68111-3_75', NULL),
(325, 'http://www.cs.bilkent.edu.tr/tech-reports/2005/BU-CE-0509.pdf', 'https://search.proquest.com/openview/d24d1b506a1ba9e657edeb41fad7f7f7/1?pq-origsite=gscholar&cbl=2026366&diss=y', NULL),
(326, 'https://hal.science/hal-01924180/document', 'https://link.springer.com/chapter/10.1007/978-3-030-34029-2_17', NULL),
(327, 'https://inria.hal.science/inria-00567970/document', 'https://epubs.siam.org/doi/abs/10.1137/110825443', NULL),
(328, 'https://inria.hal.science/hal-00763553/document', 'https://ieeexplore.ieee.org/abstract/document/6337568/', NULL),
(329, 'https://inria.hal.science/inria-00580434/document', 'https://inria.hal.science/inria-00580434/document', NULL),
(330, 'https://www.sciencedirect.com/science/article/am/pii/S0166218X20303620', 'https://www.sciencedirect.com/science/article/pii/S0166218X20303620', NULL),
(331, 'https://inria.hal.science/hal-02910997/document', 'https://ieeexplore.ieee.org/abstract/document/9286154/', NULL),
(332, 'https://inria.hal.science/hal-02123526/file/RR-9274.pdf', 'https://inria.hal.science/hal-02123526/', NULL),
(333, 'https://inria.hal.science/hal-01114413/file/paper.pdf', 'https://ieeexplore.ieee.org/abstract/document/7116880/', NULL),
(334, 'https://inria.hal.science/hal-00877211/document', 'https://ieeexplore.ieee.org/abstract/document/6877287/', NULL),
(335, 'https://inria.hal.science/hal-03127673/document', 'https://dl.acm.org/doi/abs/10.1145/3568421', NULL),
(336, 'https://epubs.siam.org/doi/pdf/10.1137/1.9781611976830.4', 'https://epubs.siam.org/doi/abs/10.1137/1.9781611976830.4', NULL),
(337, 'https://inria.hal.science/tel-02377874/document', 'https://inria.hal.science/tel-02377874/document', NULL),
(338, 'https://inria.hal.science/hal-01071414/file/article.pdf', 'https://www.sciencedirect.com/science/article/pii/S0020019014002166', NULL),
(339, 'https://inria.hal.science/hal-01111292/document', 'https://ieeexplore.ieee.org/abstract/document/6787247/', NULL),
(340, 'https://faculty.cc.gatech.edu/~umit/PaToH/patoh-matlab.pdf', 'https://faculty.cc.gatech.edu/~umit/PaToH/patoh-matlab.pdf', NULL),
(341, 'https://inria.hal.science/hal-03612360/document', 'https://ieeexplore.ieee.org/abstract/document/9835222/', NULL),
(342, 'https://inria.hal.science/hal-02463717/preview/RR-9321.pdf', 'https://inria.hal.science/hal-02463717/preview/RR-9321.pdf', NULL),
(343, 'https://epubs.siam.org/doi/pdf/10.1137/1.9781611976229.13', 'https://epubs.siam.org/doi/abs/10.1137/1.9781611976229.13', NULL),
(344, 'http://www.scholarpedia.org/article/Numerical_Linear_Algebra', 'http://www.scholarpedia.org/article/Numerical_Linear_Algebra', NULL),
(345, 'https://inria.hal.science/hal-00795429/document', 'https://inria.hal.science/hal-00795429/document', NULL),
(346, '', 'https://link.springer.com/chapter/10.1007/978-3-642-32820-6_54', NULL),
(347, '', 'https://inria.hal.science/hal-00786567/', NULL),
(348, 'https://www.researchgate.net/profile/Bora_Ucar/publication/246140937_Experiments_on_Hypergraph_Models_for_Parallelizing_Preconditioned_Iterative_Methods/links/55e4268b08aecb1a7cc9ebde/Experiments-on-Hypergraph-Models-for-Parallelizing-Preconditioned-Iterative-Methods.pdf', 'https://www.researchgate.net/profile/Bora_Ucar/publication/246140937_Experiments_on_Hypergraph_Models_for_Parallelizing_Preconditioned_Iterative_Methods/links/55e4268b08aecb1a7cc9ebde/Experiments-on-Hypergraph-Models-for-Parallelizing-Preconditioned-Iterative-Methods.pdf', NULL),
(349, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=26986f861ddf29e397b0b72b3091f87296cba138', 'https://link.springer.com/chapter/10.1007/978-3-540-30218-6_23', NULL),
(350, 'https://inria.hal.science/hal-04146298/file/bottleMatchingLIPICS.pdf', 'https://inria.hal.science/hal-04146298/', NULL),
(351, 'http://charm.cs.illinois.edu/newPapers/13-24/paper.pdf', 'https://dl.acm.org/doi/abs/10.1145/2503210.2503266', NULL),
(352, 'http://people.cs.pitt.edu/~babay/courses/cs3551/papers/zheng11_hierarchical.pdf', 'https://journals.sagepub.com/doi/abs/10.1177/1094342010394383', NULL),
(353, 'http://charm.cs.uiuc.edu/newPapers/10-08/paper.pdf', 'https://ieeexplore.ieee.org/abstract/document/5599103/', NULL),
(354, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=7fec5deb002b7df270034d87056158bad31ce30f', 'https://ieeexplore.ieee.org/abstract/document/5493401/', NULL),
(355, 'http://charm.cs.illinois.edu/newPapers/12-37/paper.pdf', 'https://ieeexplore.ieee.org/abstract/document/6374769/', NULL),
(356, 'https://www.academia.edu/download/58211213/4-3-HideChkp-Cluster-2012.pdf', 'https://ieeexplore.ieee.org/abstract/document/6337799/', NULL),
(357, 'https://repositoriotec.tec.ac.cr/bitstream/handle/2238/7150/Using%20Migratable%20Objects%20to%20Enhance%20Fault%20Tolerance%20Schemes%20in%20Supercomputers.pdf?sequence=1&isAllowed=y', 'https://ieeexplore.ieee.org/abstract/document/6862914/', NULL),
(358, 'http://charm.cs.illinois.edu/newPapers/13-25/paper.pdf', 'https://dl.acm.org/doi/abs/10.1145/2503210.2503228', NULL),
(359, 'https://www.sciencedirect.com/science/article/am/pii/S0167819114000350', 'https://www.sciencedirect.com/science/article/pii/S0167819114000350', NULL),
(360, 'https://repositoriotec.tec.ac.cr/bitstream/handle/2238/6706/power-reliability-performance-one-system-to-rule-them-all.pdf?sequence=1', 'https://ieeexplore.ieee.org/abstract/document/7598172/', NULL),
(361, 'https://inria.hal.science/hal-00851148/document', 'https://ieeexplore.ieee.org/abstract/document/6702666/', NULL),
(362, 'https://www.researchgate.net/profile/Greg-Bronevetsky/publication/220950678_Evaluation_of_Simple_Causal_Message_Logging_for_Large-Scale_Fault_Tolerant_HPC_Systems/links/0912f507d74afb862e000000/Evaluation-of-Simple-Causal-Message-Logging-for-Large-Scale-Fault-Tolerant-HPC-Systems.pdf', 'https://ieeexplore.ieee.org/abstract/document/6009012/', NULL),
(363, 'https://arxiv.org/pdf/2012.00825', 'https://arxiv.org/abs/2012.00825', NULL),
(364, 'http://charm.cs.illinois.edu/newPapers/14-31/presentation-cluster.pdf', 'https://ieeexplore.ieee.org/abstract/document/6968739/', NULL),
(365, 'https://www.academia.edu/download/77648384/paper.pdf', 'https://ieeexplore.ieee.org/abstract/document/6264673/', NULL),
(366, 'https://cug.org/proceedings/cug2015_proceedings/includes/files/pap169-file1.pdf', 'https://cug.org/proceedings/cug2015_proceedings/includes/files/pap169-file1.pdf', NULL),
(367, 'https://www.academia.edu/download/103421024/paper.pdf', 'https://ieeexplore.ieee.org/abstract/document/6061146/', NULL),
(368, 'https://www.osti.gov/servlets/purl/1960715', 'https://ieeexplore.ieee.org/abstract/document/8924181/', NULL),
(369, 'https://www.cambridge.org/core/services/aop-cambridge-core/content/view/E529BF7967E18BA0687EC4E1001096D2/S0950268821001059a.pdf/simulationbased_evaluation_of_school_reopening_strategies_during_covid19_a_case_study_of_sao_paulo_brazil.pdf', 'https://www.cambridge.org/core/services/aop-cambridge-core/content/view/S0950268821001059', NULL),
(370, 'https://www.ideals.illinois.edu/items/45429/bitstreams/134580/object?dl=1', 'https://search.proquest.com/openview/c5b42a3aa562632c37e9f54948f6f754/1?pq-origsite=gscholar&cbl=18750', NULL),
(371, '', 'https://ieeexplore.ieee.org/abstract/document/4022107/', NULL),
(372, 'https://www.academia.edu/download/40549915/Using_symbolic_objects_to_cluster_web_do20151201-30718-1hvhkdy.pdf', 'https://dl.acm.org/doi/abs/10.1145/1135777.1135968', NULL),
(373, '', 'https://scholar.google.com/scholar?cluster=15767145142473009903&hl=en&oi=scholarr', NULL),
(374, 'https://www.clei.org/cleiej/index.php/cleiej/article/download/318/113', 'https://www.clei.org/cleiej/index.php/cleiej/article/download/318/113', NULL);
INSERT INTO `2025_attachments` (`id`, `pdf_link`, `article_link`, `video_link`) VALUES
(375, '', 'https://scholar.google.com/scholar?cluster=6153850984493871207&hl=en&oi=scholarr', NULL),
(376, 'https://www.researchgate.net/profile/Ivan-Vargas-Blanco/publication/339220298_BS-SOLCTRA_Towards_a_Parallel_Magnetic_Plasma_Confinement_Simulation_Framework_for_Modular_Stellarator_Devices/links/5e73e72b92851c35875987fc/BS-SOLCTRA-Towards-a-Parallel-Magnetic-Plasma-Confinement-Simulation-Framework-for-Modular-Stellarator-Devices.pdf', 'https://link.springer.com/chapter/10.1007/978-3-030-41005-6_3', NULL),
(377, 'https://core.ac.uk/download/pdf/83115899.pdf', 'https://link.springer.com/article/10.1007/s11227-015-1402-3', NULL),
(378, 'https://www.researchgate.net/profile/Renzo-Massobrio/publication/338106369_Parallel_Computing_for_Processing_Data_from_Intelligent_Transportation_Systems/links/5e3aa97392851c7f7f1d4c44/Parallel-Computing-for-Processing-Data-from-Intelligent-Transportation-Systems.pdf', 'https://link.springer.com/chapter/10.1007/978-3-030-38043-4_22', NULL),
(379, 'http://repositorio.conare.ac.cr:8080/bitstream/handle/20.500.12337/4003/Comparative%20Analysis%20of%20de%20Bruijn%20Graph%20Parallel%20Genome%20Assemblers_GAMBOA-VENEGAS_MEN%C3%89SES.pdf?sequence=1&isAllowed=y', 'https://ieeexplore.ieee.org/abstract/document/8464194/', NULL),
(380, '', 'https://scholar.google.com/scholar?cluster=2446168976325957952&hl=en&oi=scholarr', NULL),
(381, 'https://www.researchgate.net/profile/Esteban-Meneses-3/publication/266506766_Design_and_Analysis_of_a_Message_Logging_Protocol_for_Fault_Tolerant_Multicore_Systems/links/5570932008aeec5e6fd26d18/Design-and-Analysis-of-a-Message-Logging-Protocol-for-Fault-Tolerant-Multicore-Systems.pdf', 'https://www.researchgate.net/profile/Esteban-Meneses-3/publication/266506766_Design_and_Analysis_of_a_Message_Logging_Protocol_for_Fault_Tolerant_Multicore_Systems/links/5570932008aeec5e6fd26d18/Design-and-Analysis-of-a-Message-Logging-Protocol-for-Fault-Tolerant-Multicore-Systems.pdf', NULL),
(382, 'https://wiki.ncsa.illinois.edu/download/attachments/17630761/INRIA-UIUC-WS4-emenese.pdf', 'https://wiki.ncsa.illinois.edu/download/attachments/17630761/INRIA-UIUC-WS4-emenese.pdf', NULL),
(383, 'https://upcommons.upc.edu/bitstream/handle/2117/364744/Understanding_Soft_Error_Sensitivity_and_Robustness_of_Deep_Learning_Models_through_Checkpoint_Alteration.pdf?sequence=1', 'https://ieeexplore.ieee.org/abstract/document/9556041/', NULL),
(384, '', 'https://scholar.google.com/scholar?cluster=6851637415231741099&hl=en&oi=scholarr', NULL),
(385, 'https://www.sciencedirect.com/science/article/pii/S0377027322001822', 'https://www.sciencedirect.com/science/article/pii/S0377027322001822', NULL),
(386, 'https://repositorio.conare.ac.cr/bitstream/handle/20.500.12337/4005/Parallelization%20of%20a%20Denoising%20Algorithm%20for%20Tonal%20Bioacoustic%20Signals%20using%20OpenACC%20Directives_CASTRO_MENESES.pdf?sequence=1&isAllowed=y', 'https://ieeexplore.ieee.org/abstract/document/8464129/', NULL),
(387, 'https://www.researchsquare.com/article/rs-707890/latest.pdf', 'https://link.springer.com/article/10.1007/s10722-021-01291-5', NULL),
(388, '', 'https://ieeexplore.ieee.org/abstract/document/8596363/', NULL),
(389, '', 'https://scholar.google.com/scholar?cluster=10175597585593609929&hl=en&oi=scholarr', NULL),
(390, '', 'https://link.springer.com/chapter/10.1007/978-3-031-04209-6_13', NULL),
(391, '', 'https://www.cambridge.org/core/journals/journal-of-plasma-physics/article/progress-on-the-small-modular-stellarator-scr1-new-diagnostics-and-heating-scenarios/D2CE0C215461D12AAC4A04A3661B9818', NULL),
(392, 'https://www.researchgate.net/profile/Toshimitsu-Masuzawa/publication/221039253_A_Self-stabilizing_Link-Coloring_Protocol_Resilient_to_Byzantine_Faults_in_Tree_Networks/links/02e7e51ccd6b7505e3000000/A-Self-stabilizing-Link-Coloring-Protocol-Resilient-to-Byzantine-Faults-in-Tree-Networks.pdf#page=251', 'https://link.springer.com/chapter/10.1007/11516798_25', NULL),
(393, 'https://www.academia.edu/download/77648510/Possible_and_Impossible_Vector_Clock_Set20211229-20924-197krh.pdf', 'https://www.academia.edu/download/77648510/Possible_and_Impossible_Vector_Clock_Set20211229-20924-197krh.pdf', NULL),
(394, '', 'https://scholar.google.com/scholar?cluster=3119248063822666388&hl=en&oi=scholarr', NULL),
(395, 'https://arxiv.org/pdf/2109.02723', 'https://ieeexplore.ieee.org/abstract/document/9612832/', NULL),
(396, '', 'https://ieeexplore.ieee.org/abstract/document/9069048/', NULL),
(397, 'https://dialnet.unirioja.es/descarga/articulo/7523595.pdf', 'https://dialnet.unirioja.es/servlet/articulo?codigo=7523595', NULL),
(398, 'https://www.researchgate.net/profile/Steffan-Gomez-Campos/publication/339227628_Modelling_Road_Saturation_Dynamics_on_a_Complex_Transportation_Network_Based_on_GPS_Navigation_Software_Data/links/5e53fe21299bf1bdb837a6b6/Modelling-Road-Saturation-Dynamics-on-a-Complex-Transportation-Network-Based-on-GPS-Navigation-Software-Data.pdf', 'https://link.springer.com/chapter/10.1007/978-3-030-41005-6_10', NULL),
(399, '', 'https://link.springer.com/chapter/10.1007/978-3-030-16205-4_18', NULL),
(400, 'https://nucleus-new.iaea.org/sites/fusionportal/Shared%20Documents/FEC%202018/fec2018-preprints/preprint0737.pdf', 'https://nucleus-new.iaea.org/sites/fusionportal/Shared%20Documents/FEC%202018/fec2018-preprints/preprint0737.pdf', NULL),
(401, 'https://neurocomputinglab.com/wp-content/uploads/2020/06/From-Knights-Corner-to-Landing.pdf', 'https://link.springer.com/chapter/10.1007/978-3-319-67630-2_27', NULL),
(402, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=dbe663e7a7372075a5dd872bd6d67d44680440dc', 'https://ieeexplore.ieee.org/abstract/document/7379847/', NULL),
(403, 'https://pdfs.semanticscholar.org/6338/62fc32b3d74c9915e5826cee750e94dfc520.pdf', 'https://pdfs.semanticscholar.org/6338/62fc32b3d74c9915e5826cee750e94dfc520.pdf', NULL),
(404, '', 'https://scholar.google.com/scholar?cluster=10880281416434346495&hl=en&oi=scholarr', NULL),
(405, 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=9a677145d374b077c12b7bc249a905de4ffa978f', 'https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=9a677145d374b077c12b7bc249a905de4ffa978f', NULL),
(406, 'https://arxiv.org/pdf/2401.08124', 'https://arxiv.org/abs/2401.08124', NULL),
(407, '', 'https://ieeexplore.ieee.org/abstract/document/9980980/', NULL),
(408, '', 'https://link.springer.com/chapter/10.1007/978-3-031-23821-5_3', NULL),
(409, '', 'https://link.springer.com/chapter/10.1007/978-3-031-23821-5_1', NULL),
(410, '', 'https://link.springer.com/chapter/10.1007/978-3-031-04447-2_2', NULL),
(411, '', 'https://link.springer.com/chapter/10.1007/978-3-031-04209-6_5', NULL),
(412, '', 'https://www.sciencedirect.com/science/article/pii/S0743731521000782', NULL),
(413, 'https://www.researchgate.net/profile/Ivan-Vargas-Blanco/publication/353323831_Adaptive_Plasma_Physics_Simulations_Dealing_with_Load_Imbalance_using_Charm/links/6126a92a3be6c17839c47c9c/Adaptive-Plasma-Physics-Simulations-Dealing-with-Load-Imbalance-using-Charm.pdf', 'https://dl.acm.org/doi/abs/10.1145/3437359.3465566', NULL),
(414, 'https://www.researchgate.net/profile/Ivan-Vargas-Blanco/publication/353323590_Towards_Photorealistic_Visualizations_for_Plasma_Confinement_Simulations/links/6126a98716a18371926d8f3f/Towards-Photorealistic-Visualizations-for-Plasma-Confinement-Simulations.pdf', 'https://dl.acm.org/doi/abs/10.1145/3437359.3465608', NULL),
(415, 'https://arxiv.org/pdf/2010.08426', 'https://arxiv.org/abs/2010.08426', NULL),
(416, 'https://repositorio.una.ac.cr/bitstream/handle/11056/26728/Towards%20a%20model%20to%20estimate%20the%20reliability.pdf?sequence=4', 'https://link.springer.com/chapter/10.1007/978-3-030-57675-2_3', NULL),
(417, 'http://repositorio.conare.ac.cr:8080/bitstream/handle/20.500.12337/7675/Parallelization_of_a_Magnetohydrodynamics.pdf?sequence=3&isAllowed=y', 'https://ieeexplore.ieee.org/abstract/document/8596448/', NULL),
(418, 'http://repositorio.conare.ac.cr:8080/bitstream/handle/20.500.12337/4002/Algorithm%20for%20History%20Reconstruction%20of%20Viral%20Recombination%20Events_G%C3%93MEZ_GONZ%C3%81LEZ_MENESES.pdf?sequence=1&isAllowed=y', 'https://ieeexplore.ieee.org/abstract/document/8464134/', NULL),
(419, 'https://ieeexplore.ieee.org/iel7/5992/8357983/08357991.pdf', 'https://ieeexplore.ieee.org/abstract/document/8357991/', NULL),
(420, 'https://www.scitepress.org/PublishedPapers/2005/12318/12318.pdf', 'https://www.scitepress.org/PublishedPapers/2005/12318/12318.pdf', NULL),
(421, '', 'https://www.sciencedirect.com/science/article/pii/S0743731524000431', NULL),
(422, '', 'https://scholar.google.com/scholar?cluster=4891890875222946313&hl=en&oi=scholarr', NULL),
(423, '', 'https://ieeexplore.ieee.org/abstract/document/10379326/', NULL),
(424, '', 'https://link.springer.com/chapter/10.1007/978-3-031-52186-7_1', NULL),
(425, 'https://www.osti.gov/servlets/purl/2202911', 'https://www.osti.gov/servlets/purl/2202911', NULL),
(426, '', 'https://books.google.com/books?hl=en&lr=&id=wVKjEAAAQBAJ&oi=fnd&pg=PA31&dq=info:V7gtIFSmWT4J:scholar.google.com&ots=tW5pzsaxaf&sig=Us7vewJlxulGi99aohkOm8k2RfM', NULL),
(427, 'https://www.scielo.org.mx/scielo.php?pid=S1405-55462022000401649&script=sci_arttext', 'https://www.scielo.org.mx/scielo.php?pid=S1405-55462022000401649&script=sci_arttext', NULL),
(428, 'https://juser.fz-juelich.de/record/910530/files/HPCEuropeLatAm2022.pdf', 'https://ieeexplore.ieee.org/abstract/document/9912667/', NULL),
(429, '', 'https://ieeexplore.ieee.org/abstract/document/9912717/', NULL),
(430, '', 'https://books.google.com/books?hl=en&lr=&id=LgxqEAAAQBAJ&oi=fnd&pg=PA61&dq=info:hKQl8sCJJMYJ:scholar.google.com&ots=ANTe8AecwB&sig=d8jamgL4AHPPy2H5HczIQ4jHdO0', NULL),
(431, '', 'https://books.google.com/books?hl=en&lr=&id=LgxqEAAAQBAJ&oi=fnd&pg=PR5&dq=info:5YJEHGZlhX8J:scholar.google.com&ots=ANTe8AecxE&sig=Vtjjsk8ntq_CRgIDtJb5VqIawdc', NULL),
(432, '', 'https://ieeexplore.ieee.org/abstract/document/9612827/', NULL),
(433, 'https://repositorio.una.ac.cr/bitstream/handle/11056/26727/Evaluating%20Resilience.pdf?sequence=1', 'https://repositorio.una.ac.cr/handle/11056/26727', NULL),
(434, 'https://www.academia.edu/download/95356015/3764.pdf', 'https://www.academia.edu/download/95356015/3764.pdf', NULL),
(435, 'https://www.researchgate.net/profile/Jose-A-Morinigo/publication/332095212_Benchmarking_LAMMPS_Sensitivity_to_Task_Location_Under_CPU-Based_Weak-Scaling/links/5d31600c299bf1547cc2705d/Benchmarking-LAMMPS-Sensitivity-to-Task-Location-Under-CPU-Based-Weak-Scaling.pdf', 'https://link.springer.com/content/pdf/10.1007/978-3-030-16205-4.pdf', NULL),
(436, 'https://dialnet.unirioja.es/descarga/articulo/7444339.pdf', 'https://dialnet.unirioja.es/servlet/articulo?codigo=7444339', NULL),
(437, '', 'https://inis.iaea.org/search/search.aspx?orig_q=RN:50052436', NULL),
(438, 'https://repositoriotec.tec.ac.cr/bitstream/handle/2238/11073/framework_simulaci%C3%B3n_paralelo_fenomenos_sismologicos.pdf?sequence=1', 'https://repositoriotec.tec.ac.cr/handle/2238/11073', NULL),
(439, 'https://www.researchgate.net/profile/Ivan-Vargas-Blanco/publication/332061538_Full-wave_simulation_of_mode-converted_electron_Bernstein_waves_at_very_low_magnetic_field_in_the_SCR-1_Stellarator/links/5c9d36b2299bf111694dbcd6/Full-wave-simulation-of-mode-converted-electron-Bernstein-waves-at-very-low-magnetic-field-in-the-SCR-1-Stellarator.pdf', 'https://www.researchgate.net/profile/Ivan-Vargas-Blanco/publication/332061538_Full-wave_simulation_of_mode-converted_electron_Bernstein_waves_at_very_low_magnetic_field_in_the_SCR-1_Stellarator/links/5c9d36b2299bf111694dbcd6/Full-wave-simulation-of-mode-converted-electron-Bernstein-waves-at-very-low-magnetic-field-in-the-SCR-1-Stellarator.pdf', NULL),
(440, 'https://www.academia.edu/download/77648388/Exploring_20Application-Level_20Message-Logging_20in_20Scalable_20HPC_20Programs_MENESES.pdf', 'https://link.springer.com/chapter/10.1007/978-3-319-73353-1_17', NULL),
(441, 'https://revistas.tec.ac.cr/index.php/memorias/article/download/4523/4094', 'https://revistas.tec.ac.cr/index.php/memorias/article/view/4523', NULL),
(442, 'https://repositoriotec.tec.ac.cr/bitstream/handle/2238/9974/dise%C3%B1o_infraestructura_computacion_alto_rendimiento.pdf?sequence=1&isAllowed=y', 'https://repositoriotec.tec.ac.cr/handle/2238/9974', NULL),
(443, 'https://repositoriotec.tec.ac.cr/bitstream/handle/2238/9977/algoritmos_alternos_bajo_coste_comparaci%C3%B3n_rutas.pdf?sequence=1&isAllowed=y', 'https://repositoriotec.tec.ac.cr/handle/2238/9977', NULL),
(444, 'https://revistas.tec.ac.cr/index.php/memorias/article/download/4518/4090', 'https://revistas.tec.ac.cr/index.php/memorias/article/view/4518', NULL),
(445, 'https://www.academia.edu/download/77648385/Reducing_20the_20Overhead_20of_20Message.pdf', 'https://link.springer.com/chapter/10.1007/978-3-319-57972-6_15', NULL),
(446, '', 'https://ui.adsabs.harvard.edu/abs/2014APS..DFDR31001P/abstract', NULL);

--
-- Déchargement des données de la table `2025_authors`
--

INSERT INTO `2025_authors` (`id`, `lastname`, `firstname`, `email`, `phone_number`, `job`, `description`, `update_date`) VALUES
(4, 'Legtchenko', 'Sergey', NULL, NULL, NULL, NULL, '2024-05-14'),
(5, 'Monnet', 'Sébastien', NULL, NULL, NULL, NULL, '2024-05-14'),
(6, 'Thomas', 'Gaël', NULL, NULL, NULL, NULL, '2024-05-14'),
(9, 'Antoniu', 'Gabriel', NULL, NULL, NULL, NULL, '2024-05-14'),
(10, 'Deverge', 'J‐F', NULL, NULL, NULL, NULL, '2024-05-14'),
(11, 'Véron', 'Maxime', NULL, NULL, NULL, NULL, '2024-05-14'),
(12, 'Marin', 'Olivier', NULL, NULL, NULL, NULL, '2024-05-14'),
(13, 'Sens', 'Pierre', NULL, NULL, NULL, NULL, '2024-05-14'),
(14, 'Muller', 'Gilles', NULL, NULL, NULL, NULL, '2024-05-14'),
(15, 'Morin', 'Christine', NULL, NULL, NULL, NULL, '2024-05-14'),
(16, 'Badrinath', 'Ramamurthy', NULL, NULL, NULL, NULL, '2024-05-14'),
(17, 'Bougé', 'Luc', NULL, NULL, NULL, NULL, '2024-05-14'),
(18, 'Jan', 'Mathieu', NULL, NULL, NULL, NULL, '2024-05-14'),
(19, 'Dhaouadi', 'Asma', NULL, NULL, NULL, NULL, '2024-05-14'),
(20, 'Bousselmi', 'Khadija', NULL, NULL, NULL, NULL, '2024-05-14'),
(21, 'Mohsen Gammoudi', 'Mohamed', NULL, NULL, NULL, NULL, '2024-05-14'),
(22, 'Hammoudi', 'Slimane', NULL, NULL, NULL, NULL, '2024-05-14'),
(23, 'Silvestre', 'Guthemberg', NULL, NULL, NULL, NULL, '2024-05-14'),
(24, 'Krishnaswamy', 'Ruby', NULL, NULL, NULL, NULL, '2024-05-14'),
(25, 'Deverge', 'Jean-François', NULL, NULL, NULL, NULL, '2024-05-14'),
(26, 'Bertier', 'Marin', NULL, NULL, NULL, NULL, '2024-05-14'),
(27, 'Caron', 'Eddy', NULL, NULL, NULL, NULL, '2024-05-14'),
(28, 'Desprez', 'Frédéric', NULL, NULL, NULL, NULL, '2024-05-14'),
(29, 'Iskounen', 'Syphax', NULL, NULL, NULL, NULL, '2024-05-14'),
(30, 'Mai Trang Nguyen', 'Thi', NULL, NULL, NULL, NULL, '2024-05-14'),
(31, 'Hamidouche', 'Lyes', NULL, NULL, NULL, NULL, '2024-05-14'),
(32, 'Simon', 'Véronique', NULL, NULL, NULL, NULL, '2024-05-14'),
(33, 'Feuillet', 'Matthieu', NULL, NULL, NULL, NULL, '2024-05-14'),
(34, 'Robert', 'Philippe', NULL, NULL, NULL, NULL, '2024-05-14'),
(35, 'Lorrillere', 'Maxime', NULL, NULL, NULL, NULL, '2024-05-14'),
(36, 'Sopena', 'Julien', NULL, NULL, NULL, NULL, '2024-05-14'),
(37, 'Guessoum', 'Zahia', NULL, NULL, NULL, NULL, '2024-05-14'),
(38, 'Buffoni', 'David', NULL, NULL, NULL, NULL, '2024-05-14'),
(39, 'Cincilla', 'Pierpaolo', NULL, NULL, NULL, NULL, '2024-05-14'),
(40, 'Shapiro', 'Marc', NULL, NULL, NULL, NULL, '2024-05-14'),
(41, 'Sun', 'Wen', NULL, NULL, NULL, NULL, '2024-05-14'),
(42, 'Morales', 'Ramsés', NULL, NULL, NULL, NULL, '2024-05-14'),
(43, 'Gupta', 'Indranil', NULL, NULL, NULL, NULL, '2024-05-14'),
(44, 'Mathieu', 'Fabien', NULL, NULL, NULL, NULL, '2024-05-14'),
(45, 'Feuillet', 'Mathieu', NULL, NULL, NULL, NULL, '2024-05-14'),
(46, 'Cudennec', 'Loïc', NULL, NULL, NULL, NULL, '2024-05-14'),
(47, 'Pires', 'Karine', NULL, NULL, NULL, NULL, '2024-05-14'),
(48, 'Turchini', 'Guillaume', NULL, NULL, NULL, NULL, '2024-05-14'),
(49, 'Maia', 'Felipe', NULL, NULL, NULL, NULL, '2024-05-14'),
(50, 'Araújo', 'Rafael', NULL, NULL, NULL, NULL, '2024-05-14'),
(51, 'Carlos Muniz', 'Luiz', NULL, NULL, NULL, NULL, '2024-05-14'),
(52, 'Zirtany', 'Rayrone', NULL, NULL, NULL, NULL, '2024-05-14'),
(53, 'Coutinho', 'Luciano', NULL, NULL, NULL, NULL, '2024-05-14'),
(54, 'Vale', 'Samyr', NULL, NULL, NULL, NULL, '2024-05-14'),
(55, 'José Silva', 'Francisco', NULL, NULL, NULL, NULL, '2024-05-14'),
(56, 'Chabbouh', 'Ikram', NULL, NULL, NULL, NULL, '2024-05-14'),
(57, 'Arantes', 'Luciana', NULL, NULL, NULL, NULL, '2024-05-14'),
(58, 'Mauffret', 'Etienne', NULL, NULL, NULL, NULL, '2024-05-14'),
(59, 'Vernier', 'Flavien', NULL, NULL, NULL, NULL, '2024-05-14'),
(60, 'Refauvelet', 'Dimitri', NULL, NULL, NULL, NULL, '2024-05-14'),
(61, 'Carver', 'Damien', NULL, NULL, NULL, NULL, '2024-05-14'),
(62, 'Bardolle', 'Frédéric', NULL, NULL, NULL, NULL, '2024-05-14'),
(63, 'Dahhani', 'Abdelhafid', NULL, NULL, NULL, NULL, '2024-05-14'),
(64, 'Alloui', 'Ilham', NULL, NULL, NULL, NULL, '2024-05-14'),
(65, 'Laura Garcia', 'S', NULL, NULL, NULL, NULL, '2024-05-14'),
(66, 'Lejamble', 'Sylvain', NULL, NULL, NULL, NULL, '2024-05-14'),
(67, 'Guglielmino', 'Mathieu', NULL, NULL, NULL, NULL, '2024-05-14'),
(68, 'Bronzino', 'Francesco', NULL, NULL, NULL, NULL, '2024-05-14'),
(69, 'Poudroux', 'Joel', NULL, NULL, NULL, NULL, '2024-05-14'),
(70, 'Talia', 'Domenico', NULL, NULL, NULL, NULL, '2024-05-14'),
(71, 'Yahyapour', 'Ramin', NULL, NULL, NULL, NULL, '2024-05-14'),
(72, 'Ziegler', 'Wolfgang', NULL, NULL, NULL, NULL, '2024-05-14'),
(73, 'Congiusta', 'Antonio', NULL, NULL, NULL, NULL, '2024-05-14'),
(74, 'Trunfio', 'Paolo', NULL, NULL, NULL, NULL, '2024-05-14'),
(75, 'Jan', 'Matthieu', NULL, NULL, NULL, NULL, '2024-05-14'),
(76, 'Paccoud', 'William', NULL, NULL, NULL, NULL, '2024-05-14'),
(77, 'Sallaberry', 'Arnaud', NULL, NULL, NULL, NULL, '2024-05-14'),
(78, 'Li', 'Kuan-Ching', NULL, NULL, NULL, NULL, '2024-05-14'),
(79, 'Asia', 'Pacific', NULL, NULL, NULL, NULL, '2024-05-14'),
(80, 'Cérin', 'Christohe', NULL, NULL, NULL, NULL, '2024-05-14'),
(81, 'Méhaut', 'Jean-François', NULL, NULL, NULL, NULL, '2024-05-14'),
(82, 'Marangozova-Martin', 'Vania', NULL, NULL, NULL, NULL, '2024-05-14'),
(83, 'Pinna', 'Andrea', NULL, NULL, NULL, NULL, '2024-05-14'),
(84, 'Amorim', 'Claudio', NULL, NULL, NULL, NULL, '2024-05-14'),
(85, 'Araújo', 'Guido', NULL, NULL, NULL, NULL, '2024-05-14'),
(86, 'Buyya', 'Rajkumar', NULL, NULL, NULL, NULL, '2024-05-14'),
(87, 'Gaudiot', 'Jean-Luc', NULL, NULL, NULL, NULL, '2024-05-14'),
(88, 'Eusébio de Lima', 'Manoel', NULL, NULL, NULL, NULL, '2024-05-14'),
(89, 'Meira Jr', 'Wagner', NULL, NULL, NULL, NULL, '2024-05-14'),
(90, 'Eduardo Moreira', 'José', NULL, NULL, NULL, NULL, '2024-05-14'),
(91, 'Olivier Alexandre Navaux', 'Philippe', NULL, NULL, NULL, NULL, '2024-05-14'),
(92, 'Panetta', 'Jairo', NULL, NULL, NULL, NULL, '2024-05-14'),
(93, 'Prasanna', 'Viktor', NULL, NULL, NULL, NULL, '2024-05-14'),
(94, 'Rebello', 'Vinod', NULL, NULL, NULL, NULL, '2024-05-14'),
(95, 'Matsumoto Sato', 'Liria', NULL, NULL, NULL, NULL, '2024-05-14'),
(96, 'Schulze', 'Bruno', NULL, NULL, NULL, NULL, '2024-05-14'),
(97, 'Wun Song', 'Siang', NULL, NULL, NULL, NULL, '2024-05-14'),
(98, 'F De Souza', 'Alberto', NULL, NULL, NULL, NULL, '2024-05-14'),
(99, 'Bessad', 'Louisa', NULL, NULL, NULL, NULL, '2024-05-14'),
(100, 'Quinson', 'Martin', NULL, NULL, NULL, NULL, '2024-05-14'),
(101, 'Salamatian', 'Kave', NULL, NULL, NULL, NULL, '2024-05-14'),
(102, 'Gabriel', 'Antoniu', NULL, NULL, NULL, NULL, '2024-05-14'),
(103, 'Mathieu', 'Jan', NULL, NULL, NULL, NULL, '2024-05-14'),
(104, 'Monnet', 'SÃ', NULL, NULL, NULL, NULL, '2024-05-14'),
(105, 'Daniel Katz', 'France', NULL, NULL, NULL, NULL, '2024-05-14'),
(106, 'Fox', 'Armando', NULL, NULL, NULL, NULL, '2024-05-14'),
(107, 'Kalbarczyk', 'Zbigniew', NULL, NULL, NULL, NULL, '2024-05-14'),
(108, 'Nanya', 'Takashi', NULL, NULL, NULL, NULL, '2024-05-14'),
(109, 'Neves', 'Nuno', NULL, NULL, NULL, NULL, '2024-05-14'),
(110, 'Scott', 'Stephen', NULL, NULL, NULL, NULL, '2024-05-14'),
(111, 'Snir', 'Marc', NULL, NULL, NULL, NULL, '2024-05-14'),
(112, 'Trivedi', 'Kishor', NULL, NULL, NULL, NULL, '2024-05-14'),
(113, 'Rafetseder', 'Albert', NULL, NULL, NULL, NULL, '2024-05-14'),
(114, 'Ahmed', 'Amokrane', NULL, NULL, NULL, NULL, '2024-05-14'),
(115, 'Duda', 'Andrzej', NULL, NULL, NULL, NULL, '2024-05-14'),
(116, 'Cianfrani', 'Antonio', NULL, NULL, NULL, NULL, '2024-05-14'),
(117, 'Pescapé', 'Antonio', NULL, NULL, NULL, NULL, '2024-05-14'),
(118, 'Prem Bianzino', 'Aruna', NULL, NULL, NULL, NULL, '2024-05-14'),
(119, 'Augustin', 'Brice', NULL, NULL, NULL, NULL, '2024-05-14'),
(120, 'Sansò', 'Brunilde', NULL, NULL, NULL, NULL, '2024-05-14'),
(121, 'Kaufman', 'Charlie', NULL, NULL, NULL, NULL, '2024-05-14'),
(122, 'Omar', 'Cherkaoui', NULL, NULL, NULL, NULL, '2024-05-14'),
(123, 'Kiennert', 'Christophe', NULL, NULL, NULL, NULL, '2024-05-14'),
(124, 'Chung', 'Chun-Jen', NULL, NULL, NULL, NULL, '2024-05-14'),
(125, 'Qiao', 'Chunming', NULL, NULL, NULL, NULL, '2024-05-14'),
(126, 'Marquezan', 'Clarissa', NULL, NULL, NULL, NULL, '2024-05-14'),
(127, 'Testa', 'Claudio', NULL, NULL, NULL, NULL, '2024-05-14'),
(128, 'Magnien', 'Clémence', NULL, NULL, NULL, NULL, '2024-05-14'),
(129, 'Belabed', 'Dallal', NULL, NULL, NULL, NULL, '2024-05-14'),
(130, 'Saucez', 'Damien', NULL, NULL, NULL, NULL, '2024-05-14'),
(131, 'Stezenbach', 'David', NULL, NULL, NULL, NULL, '2024-05-14'),
(132, 'Medhi', 'Deep', NULL, NULL, NULL, NULL, '2024-05-14'),
(133, 'Kutscher', 'Dirk', NULL, NULL, NULL, NULL, '2024-05-14'),
(134, 'Zeghlache', 'Djamal', NULL, NULL, NULL, NULL, '2024-05-14'),
(135, 'Dotaro', 'Emmanuel', NULL, NULL, NULL, NULL, '2024-05-14'),
(136, 'Larumbe', 'Federico', NULL, NULL, NULL, NULL, '2024-05-14'),
(137, 'Metzger', 'Florian', NULL, NULL, NULL, NULL, '2024-05-14'),
(138, 'Schreiner', 'Florian', NULL, NULL, NULL, NULL, '2024-05-14'),
(139, 'Guenane', 'Fouad', NULL, NULL, NULL, NULL, '2024-05-14'),
(140, 'Urvoy-Keller', 'Guillaume', NULL, NULL, NULL, NULL, '2024-05-14'),
(141, 'Pujolle', 'Guy', NULL, NULL, NULL, NULL, '2024-05-14'),
(142, 'Skianis', 'Harry', NULL, NULL, NULL, NULL, '2024-05-14'),
(143, 'Zhang', 'Honggang', NULL, NULL, NULL, NULL, '2024-05-14'),
(144, 'Wu', 'Huijun', NULL, NULL, NULL, NULL, '2024-05-14'),
(145, 'Maria Alcaraz Calero', 'Jose', NULL, NULL, NULL, NULL, '2024-05-14'),
(146, 'Xiong', 'Kaiqi', NULL, NULL, NULL, NULL, '2024-05-14'),
(147, 'Ravindran', 'Kaliappa', NULL, NULL, NULL, NULL, '2024-05-14'),
(148, 'Haddadou', 'Kamel', NULL, NULL, NULL, NULL, '2024-05-14'),
(149, 'Kumar', 'Karthik', NULL, NULL, NULL, NULL, '2024-05-14'),
(150, 'Ogaki', 'Kenichi', NULL, NULL, NULL, NULL, '2024-05-14'),
(151, 'Zhu', 'Konglin', NULL, NULL, NULL, NULL, '2024-05-14'),
(152, 'Ren', 'Kui', NULL, NULL, NULL, NULL, '2024-05-14'),
(153, 'Liu', 'Kunpeng', NULL, NULL, NULL, NULL, '2024-05-14'),
(154, 'Tutschku', 'Kurt', NULL, NULL, NULL, NULL, '2024-05-14'),
(155, 'Jiao', 'Lei', NULL, NULL, NULL, NULL, '2024-05-14'),
(156, 'Iannone', 'Luigi', NULL, NULL, NULL, NULL, '2024-05-14'),
(157, 'Henrique Costa', 'Luís', NULL, NULL, NULL, NULL, '2024-05-14'),
(158, 'Miguel Contreras', 'Luis', NULL, NULL, NULL, NULL, '2024-05-14'),
(159, 'Bourguiba', 'Manel', NULL, NULL, NULL, NULL, '2024-05-14'),
(160, 'Brunner', 'Marcus', NULL, NULL, NULL, NULL, '2024-05-14'),
(161, 'Tornatore', 'Massimo', NULL, NULL, NULL, NULL, '2024-05-14'),
(162, 'Coudron', 'Matthieu', NULL, NULL, NULL, NULL, '2024-05-14'),
(163, 'E Campista', 'Miguel', NULL, NULL, NULL, NULL, '2024-05-14'),
(164, 'Malouch', 'Naceur', NULL, NULL, NULL, NULL, '2024-05-14'),
(165, 'Aitsaadi', 'Nadjib', NULL, NULL, NULL, NULL, '2024-05-14'),
(166, 'Fourmaux', 'Olivier', NULL, NULL, NULL, NULL, '2024-05-14'),
(167, 'Carlos Duarte', 'Otto', NULL, NULL, NULL, NULL, '2024-05-14'),
(168, 'Gallard', 'Pascal', NULL, NULL, NULL, NULL, '2024-05-14'),
(169, 'Raad', 'Patrick', NULL, NULL, NULL, NULL, '2024-05-14'),
(170, 'Cholda', 'Piotr', NULL, NULL, NULL, NULL, '2024-05-14'),
(171, 'Boutaba', 'Raouf', NULL, NULL, NULL, NULL, '2024-05-14'),
(172, 'Raheli', 'Riccardo', NULL, NULL, NULL, NULL, '2024-05-14'),
(173, 'S Couto', 'Rodrigo', NULL, NULL, NULL, NULL, '2024-05-14'),
(174, 'Hoteit', 'Sahar', NULL, NULL, NULL, NULL, '2024-05-14'),
(175, 'Giordano', 'Stefano', NULL, NULL, NULL, NULL, '2024-05-14'),
(176, 'Secci', 'Stefano', NULL, NULL, NULL, NULL, '2024-05-14'),
(177, 'Gebert', 'Steffen', NULL, NULL, NULL, NULL, '2024-05-14'),
(178, 'Coupaye', 'Thierry', NULL, NULL, NULL, NULL, '2024-05-14'),
(179, 'Magedanz', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-14'),
(180, 'Zinner', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-14'),
(181, 'Van Vu', 'Thuong', NULL, NULL, NULL, NULL, '2024-05-14'),
(182, 'Xing', 'Tianyi', NULL, NULL, NULL, NULL, '2024-05-14'),
(183, 'Hoßfeld', 'Tobias', NULL, NULL, NULL, NULL, '2024-05-14'),
(184, 'López', 'Victor', NULL, NULL, NULL, NULL, '2024-05-14'),
(185, 'Guyot', 'Vincent', NULL, NULL, NULL, NULL, '2024-05-14'),
(186, 'Kellerer', 'Wolfgang', NULL, NULL, NULL, NULL, '2024-05-14'),
(187, 'Masip-Bruin', 'Xavier', NULL, NULL, NULL, NULL, '2024-05-14'),
(188, 'Fu', 'Xiaoming', NULL, NULL, NULL, NULL, '2024-05-14'),
(189, 'Ghamri-Doudane', 'Yacine', NULL, NULL, NULL, NULL, '2024-05-14'),
(190, 'Zhang', 'Yuan', NULL, NULL, NULL, NULL, '2024-05-14'),
(191, 'Hu', 'Yuchong', NULL, NULL, NULL, NULL, '2024-05-14'),
(192, 'Guermouche', 'Amina', NULL, NULL, NULL, NULL, '2024-05-15'),
(193, 'Ropars', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-15'),
(194, 'Brunet', 'Elisabeth', NULL, NULL, NULL, NULL, '2024-05-15'),
(195, 'Cappello', 'Franck', NULL, NULL, NULL, NULL, '2024-05-15'),
(196, 'Bosilca', 'George', NULL, NULL, NULL, NULL, '2024-05-15'),
(197, 'Bouteiller', 'Aurélien', NULL, NULL, NULL, NULL, '2024-05-15'),
(198, 'Dongarra', 'Jack', NULL, NULL, NULL, NULL, '2024-05-15'),
(199, 'Herault', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-15'),
(200, 'Robert', 'Yves', NULL, NULL, NULL, NULL, '2024-05-15'),
(201, 'Vivien', 'Frédéric', NULL, NULL, NULL, NULL, '2024-05-15'),
(202, 'Zaidouni', 'Dounia', NULL, NULL, NULL, NULL, '2024-05-15'),
(203, 'Uçar', 'Bora', NULL, NULL, NULL, NULL, '2024-05-15'),
(204, 'Meneses', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-15'),
(205, 'V Kalé', 'Laxmikant', NULL, NULL, NULL, NULL, '2024-05-15'),
(206, 'V Martsinkevich', 'Tatiana', NULL, NULL, NULL, NULL, '2024-05-15'),
(207, 'Schiper', 'André', NULL, NULL, NULL, NULL, '2024-05-15'),
(208, 'Halimi', 'J-P', NULL, NULL, NULL, NULL, '2024-05-15'),
(209, 'Pradelle', 'Benoıt', NULL, NULL, NULL, NULL, '2024-05-15'),
(210, 'Triquenaux', 'Nicolas', NULL, NULL, NULL, NULL, '2024-05-15'),
(211, 'Laurent', 'Alexandre', NULL, NULL, NULL, NULL, '2024-05-15'),
(212, 'Christophe Beyler', 'Jean', NULL, NULL, NULL, NULL, '2024-05-15'),
(213, 'Jalby', 'William', NULL, NULL, NULL, NULL, '2024-05-15'),
(214, 'Halimi', 'Jean-Philippe', NULL, NULL, NULL, NULL, '2024-05-15'),
(215, 'Saïd Mosli Bouksiaa', 'Mohamed', NULL, NULL, NULL, NULL, '2024-05-15'),
(216, 'Trahay', 'François', NULL, NULL, NULL, NULL, '2024-05-15'),
(217, 'Lescouet', 'Alexis', NULL, NULL, NULL, NULL, '2024-05-15'),
(218, 'Voron', 'Gauthier', NULL, NULL, NULL, NULL, '2024-05-15'),
(219, 'Petrović', 'Darko', NULL, NULL, NULL, NULL, '2024-05-16'),
(220, 'Denoyelle', 'Nicolas', NULL, NULL, NULL, NULL, '2024-05-16'),
(221, 'Goglin', 'Brice', NULL, NULL, NULL, NULL, '2024-05-16'),
(222, 'Jeannot', 'Emmanuel', NULL, NULL, NULL, NULL, '2024-05-16'),
(223, 'Fatourou', 'Panagiota', NULL, NULL, NULL, NULL, '2024-05-16'),
(224, 'D Kallimanis', 'Nikolaos', NULL, NULL, NULL, NULL, '2024-05-16'),
(225, 'Shahmirzadi', 'Omid', NULL, NULL, NULL, NULL, '2024-05-16'),
(226, 'Mehnert-Spahn', 'John', NULL, NULL, NULL, NULL, '2024-05-16'),
(227, 'Schoettner', 'Michael', NULL, NULL, NULL, NULL, '2024-05-16'),
(228, 'Lefray', 'Arnaud', NULL, NULL, NULL, NULL, '2024-05-16'),
(229, 'Bautista Gomez', 'Leonardo', NULL, NULL, NULL, NULL, '2024-05-16'),
(230, 'Maruyama', 'Naoya', NULL, NULL, NULL, NULL, '2024-05-16'),
(231, 'Matsuoka', 'Satoshi', NULL, NULL, NULL, NULL, '2024-05-16'),
(232, 'Khorguani', 'Ana', NULL, NULL, NULL, NULL, '2024-05-16'),
(233, 'De Palma', 'Noel', NULL, NULL, NULL, NULL, '2024-05-16'),
(234, 'Platini', 'Marc', NULL, NULL, NULL, NULL, '2024-05-16'),
(235, 'Pelletier', 'Benoit', NULL, NULL, NULL, NULL, '2024-05-16'),
(236, 'Jeanvoine', 'Emmanuel', NULL, NULL, NULL, NULL, '2024-05-16'),
(237, 'Kim', 'Dohyun', NULL, NULL, NULL, NULL, '2024-05-16'),
(238, 'Lebre', 'Adrien', NULL, NULL, NULL, NULL, '2024-05-16'),
(239, 'Pastor', 'Jonathan', NULL, NULL, NULL, NULL, '2024-05-16'),
(240, 'Rouzaud-Cornabas', 'Jonathan', NULL, NULL, NULL, NULL, '2024-05-16'),
(241, 'Tedeschi', 'Cédric', NULL, NULL, NULL, NULL, '2024-05-16'),
(242, 'Anedda', 'Paolo', NULL, NULL, NULL, NULL, '2024-05-16'),
(243, 'Zanetti', 'Gianluigi', NULL, NULL, NULL, NULL, '2024-05-16'),
(244, 'Nou', 'Ramon', NULL, NULL, NULL, NULL, '2024-05-16'),
(245, 'Cortes', 'Toni', NULL, NULL, NULL, NULL, '2024-05-16'),
(246, 'Rivière', 'Etienne', NULL, NULL, NULL, NULL, '2024-05-16'),
(247, 'Bouteiller', 'A', NULL, NULL, NULL, NULL, '2024-05-16'),
(248, 'Ropars', 'T', NULL, NULL, NULL, NULL, '2024-05-16'),
(249, 'Bosilca', 'G', NULL, NULL, NULL, NULL, '2024-05-16'),
(250, 'Morin', 'C', NULL, NULL, NULL, NULL, '2024-05-16'),
(251, 'Dongarra', 'J', NULL, NULL, NULL, NULL, '2024-05-16'),
(252, 'PARIS-IRISA', 'Projet', NULL, NULL, NULL, NULL, '2024-05-16'),
(253, 'Costache', 'Stefania', NULL, NULL, NULL, NULL, '2024-05-16'),
(254, 'Martsinkevich', 'Tatiana', NULL, NULL, NULL, NULL, '2024-05-16'),
(255, 'Pérez', 'Diego', NULL, NULL, NULL, NULL, '2024-05-16'),
(256, 'Sharma', 'Swati', NULL, NULL, NULL, NULL, '2024-05-16'),
(257, 'Diarra', 'Amadou', NULL, NULL, NULL, NULL, '2024-05-16'),
(258, 'Alvares', 'Frederico', NULL, NULL, NULL, NULL, '2024-05-16'),
(259, 'Alexandrov', 'Vassil', NULL, NULL, NULL, NULL, '2024-05-16'),
(260, 'Strigini', 'Lorenzo', NULL, NULL, NULL, NULL, '2024-05-16'),
(261, 'Leordeanu', 'Catalin', NULL, NULL, NULL, NULL, '2024-05-16'),
(262, 'Cristea', 'Valentin', NULL, NULL, NULL, NULL, '2024-05-16'),
(263, 'Jegou', 'Yvon', NULL, NULL, NULL, NULL, '2024-05-16'),
(264, 'Boichat', 'Romain', NULL, NULL, NULL, NULL, '2024-05-16'),
(265, 'Borran', 'Fatemeh', NULL, NULL, NULL, NULL, '2024-05-16'),
(266, 'Cavin', 'David', NULL, NULL, NULL, NULL, '2024-05-16'),
(267, 'Filipe de Sousa Santos', 'Nuno', NULL, NULL, NULL, NULL, '2024-05-16'),
(268, 'Eugster', 'Patrick', NULL, NULL, NULL, NULL, '2024-05-16'),
(269, 'Favez', 'Cendrine', NULL, NULL, NULL, NULL, '2024-05-16'),
(270, 'Hutle', 'Martin', NULL, NULL, NULL, NULL, '2024-05-16'),
(271, 'Kalantari', 'Babak', NULL, NULL, NULL, NULL, '2024-05-16'),
(272, 'Mena', 'Sergio', NULL, NULL, NULL, NULL, '2024-05-16'),
(273, 'Meoni', 'Marco', NULL, NULL, NULL, NULL, '2024-05-16'),
(274, 'Milosevic', 'Zarko', NULL, NULL, NULL, NULL, '2024-05-16'),
(275, 'Pedone', 'Fernando', NULL, NULL, NULL, NULL, '2024-05-16'),
(276, 'Sanchez', 'Eduardo', NULL, NULL, NULL, NULL, '2024-05-16'),
(277, 'Sasson', 'Yoav', NULL, NULL, NULL, NULL, '2024-05-16'),
(278, 'DeBardeleben', 'Nathan', NULL, NULL, NULL, NULL, '2024-05-16'),
(279, 'Clay', 'Robert', NULL, NULL, NULL, NULL, '2024-05-16'),
(280, 'Aulwes', 'Rob', NULL, NULL, NULL, NULL, '2024-05-16'),
(281, 'Bronevetsky', 'Greg', NULL, NULL, NULL, NULL, '2024-05-16'),
(282, 'Daly', 'John', NULL, NULL, NULL, NULL, '2024-05-16'),
(283, 'Engelmann', 'Christian', NULL, NULL, NULL, NULL, '2024-05-16'),
(284, 'Ferreira', 'Kurt', NULL, NULL, NULL, NULL, '2024-05-16'),
(285, 'Gainaru', 'Ana', NULL, NULL, NULL, NULL, '2024-05-16'),
(286, 'Jitsumoto', 'Hideyuki', NULL, NULL, NULL, NULL, '2024-05-16'),
(287, 'Lan', 'Zhiling', NULL, NULL, NULL, NULL, '2024-05-16'),
(288, 'Mohror', 'Kathryn', NULL, NULL, NULL, NULL, '2024-05-16'),
(289, 'Nicolae', 'Bogdan', NULL, NULL, NULL, NULL, '2024-05-16'),
(290, 'Riesen', 'Rolf', NULL, NULL, NULL, NULL, '2024-05-16'),
(291, 'Sridharan', 'Vilas', NULL, NULL, NULL, NULL, '2024-05-16'),
(292, 'Vishnu', 'Abhinav', NULL, NULL, NULL, NULL, '2024-05-16'),
(293, 'Wuyts', 'Roel', NULL, NULL, NULL, NULL, '2024-05-16'),
(294, 'Gropp', 'William', NULL, NULL, NULL, NULL, '2024-05-17'),
(295, 'Huss-Lederman', 'Steven', NULL, NULL, NULL, NULL, '2024-05-17'),
(296, 'Lumsdaine', 'Andrew', NULL, NULL, NULL, NULL, '2024-05-17'),
(297, 'Lusk', 'Ewing', NULL, NULL, NULL, NULL, '2024-05-17'),
(298, 'Nitzberg', 'Bill', NULL, NULL, NULL, NULL, '2024-05-17'),
(299, 'Saphir', 'William', NULL, NULL, NULL, NULL, '2024-05-17'),
(300, 'Snir', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(301, 'Otto', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(302, 'Huss-Lederman', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(303, 'Walker', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(304, 'Gottlieb', 'Allan', NULL, NULL, NULL, NULL, '2024-05-17'),
(305, 'Grishman', 'Ralph', NULL, NULL, NULL, NULL, '2024-05-17'),
(306, 'P. Kruskal', 'Clyde', NULL, NULL, NULL, NULL, '2024-05-17'),
(307, 'P. McAuliffe', 'Kevin', NULL, NULL, NULL, NULL, '2024-05-17'),
(308, 'Rudolph', 'Larry', NULL, NULL, NULL, NULL, '2024-05-17'),
(309, 'Beckman', 'Pete', NULL, NULL, NULL, NULL, '2024-05-17'),
(310, 'Moore', 'Terry', NULL, NULL, NULL, NULL, '2024-05-17'),
(311, 'Aerts', 'Patrick', NULL, NULL, NULL, NULL, '2024-05-17'),
(312, 'Aloisio', 'Giovanni', NULL, NULL, NULL, NULL, '2024-05-17'),
(313, 'Andre', 'Jean-Claude', NULL, NULL, NULL, NULL, '2024-05-17'),
(314, 'Barkai', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(315, 'Berthou', 'Jean-Yves', NULL, NULL, NULL, NULL, '2024-05-17'),
(316, 'Boku', 'Taisuke', NULL, NULL, NULL, NULL, '2024-05-17'),
(317, 'Braunschweig', 'Bertrand', NULL, NULL, NULL, NULL, '2024-05-17'),
(318, 'Chapman', 'Barbara', NULL, NULL, NULL, NULL, '2024-05-17'),
(319, 'Chi', 'Xuebin', NULL, NULL, NULL, NULL, '2024-05-17'),
(320, 'Choudhary', 'Alok', NULL, NULL, NULL, NULL, '2024-05-17'),
(321, 'Dosanjh', 'Sudip', NULL, NULL, NULL, NULL, '2024-05-17'),
(322, 'Dunning', 'Thom', NULL, NULL, NULL, NULL, '2024-05-17'),
(323, 'Fiore', 'Sandro', NULL, NULL, NULL, NULL, '2024-05-17'),
(324, 'Geist', 'Al', NULL, NULL, NULL, NULL, '2024-05-17'),
(325, 'Gropp', 'Bill', NULL, NULL, NULL, NULL, '2024-05-17'),
(326, 'Harrison', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(327, 'Hereld', 'Mark', NULL, NULL, NULL, NULL, '2024-05-17'),
(328, 'Heroux', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(329, 'Hoisie', 'Adolfy', NULL, NULL, NULL, NULL, '2024-05-17'),
(330, 'Hotta', 'Koh', NULL, NULL, NULL, NULL, '2024-05-17'),
(331, 'Jin', 'Zhong', NULL, NULL, NULL, NULL, '2024-05-17'),
(332, 'Ishikawa', 'Yutaka', NULL, NULL, NULL, NULL, '2024-05-17'),
(333, 'Johnson', 'Fred', NULL, NULL, NULL, NULL, '2024-05-17'),
(334, 'Kale', 'Sanjay', NULL, NULL, NULL, NULL, '2024-05-17'),
(335, 'Kenway', 'Richard', NULL, NULL, NULL, NULL, '2024-05-17'),
(336, 'Keyes', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(337, 'Kramer', 'Bill', NULL, NULL, NULL, NULL, '2024-05-17'),
(338, 'Labarta', 'Jesus', NULL, NULL, NULL, NULL, '2024-05-17'),
(339, 'Lichnewsky', 'Alain', NULL, NULL, NULL, NULL, '2024-05-17'),
(340, 'Lippert', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-17'),
(341, 'Lucas', 'Bob', NULL, NULL, NULL, NULL, '2024-05-17'),
(342, 'Maccabe', 'Barney', NULL, NULL, NULL, NULL, '2024-05-17'),
(343, 'Messina', 'Paul', NULL, NULL, NULL, NULL, '2024-05-17'),
(344, 'Michielse', 'Peter', NULL, NULL, NULL, NULL, '2024-05-17'),
(345, 'Mohr', 'Bernd', NULL, NULL, NULL, NULL, '2024-05-17'),
(346, 'S Mueller', 'Matthias', NULL, NULL, NULL, NULL, '2024-05-17'),
(347, 'E Nagel', 'Wolfgang', NULL, NULL, NULL, NULL, '2024-05-17'),
(348, 'Nakashima', 'Hiroshi', NULL, NULL, NULL, NULL, '2024-05-17'),
(349, 'E Papka', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(350, 'Reed', 'Dan', NULL, NULL, NULL, NULL, '2024-05-17'),
(351, 'Sato', 'Mitsuhisa', NULL, NULL, NULL, NULL, '2024-05-17'),
(352, 'Seidel', 'Ed', NULL, NULL, NULL, NULL, '2024-05-17'),
(353, 'Shalf', 'John', NULL, NULL, NULL, NULL, '2024-05-17'),
(354, 'Skinner', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(355, 'Sterling', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-17'),
(356, 'Stevens', 'Rick', NULL, NULL, NULL, NULL, '2024-05-17'),
(357, 'Streitz', 'Fred', NULL, NULL, NULL, NULL, '2024-05-17'),
(358, 'Sugar', 'Bob', NULL, NULL, NULL, NULL, '2024-05-17'),
(359, 'Sumimoto', 'Shinji', NULL, NULL, NULL, NULL, '2024-05-17'),
(360, 'Tang', 'William', NULL, NULL, NULL, NULL, '2024-05-17'),
(361, 'Taylor', 'John', NULL, NULL, NULL, NULL, '2024-05-17'),
(362, 'Thakur', 'Rajeev', NULL, NULL, NULL, NULL, '2024-05-17'),
(363, 'Trefethen', 'Anne', NULL, NULL, NULL, NULL, '2024-05-17'),
(364, 'Valero', 'Mateo', NULL, NULL, NULL, NULL, '2024-05-17'),
(365, 'Van Der Steen', 'Aad', NULL, NULL, NULL, NULL, '2024-05-17'),
(366, 'Vetter', 'Jeffrey', NULL, NULL, NULL, NULL, '2024-05-17'),
(367, 'Williams', 'Peg', NULL, NULL, NULL, NULL, '2024-05-17'),
(368, 'Wisniewski', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(369, 'Yelick', 'Kathy', NULL, NULL, NULL, NULL, '2024-05-17'),
(370, '', 'Kruskal', NULL, NULL, NULL, NULL, '2024-05-17'),
(371, '', 'Snir', NULL, NULL, NULL, NULL, '2024-05-17'),
(372, 'W Wisniewski', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(373, 'A Abraham', 'Jacob', NULL, NULL, NULL, NULL, '2024-05-17'),
(374, 'V Adve', 'Sarita', NULL, NULL, NULL, NULL, '2024-05-17'),
(375, 'Bagchi', 'Saurabh', NULL, NULL, NULL, NULL, '2024-05-17'),
(376, 'Balaji', 'Pavan', NULL, NULL, NULL, NULL, '2024-05-17'),
(377, 'Belak', 'Jim', NULL, NULL, NULL, NULL, '2024-05-17'),
(378, 'Bose', 'Pradip', NULL, NULL, NULL, NULL, '2024-05-17'),
(379, 'Carlson', 'Bill', NULL, NULL, NULL, NULL, '2024-05-17'),
(380, 'A Chien', 'Andrew', NULL, NULL, NULL, NULL, '2024-05-17'),
(381, 'Coteus', 'Paul', NULL, NULL, NULL, NULL, '2024-05-17'),
(382, 'A DeBardeleben', 'Nathan', NULL, NULL, NULL, NULL, '2024-05-17'),
(383, 'C Diniz', 'Pedro', NULL, NULL, NULL, NULL, '2024-05-17'),
(384, 'Erez', 'Mattan', NULL, NULL, NULL, NULL, '2024-05-17'),
(385, 'Fazzari', 'Saverio', NULL, NULL, NULL, NULL, '2024-05-17'),
(386, 'Gupta', 'Rinku', NULL, NULL, NULL, NULL, '2024-05-17'),
(387, 'Krishnamoorthy', 'Sriram', NULL, NULL, NULL, NULL, '2024-05-17'),
(388, 'Leyffer', 'Sven', NULL, NULL, NULL, NULL, '2024-05-17'),
(389, 'Liberty', 'Dean', NULL, NULL, NULL, NULL, '2024-05-17'),
(390, 'Mitra', 'Subhasish', NULL, NULL, NULL, NULL, '2024-05-17'),
(391, 'Munson', 'Todd', NULL, NULL, NULL, NULL, '2024-05-17'),
(392, 'Schreiber', 'Rob', NULL, NULL, NULL, NULL, '2024-05-17'),
(393, 'Stearley', 'Jon', NULL, NULL, NULL, NULL, '2024-05-17'),
(394, 'Van Hensbergen', 'Eric', NULL, NULL, NULL, NULL, '2024-05-17'),
(395, 'Shasha', 'Dennis', NULL, NULL, NULL, NULL, '2024-05-17'),
(396, 'Kale', 'Laxmikant', NULL, NULL, NULL, NULL, '2024-05-17'),
(397, 'Al', 'Geist', NULL, NULL, NULL, NULL, '2024-05-17'),
(398, 'W Walker', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(399, 'J Dongarra', 'Jack', NULL, NULL, NULL, NULL, '2024-05-17'),
(400, 'Aggarwal', 'Alok', NULL, NULL, NULL, NULL, '2024-05-17'),
(401, 'Alpern', 'Bowen', NULL, NULL, NULL, NULL, '2024-05-17'),
(402, 'K. Chandra', 'Ashok', NULL, NULL, NULL, NULL, '2024-05-17'),
(403, 'Snir:', 'Marc', NULL, NULL, NULL, NULL, '2024-05-17'),
(404, 'A Patterson', 'Cynthia', NULL, NULL, NULL, NULL, '2024-05-17'),
(405, 'L Graham', 'Susan', NULL, NULL, NULL, NULL, '2024-05-17'),
(406, 'P Kruskal', 'Clyde', NULL, NULL, NULL, NULL, '2024-05-17'),
(407, 'Allen', 'Frances', NULL, NULL, NULL, NULL, '2024-05-17'),
(408, 'Almasi', 'George', NULL, NULL, NULL, NULL, '2024-05-17'),
(409, 'Andreoni', 'Wanda', NULL, NULL, NULL, NULL, '2024-05-17'),
(410, 'Beece', 'Dan', NULL, NULL, NULL, NULL, '2024-05-17'),
(411, 'J.  Berne', 'Bruce', NULL, NULL, NULL, NULL, '2024-05-17'),
(412, 'Bright', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(413, 'Brunheroto', 'Jose', NULL, NULL, NULL, NULL, '2024-05-17'),
(414, 'Cascaval', 'Calin', NULL, NULL, NULL, NULL, '2024-05-17'),
(415, 'Castanos', 'Jose', NULL, NULL, NULL, NULL, '2024-05-17'),
(416, 'Crumley', 'Paul', NULL, NULL, NULL, NULL, '2024-05-17'),
(417, 'Curioni', 'Alessandro', NULL, NULL, NULL, NULL, '2024-05-17'),
(418, 'Denneau', 'Monty', NULL, NULL, NULL, NULL, '2024-05-17'),
(419, 'Donath', 'W', NULL, NULL, NULL, NULL, '2024-05-17'),
(420, 'Eleftheriou', 'Maria', NULL, NULL, NULL, NULL, '2024-05-17'),
(421, 'Flitch', 'B', NULL, NULL, NULL, NULL, '2024-05-17'),
(422, 'Fleischer', 'Bruce', NULL, NULL, NULL, NULL, '2024-05-17'),
(423, 'J.  Georgiou', 'Christos', NULL, NULL, NULL, NULL, '2024-05-17'),
(424, 'Germain', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(425, 'Giampapa', 'Mark', NULL, NULL, NULL, NULL, '2024-05-17'),
(426, 'Gresh', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(427, 'Gupta', 'Manish', NULL, NULL, NULL, NULL, '2024-05-17'),
(428, 'Haring', 'Ruud', NULL, NULL, NULL, NULL, '2024-05-17'),
(429, 'Ho', 'Howard', NULL, NULL, NULL, NULL, '2024-05-17'),
(430, 'Hochschild', 'Peter', NULL, NULL, NULL, NULL, '2024-05-17'),
(431, 'Hummel', 'Susan', NULL, NULL, NULL, NULL, '2024-05-17'),
(432, 'Jonas', 'Tiziana', NULL, NULL, NULL, NULL, '2024-05-17'),
(433, 'Lieber', 'Derek', NULL, NULL, NULL, NULL, '2024-05-17'),
(434, 'Martyna', 'Glenn', NULL, NULL, NULL, NULL, '2024-05-17'),
(435, 'Maturu', 'K', NULL, NULL, NULL, NULL, '2024-05-17'),
(436, 'Moreira', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(437, 'Newns', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(438, 'Newton', 'Matthew', NULL, NULL, NULL, NULL, '2024-05-17'),
(439, 'Philhower', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(440, 'Picunko', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-17'),
(441, 'Pitera', 'Jed', NULL, NULL, NULL, NULL, '2024-05-17'),
(442, 'Pitman', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(443, 'Rand', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(444, 'Royyuru', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(445, 'Salapura', 'Valentina', NULL, NULL, NULL, NULL, '2024-05-17'),
(446, 'Sanomiya', 'Alda', NULL, NULL, NULL, NULL, '2024-05-17'),
(447, 'Shah', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(448, 'Sham', 'Y', NULL, NULL, NULL, NULL, '2024-05-17'),
(449, 'Singh', 'Sarabjeet', NULL, NULL, NULL, NULL, '2024-05-17'),
(450, 'Suits', 'Frank', NULL, NULL, NULL, NULL, '2024-05-17'),
(451, 'Swetz', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(452, 'C.  Swope', 'William', NULL, NULL, NULL, NULL, '2024-05-17'),
(453, 'Vishnumurthy', 'N', NULL, NULL, NULL, NULL, '2024-05-17'),
(454, 'C Ward', 'TJ', NULL, NULL, NULL, NULL, '2024-05-17'),
(455, 'Warren', 'H', NULL, NULL, NULL, NULL, '2024-05-17'),
(456, 'Zhou', 'Ruhong', NULL, NULL, NULL, NULL, '2024-05-17'),
(457, 'K Chandra', 'Ashok', NULL, NULL, NULL, NULL, '2024-05-17'),
(458, 'Agerwala', 'Tilak', NULL, NULL, NULL, NULL, '2024-05-17'),
(459, 'L.  Martin', 'Joanne', NULL, NULL, NULL, NULL, '2024-05-17'),
(460, 'H.  Mirza', 'Jamshed', NULL, NULL, NULL, NULL, '2024-05-17'),
(461, 'C.  Sadler', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(462, 'M.  Dias', 'Daniel', NULL, NULL, NULL, NULL, '2024-05-17'),
(463, 'Attiya', 'Hagit', NULL, NULL, NULL, NULL, '2024-05-17'),
(464, 'K Warmuth', 'Manfred', NULL, NULL, NULL, NULL, '2024-05-17'),
(465, 'Hoefler', 'Torsten', NULL, NULL, NULL, NULL, '2024-05-17'),
(466, 'Gaifman', 'Haim', NULL, NULL, NULL, NULL, '2024-05-17'),
(467, 'L Bocchino', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(468, 'Adve', 'Vikram', NULL, NULL, NULL, NULL, '2024-05-17'),
(469, 'Adve', 'Sarita', NULL, NULL, NULL, NULL, '2024-05-17'),
(470, 'Huss-Lederman', 'Steve', NULL, NULL, NULL, NULL, '2024-05-17'),
(471, 'Skjellum', 'Tony', NULL, NULL, NULL, NULL, '2024-05-17'),
(472, 'W Otto', 'Steve', NULL, NULL, NULL, NULL, '2024-05-17'),
(473, 'Walker', 'DW', NULL, NULL, NULL, NULL, '2024-05-17'),
(474, 'Walker', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(475, 'Corbett', 'Peter', NULL, NULL, NULL, NULL, '2024-05-17'),
(476, 'Feitelson', 'Dror', NULL, NULL, NULL, NULL, '2024-05-17'),
(477, 'Fineberg', 'Sam', NULL, NULL, NULL, NULL, '2024-05-17'),
(478, 'Hsu', 'Yarsun', NULL, NULL, NULL, NULL, '2024-05-17'),
(479, 'Prost', 'Jean-Pierre', NULL, NULL, NULL, NULL, '2024-05-17'),
(480, 'Traversat', 'Bernard', NULL, NULL, NULL, NULL, '2024-05-17'),
(481, 'Wong', 'Parkson', NULL, NULL, NULL, NULL, '2024-05-17'),
(482, 'Corbett', 'P.', NULL, NULL, NULL, NULL, '2024-05-17'),
(483, 'Feitelson', 'D.', NULL, NULL, NULL, NULL, '2024-05-17'),
(484, 'Fineberg', 'S.', NULL, NULL, NULL, NULL, '2024-05-17'),
(485, 'Hsu', 'Y.', NULL, NULL, NULL, NULL, '2024-05-17'),
(486, 'Prost', 'J.-P.', NULL, NULL, NULL, NULL, '2024-05-17'),
(487, 'Snir', 'M.', NULL, NULL, NULL, NULL, '2024-05-17'),
(488, 'Traversat', 'B.', NULL, NULL, NULL, NULL, '2024-05-17'),
(489, 'Wong', 'P.', NULL, NULL, NULL, NULL, '2024-05-17'),
(490, 'Coppersmith', 'Don', NULL, NULL, NULL, NULL, '2024-05-17'),
(491, 'Doyle', 'Peter', NULL, NULL, NULL, NULL, '2024-05-17'),
(492, 'Raghavan', 'Prabhakar', NULL, NULL, NULL, NULL, '2024-05-17'),
(493, 'Trelles', 'Oswaldo', NULL, NULL, NULL, NULL, '2024-05-17'),
(494, 'Prins', 'Pjotr', NULL, NULL, NULL, NULL, '2024-05-17'),
(495, 'C Jansen', 'Ritsert', NULL, NULL, NULL, NULL, '2024-05-17'),
(496, 'Bala', 'Vasanth', NULL, NULL, NULL, NULL, '2024-05-17'),
(497, 'Bruck', 'Jehoshua', NULL, NULL, NULL, NULL, '2024-05-17'),
(498, 'Cypher', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(499, 'Elustondo', 'Pablo', NULL, NULL, NULL, NULL, '2024-05-17'),
(500, 'Ho', 'Alex', NULL, NULL, NULL, NULL, '2024-05-17'),
(501, 'Ho', 'Ching-Tien', NULL, NULL, NULL, NULL, '2024-05-17'),
(502, 'Kipnis', 'Shlomo', NULL, NULL, NULL, NULL, '2024-05-17'),
(503, 'Kramer', 'William', NULL, NULL, NULL, NULL, '2024-05-17'),
(504, 'Jerrum', 'Mark', NULL, NULL, NULL, NULL, '2024-05-17'),
(505, 'P McAuliffe', 'Kevin', NULL, NULL, NULL, NULL, '2024-05-17'),
(506, 'E Moreira', 'Jose', NULL, NULL, NULL, NULL, '2024-05-17'),
(507, 'P Midkiff', 'Samuel', NULL, NULL, NULL, NULL, '2024-05-17'),
(508, 'V Artigas', 'Pedro', NULL, NULL, NULL, NULL, '2024-05-17'),
(509, 'D Lawrence', 'Richard', NULL, NULL, NULL, NULL, '2024-05-17'),
(510, 'Dorier', 'Matthieu', NULL, NULL, NULL, NULL, '2024-05-17'),
(511, 'Orf', 'Leigh', NULL, NULL, NULL, NULL, '2024-05-17'),
(512, 'Dathathri', 'Roshan', NULL, NULL, NULL, NULL, '2024-05-17'),
(513, 'Gill', 'Gurbinder', NULL, NULL, NULL, NULL, '2024-05-17'),
(514, 'Hoang', 'Loc', NULL, NULL, NULL, NULL, '2024-05-17'),
(515, 'Dang', 'Hoang-Vu', NULL, NULL, NULL, NULL, '2024-05-17'),
(516, 'Brooks', 'Alex', NULL, NULL, NULL, NULL, '2024-05-17'),
(517, 'Dryden', 'Nikoli', NULL, NULL, NULL, NULL, '2024-05-17'),
(518, 'Pingali', 'Keshav', NULL, NULL, NULL, NULL, '2024-05-17'),
(519, 'Behzad', 'Babak', NULL, NULL, NULL, NULL, '2024-05-17'),
(520, 'Vu Thanh Luu', 'Huong', NULL, NULL, NULL, NULL, '2024-05-17'),
(521, 'Huchette', 'Joseph', NULL, NULL, NULL, NULL, '2024-05-17'),
(522, 'Byna', 'Surendra', NULL, NULL, NULL, NULL, '2024-05-17'),
(523, '', 'Prabhat', NULL, NULL, NULL, NULL, '2024-05-17'),
(524, 'Aydt', 'Ruth', NULL, NULL, NULL, NULL, '2024-05-17'),
(525, 'Koziol', 'Quincey', NULL, NULL, NULL, NULL, '2024-05-17'),
(526, 'Seo', 'Sangmin', NULL, NULL, NULL, NULL, '2024-05-17'),
(527, 'Amer', 'Abdelhalim', NULL, NULL, NULL, NULL, '2024-05-17'),
(528, 'Bordage', 'Cyril', NULL, NULL, NULL, NULL, '2024-05-17'),
(529, 'Carns', 'Philip', NULL, NULL, NULL, NULL, '2024-05-17'),
(530, 'Castelló', 'Adrián', NULL, NULL, NULL, NULL, '2024-05-17'),
(531, 'Genet', 'Damien', NULL, NULL, NULL, NULL, '2024-05-17'),
(532, 'Iwasaki', 'Shintaro', NULL, NULL, NULL, NULL, '2024-05-17'),
(533, 'Jindal', 'Prateek', NULL, NULL, NULL, NULL, '2024-05-17'),
(534, 'Lifflander', 'Jonathan', NULL, NULL, NULL, NULL, '2024-05-17'),
(535, 'Lu', 'Huiwei', NULL, NULL, NULL, NULL, '2024-05-17'),
(536, 'Sun', 'Yanhua', NULL, NULL, NULL, NULL, '2024-05-17'),
(537, 'Taura', 'Kenjiro', NULL, NULL, NULL, NULL, '2024-05-17'),
(538, 'F.  Corbett', 'Peter', NULL, NULL, NULL, NULL, '2024-05-17'),
(539, 'G Feitelson', 'Dror', NULL, NULL, NULL, NULL, '2024-05-17'),
(540, 'Prost', 'J-P', NULL, NULL, NULL, NULL, '2024-05-17'),
(541, 'S.  Almasi', 'George', NULL, NULL, NULL, NULL, '2024-05-17'),
(542, 'Johnson  Baylor', 'Sandra', NULL, NULL, NULL, NULL, '2024-05-17'),
(543, 'S Bolmarcich', 'Anthony', NULL, NULL, NULL, NULL, '2024-05-17'),
(544, 'Satran', 'Julian', NULL, NULL, NULL, NULL, '2024-05-17'),
(545, 'Colao', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(546, 'D.  Herr', 'Brian', NULL, NULL, NULL, NULL, '2024-05-17'),
(547, 'Kavaky', 'Joe', NULL, NULL, NULL, NULL, '2024-05-17'),
(548, 'R.  Morgan', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-17'),
(549, 'Zlotek', 'Anthony', NULL, NULL, NULL, NULL, '2024-05-17'),
(550, 'D.  Frye', 'Daniel', NULL, NULL, NULL, NULL, '2024-05-17'),
(551, 'J.  Gildea', 'Kevin', NULL, NULL, NULL, NULL, '2024-05-17'),
(552, 'Aupy', 'Guillaume', NULL, NULL, NULL, NULL, '2024-05-17'),
(553, 'Benoit', 'Anne', NULL, NULL, NULL, NULL, '2024-05-17'),
(554, 'Eric Wu', 'C', NULL, NULL, NULL, NULL, '2024-05-17'),
(555, 'Bolmarcich', 'Anthony', NULL, NULL, NULL, NULL, '2024-05-17'),
(556, 'Wootton', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(557, 'Parpia', 'Farid', NULL, NULL, NULL, NULL, '2024-05-17'),
(558, 'Chan', 'Anthony', NULL, NULL, NULL, NULL, '2024-05-17'),
(559, 'Li', 'Shigang', NULL, NULL, NULL, NULL, '2024-05-17'),
(560, 'Weiss', 'Alan', NULL, NULL, NULL, NULL, '2024-05-17'),
(561, 'Lusk', 'E', NULL, NULL, NULL, NULL, '2024-05-17'),
(562, 'Knighten', 'B', NULL, NULL, NULL, NULL, '2024-05-17'),
(563, 'Geist', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(564, 'Hempel', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(565, 'Gropp', 'W', NULL, NULL, NULL, NULL, '2024-05-17'),
(566, 'Cownie', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(567, 'Skjellum', 'T', NULL, NULL, NULL, NULL, '2024-05-17'),
(568, 'Clarke', 'L', NULL, NULL, NULL, NULL, '2024-05-17'),
(569, 'Littlefield', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(570, 'Sears', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(571, 'Husslederman', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(572, 'Anderson', 'E', NULL, NULL, NULL, NULL, '2024-05-17'),
(573, 'Berryman', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(574, 'Feeney', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(575, 'Frye', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(576, 'Hart', 'L', NULL, NULL, NULL, NULL, '2024-05-17'),
(577, 'Ho', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(578, 'Kohl', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(579, 'Madams', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(580, 'Mosher', 'C', NULL, NULL, NULL, NULL, '2024-05-17'),
(581, 'Pierce', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(582, 'Schikuta', 'E', NULL, NULL, NULL, NULL, '2024-05-17'),
(583, 'Voigt', 'RG', NULL, NULL, NULL, NULL, '2024-05-17'),
(584, 'Babb', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(585, 'Bjornson', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(586, 'Fernando', 'V', NULL, NULL, NULL, NULL, '2024-05-17'),
(587, 'Glendinning', 'I', NULL, NULL, NULL, NULL, '2024-05-17'),
(588, 'Haupt', 'T', NULL, NULL, NULL, NULL, '2024-05-17'),
(589, 'Ho', 'CTH', NULL, NULL, NULL, NULL, '2024-05-17'),
(590, 'Krauss', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(591, 'Mainwaring', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(592, 'Nessett', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(593, 'Ranka', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(594, 'Singh', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(595, 'Weeks', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(596, 'Baron', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(597, 'Doss', 'N', NULL, NULL, NULL, NULL, '2024-05-17'),
(598, 'Fineberg', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(599, 'Greenberg', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(600, 'Heller', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(601, 'Howell', 'G', NULL, NULL, NULL, NULL, '2024-05-17'),
(602, 'Leary', 'B', NULL, NULL, NULL, NULL, '2024-05-17'),
(603, 'Mcbryan', 'O', NULL, NULL, NULL, NULL, '2024-05-17'),
(604, 'Pacheco', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(605, 'Rigsbee', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(606, 'Sussman', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(607, 'Wheat', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(608, 'Barszcz', 'E', NULL, NULL, NULL, NULL, '2024-05-17'),
(609, 'Elster', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(610, 'Flower', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(611, 'Harrison', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(612, 'Henderson', 'T', NULL, NULL, NULL, NULL, '2024-05-17'),
(613, 'Kapenga', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(614, 'Maccabe', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(615, 'Mckinley', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(616, 'Palmer', 'H', NULL, NULL, NULL, NULL, '2024-05-17'),
(617, 'Robison', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(618, 'Tomlinson', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(619, 'Zenith', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(620, 'Edler', 'Jan', NULL, NULL, NULL, NULL, '2024-05-17'),
(621, 'J Teller', 'Patricia', NULL, NULL, NULL, NULL, '2024-05-17'),
(622, 'Wilson', 'James', NULL, NULL, NULL, NULL, '2024-05-17'),
(623, 'Berg Kjolstad', 'Fredrik', NULL, NULL, NULL, NULL, '2024-05-17'),
(624, 'Performance FORTRAN Forum', 'High', NULL, NULL, NULL, NULL, '2024-05-17'),
(625, 'A Bader', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(626, 'Dinan', 'James', NULL, NULL, NULL, NULL, '2024-05-17'),
(627, 'E Grant', 'Ryan', NULL, NULL, NULL, NULL, '2024-05-17'),
(628, 'Goodell', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(629, 'Miller', 'Douglas', NULL, NULL, NULL, NULL, '2024-05-17'),
(630, 'Calhoun', 'Jon', NULL, NULL, NULL, NULL, '2024-05-17'),
(631, 'Olson', 'Luke', NULL, NULL, NULL, NULL, '2024-05-17'),
(632, 'Jiang', 'Changhao', NULL, NULL, NULL, NULL, '2024-05-17'),
(633, 'Bryant', 'Raymond', NULL, NULL, NULL, NULL, '2024-05-17'),
(634, 'de Jong', 'Peter', NULL, NULL, NULL, NULL, '2024-05-17'),
(635, 'Elustondon', 'Pablo', NULL, NULL, NULL, NULL, '2024-05-17'),
(636, 'Irwin', 'Gail', NULL, NULL, NULL, NULL, '2024-05-17'),
(637, 'Lawrence', 'Richard', NULL, NULL, NULL, NULL, '2024-05-17'),
(638, 'Zernik', 'Dror', NULL, NULL, NULL, NULL, '2024-05-17'),
(639, 'Malki', 'Dalia', NULL, NULL, NULL, NULL, '2024-05-17'),
(640, 'Rajhavan', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(641, 'Di', 'Sheng', NULL, NULL, NULL, NULL, '2024-05-17'),
(642, 'Pershey', 'Eric', NULL, NULL, NULL, NULL, '2024-05-17'),
(643, 'Yu', 'Jing', NULL, NULL, NULL, NULL, '2024-05-17'),
(644, 'Jesus Garzaran', 'Maria', NULL, NULL, NULL, NULL, '2024-05-17'),
(645, 'M Wild', 'Stefan', NULL, NULL, NULL, NULL, '2024-05-17'),
(646, 'Prabhat', 'Mr', NULL, NULL, NULL, NULL, '2024-05-17'),
(647, 'Benson', 'Tom', NULL, NULL, NULL, NULL, '2024-05-17'),
(648, 'Moon', 'Tim', NULL, NULL, NULL, NULL, '2024-05-17'),
(649, 'Van Essen', 'Brian', NULL, NULL, NULL, NULL, '2024-05-17'),
(650, 'Moran', 'Shlomo', NULL, NULL, NULL, NULL, '2024-05-17'),
(651, 'Manber', 'Udi', NULL, NULL, NULL, NULL, '2024-05-17'),
(652, 'Sisneros', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(653, 'Yildiz', 'Orcun', NULL, NULL, NULL, NULL, '2024-05-17'),
(654, 'Ibrahim', 'Shadi', NULL, NULL, NULL, NULL, '2024-05-17'),
(655, 'Peterka', 'Tom', NULL, NULL, NULL, NULL, '2024-05-17'),
(656, 'N Olson', 'Luke', NULL, NULL, NULL, NULL, '2024-05-17'),
(657, 'D Gropp', 'William', NULL, NULL, NULL, NULL, '2024-05-17'),
(658, 'Adve', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(659, 'S Adve', 'Vikram', NULL, NULL, NULL, NULL, '2024-05-17'),
(660, 'Agha', 'Gul', NULL, NULL, NULL, NULL, '2024-05-17'),
(661, 'I Frank', 'Matthew', NULL, NULL, NULL, NULL, '2024-05-17'),
(662, 'Garzarán', 'MJ', NULL, NULL, NULL, NULL, '2024-05-17'),
(663, 'Hart', 'JC', NULL, NULL, NULL, NULL, '2024-05-17'),
(664, 'Hwu', 'W-m', NULL, NULL, NULL, NULL, '2024-05-17'),
(665, 'Johnson', 'RE', NULL, NULL, NULL, NULL, '2024-05-17'),
(666, 'Kale', 'L', NULL, NULL, NULL, NULL, '2024-05-17'),
(667, 'Kumar', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(668, 'Marinov', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(669, 'Nahrstedt', 'K', NULL, NULL, NULL, NULL, '2024-05-17'),
(670, 'Padua', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(671, 'Parthasarathy', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(672, 'Patel', 'SJ', NULL, NULL, NULL, NULL, '2024-05-17'),
(673, 'Rosu', 'G', NULL, NULL, NULL, NULL, '2024-05-17'),
(674, 'Roth', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(675, 'Torrellas', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(676, 'Zilles', 'C', NULL, NULL, NULL, NULL, '2024-05-17'),
(677, 'Saphir', 'B', NULL, NULL, NULL, NULL, '2024-05-17'),
(678, 'Franke', 'Hubertus', NULL, NULL, NULL, NULL, '2024-05-17'),
(679, 'Riviere', 'Michel', NULL, NULL, NULL, NULL, '2024-05-17'),
(680, 'Pattnaik', 'Pratap', NULL, NULL, NULL, NULL, '2024-05-17'),
(681, 'Shamir', 'Eli', NULL, NULL, NULL, NULL, '2024-05-17'),
(682, 'Kjolstad', 'Fredrik', NULL, NULL, NULL, NULL, '2024-05-17'),
(683, 'Dig', 'Danny', NULL, NULL, NULL, NULL, '2024-05-17'),
(684, 'Acevedo', 'Gabriel', NULL, NULL, NULL, NULL, '2024-05-17'),
(685, 'Catanzaro', 'Bryan', NULL, NULL, NULL, NULL, '2024-05-17'),
(686, 'Keutzer', 'Kurt', NULL, NULL, NULL, NULL, '2024-05-17'),
(687, 'Patterson', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(688, 'Su', 'Bor-Yiing', NULL, NULL, NULL, NULL, '2024-05-17'),
(689, 'Olukotun', 'Kunle', NULL, NULL, NULL, NULL, '2024-05-17'),
(690, 'Hanrahan', 'Pat', NULL, NULL, NULL, NULL, '2024-05-17'),
(691, 'Chafi', 'Hassan', NULL, NULL, NULL, NULL, '2024-05-17'),
(692, 'Bautista-Gomez', 'Leonardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(693, 'Perarnau', 'Swann', NULL, NULL, NULL, NULL, '2024-05-17'),
(694, 'Tiwari', 'Devesh', NULL, NULL, NULL, NULL, '2024-05-17'),
(695, 'Gupta', 'Saurabh', NULL, NULL, NULL, NULL, '2024-05-17'),
(696, 'Zhang', 'Junchao', NULL, NULL, NULL, NULL, '2024-05-17'),
(697, 'Yoo', 'Andy', NULL, NULL, NULL, NULL, '2024-05-17'),
(698, 'Harrod', 'Bill', NULL, NULL, NULL, NULL, '2024-05-17'),
(699, 'Hoang', 'Thuc', NULL, NULL, NULL, NULL, '2024-05-17'),
(700, 'Nowell', 'Lucy', NULL, NULL, NULL, NULL, '2024-05-17'),
(701, 'Adolf', 'Bob', NULL, NULL, NULL, NULL, '2024-05-17'),
(702, 'Borkar', 'Shekhar', NULL, NULL, NULL, NULL, '2024-05-17'),
(703, 'Elnozahy', 'Mootaz', NULL, NULL, NULL, NULL, '2024-05-17'),
(704, 'Heroux', 'Mike', NULL, NULL, NULL, NULL, '2024-05-17'),
(705, 'Rogers', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(706, 'Ross', 'Rob', NULL, NULL, NULL, NULL, '2024-05-17'),
(707, 'Sarkar', 'Vivek', NULL, NULL, NULL, NULL, '2024-05-17'),
(708, 'Schulz', 'Martin', NULL, NULL, NULL, NULL, '2024-05-17'),
(709, 'Snir', 'Mark', NULL, NULL, NULL, NULL, '2024-05-17'),
(710, 'Woodward', 'Paul', NULL, NULL, NULL, NULL, '2024-05-17'),
(711, 'Bancroft', 'Marti', NULL, NULL, NULL, NULL, '2024-05-17'),
(712, 'Hall', 'Mary', NULL, NULL, NULL, NULL, '2024-05-17'),
(713, 'Hollingsworth', 'Jeff', NULL, NULL, NULL, NULL, '2024-05-17'),
(714, 'Macaluso', 'Tina', NULL, NULL, NULL, NULL, '2024-05-17'),
(715, 'Quinlan', 'Dan', NULL, NULL, NULL, NULL, '2024-05-17'),
(716, 'Sachs', 'Sonia', NULL, NULL, NULL, NULL, '2024-05-17'),
(717, 'Smith', 'Tom', NULL, NULL, NULL, NULL, '2024-05-17'),
(718, 'Still', 'Bert', NULL, NULL, NULL, NULL, '2024-05-17'),
(719, 'Wu', 'John', NULL, NULL, NULL, NULL, '2024-05-17'),
(720, 'Aykanat', 'Cevdet', NULL, NULL, NULL, NULL, '2024-05-17'),
(721, 'Kaya', 'Kamer', NULL, NULL, NULL, NULL, '2024-05-17'),
(722, 'Ikinci', 'Murat', NULL, NULL, NULL, NULL, '2024-05-17'),
(723, 'Çatalyürek', 'UV', NULL, NULL, NULL, NULL, '2024-05-17'),
(724, 'Kaya', 'Oguz', NULL, NULL, NULL, NULL, '2024-05-17'),
(725, 'Barla Cambazoglu', 'B', NULL, NULL, NULL, NULL, '2024-05-17'),
(726, 'A Knight', 'Philip', NULL, NULL, NULL, NULL, '2024-05-17'),
(727, 'Ruiz', 'Daniel', NULL, NULL, NULL, NULL, '2024-05-17'),
(728, 'V Çatalyürek', 'Ümit', NULL, NULL, NULL, NULL, '2024-05-17'),
(729, 'Dufossé', 'Fanny', NULL, NULL, NULL, NULL, '2024-05-17'),
(730, 'R Amestoy', 'Patrick', NULL, NULL, NULL, NULL, '2024-05-17'),
(731, 'S Duff', 'Iain', NULL, NULL, NULL, NULL, '2024-05-17'),
(732, 'L\'Excellent', 'Jean-Yves', NULL, NULL, NULL, NULL, '2024-05-17'),
(733, 'Rouet', 'François-Henry', NULL, NULL, NULL, NULL, '2024-05-17'),
(734, 'Deveci', 'Mehmet', NULL, NULL, NULL, NULL, '2024-05-17'),
(735, 'Jacquelin', 'Mathias', NULL, NULL, NULL, NULL, '2024-05-17'),
(736, 'Marchal', 'Loris', NULL, NULL, NULL, NULL, '2024-05-17'),
(737, 'V. Catalyurek', 'Umit', NULL, NULL, NULL, NULL, '2024-05-17'),
(738, 'Bora', 'Ucar', NULL, NULL, NULL, NULL, '2024-05-17'),
(739, 'Amestoy', 'Patrick', NULL, NULL, NULL, NULL, '2024-05-17'),
(740, 'Buttari', 'Alfredo', NULL, NULL, NULL, NULL, '2024-05-17'),
(741, 'Guermouche', 'Abdou', NULL, NULL, NULL, NULL, '2024-05-17'),
(742, 'Herrmann', 'Julien', NULL, NULL, NULL, NULL, '2024-05-17'),
(743, 'Yusuf Ozkaya', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(744, 'V Çatalyürek', 'Ümit', NULL, NULL, NULL, NULL, '2024-05-17'),
(745, 'Langguth', 'Johannes', NULL, NULL, NULL, NULL, '2024-05-17'),
(746, 'Manne', 'Fredrik', NULL, NULL, NULL, NULL, '2024-05-17'),
(747, 'Li', 'Jiajia', NULL, NULL, NULL, NULL, '2024-05-17'),
(748, 'Sun', 'Jimeng', NULL, NULL, NULL, NULL, '2024-05-17'),
(749, 'Barker', 'Kevin', NULL, NULL, NULL, NULL, '2024-05-17'),
(750, 'Vuduc', 'Richard', NULL, NULL, NULL, NULL, '2024-05-17'),
(751, 'Ozkural', 'Eray', NULL, NULL, NULL, NULL, '2024-05-17'),
(752, 'Rietmann', 'Max', NULL, NULL, NULL, NULL, '2024-05-17'),
(753, 'Peter', 'Daniel', NULL, NULL, NULL, NULL, '2024-05-17'),
(754, 'Schenk', 'Olaf', NULL, NULL, NULL, NULL, '2024-05-17'),
(755, 'J Grote', 'Marcus', NULL, NULL, NULL, NULL, '2024-05-17'),
(756, 'Kho', 'Jonathan', NULL, NULL, NULL, NULL, '2024-05-17'),
(757, 'Benzi', 'Michele', NULL, NULL, NULL, NULL, '2024-05-17'),
(758, 'Duff', 'Iain', NULL, NULL, NULL, NULL, '2024-05-17'),
(759, 'Panagiotas', 'Ioannis', NULL, NULL, NULL, NULL, '2024-05-17'),
(760, 'L’Excellent', 'Jean-Yves', NULL, NULL, NULL, NULL, '2024-05-17'),
(761, 'Ç PInar', 'Mustafa', NULL, NULL, NULL, NULL, '2024-05-17'),
(762, 'Malas', 'Tahir', NULL, NULL, NULL, NULL, '2024-05-17'),
(763, 'Fasi', 'Massimiliano', NULL, NULL, NULL, NULL, '2024-05-17'),
(764, 'Langou', 'Julien', NULL, NULL, NULL, NULL, '2024-05-17'),
(765, 'R Hein', 'Eric', NULL, NULL, NULL, NULL, '2024-05-17'),
(766, 'Eswar', 'Srinivas', NULL, NULL, NULL, NULL, '2024-05-17'),
(767, 'Yaşar', 'Abdurrahman', NULL, NULL, NULL, NULL, '2024-05-17'),
(768, 'S Young', 'Jeffrey', NULL, NULL, NULL, NULL, '2024-05-17'),
(769, 'M Conte', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-17'),
(770, 'Riedy', 'Jason', NULL, NULL, NULL, NULL, '2024-05-17'),
(771, 'Kayaaslan', 'Enver', NULL, NULL, NULL, NULL, '2024-05-17'),
(772, 'Lambert', 'Thomas', NULL, NULL, NULL, NULL, '2024-05-17'),
(773, 'Yamazaki', 'Ichitaro', NULL, NULL, NULL, NULL, '2024-05-17'),
(774, 'S Li', 'Xiaoye', NULL, NULL, NULL, NULL, '2024-05-17'),
(775, 'Pawłowski', 'Filip', NULL, NULL, NULL, NULL, '2024-05-17'),
(776, 'Yzelman', 'Albert-Jan', NULL, NULL, NULL, NULL, '2024-05-17'),
(777, 'V Catalyiirek', 'Umit', NULL, NULL, NULL, NULL, '2024-05-17'),
(778, 'Sathe', 'Madan', NULL, NULL, NULL, NULL, '2024-05-17'),
(779, 'Sameh', 'Ahmed', NULL, NULL, NULL, NULL, '2024-05-17'),
(780, 'Uçar', 'B', NULL, NULL, NULL, NULL, '2024-05-17'),
(781, 'Taşyaran', 'Fatih', NULL, NULL, NULL, NULL, '2024-05-17'),
(782, 'Demireller', 'Berkay', NULL, NULL, NULL, NULL, '2024-05-17'),
(783, 'Cavelan', 'Aurlien', NULL, NULL, NULL, NULL, '2024-05-17'),
(784, 'Sun', 'Hongyang', NULL, NULL, NULL, NULL, '2024-05-17'),
(785, 'Grandjean', 'Anael', NULL, NULL, NULL, NULL, '2024-05-17'),
(786, 'Amestoy', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(787, 'Buttari', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(788, 'Guermouche', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(789, 'L’Excellent', 'JY', NULL, NULL, NULL, NULL, '2024-05-17'),
(790, 'Agullo', 'E', NULL, NULL, NULL, NULL, '2024-05-17'),
(791, 'Bremond', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(792, 'Combes', 'P', NULL, NULL, NULL, NULL, '2024-05-17'),
(793, 'Durand', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(794, 'Fevre', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(795, 'Joslin', 'G', NULL, NULL, NULL, NULL, '2024-05-17'),
(796, 'Koster', 'J', NULL, NULL, NULL, NULL, '2024-05-17');
INSERT INTO `2025_authors` (`id`, `lastname`, `firstname`, `email`, `phone_number`, `job`, `description`, `update_date`) VALUES
(797, 'Mary', 'T', NULL, NULL, NULL, NULL, '2024-05-17'),
(798, 'Pralet', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(799, 'Puglisi', 'C', NULL, NULL, NULL, NULL, '2024-05-17'),
(800, 'Rouet', 'FH', NULL, NULL, NULL, NULL, '2024-05-17'),
(801, 'Sid-Lakhdar', 'W', NULL, NULL, NULL, NULL, '2024-05-17'),
(802, 'Slavova', 'T', NULL, NULL, NULL, NULL, '2024-05-17'),
(803, 'Weisbecker', 'C', NULL, NULL, NULL, NULL, '2024-05-17'),
(804, 'Sid-Lakhdar', 'MW', NULL, NULL, NULL, NULL, '2024-05-17'),
(805, 'Li', 'Xiaoye', NULL, NULL, NULL, NULL, '2024-05-17'),
(806, 'd\'Ambra', 'Pasqua', NULL, NULL, NULL, NULL, '2024-05-17'),
(807, 'Di Serafino', 'Daniela', NULL, NULL, NULL, NULL, '2024-05-17'),
(808, 'Filippone', 'Salvatore', NULL, NULL, NULL, NULL, '2024-05-17'),
(809, 'Gentile', 'Simone', NULL, NULL, NULL, NULL, '2024-05-17'),
(810, 'H Bisseling', 'Rob', NULL, NULL, NULL, NULL, '2024-05-17'),
(811, 'Yzelman', 'AN', NULL, NULL, NULL, NULL, '2024-05-17'),
(812, 'Bertrand', 'Jules', NULL, NULL, NULL, NULL, '2024-05-17'),
(813, 'Singh', 'Somesh', NULL, NULL, NULL, NULL, '2024-05-17'),
(814, 'Angriman', 'Eugenio', NULL, NULL, NULL, NULL, '2024-05-17'),
(815, 'Meyerhenke', 'Henning', NULL, NULL, NULL, NULL, '2024-05-17'),
(816, 'Schulz', 'Christian', NULL, NULL, NULL, NULL, '2024-05-17'),
(817, 'Portase', 'Raluca', NULL, NULL, NULL, NULL, '2024-05-17'),
(818, 'Gallopoulos', 'Efstratios', NULL, NULL, NULL, NULL, '2024-05-17'),
(819, 'Pichon', 'Grégoire', NULL, NULL, NULL, NULL, '2024-05-17'),
(820, 'Ni', 'Xiang', NULL, NULL, NULL, NULL, '2024-05-17'),
(821, 'Jain', 'Nikhil', NULL, NULL, NULL, NULL, '2024-05-17'),
(822, 'Zheng', 'Gengbin', NULL, NULL, NULL, NULL, '2024-05-17'),
(823, 'Bhatele', 'Abhinav', NULL, NULL, NULL, NULL, '2024-05-17'),
(824, 'L Mendes', 'Celso', NULL, NULL, NULL, NULL, '2024-05-17'),
(825, 'Sarood', 'Osman', NULL, NULL, NULL, NULL, '2024-05-17'),
(826, 'Acun', 'Bilge', NULL, NULL, NULL, NULL, '2024-05-17'),
(827, 'Langer', 'Akhil', NULL, NULL, NULL, NULL, '2024-05-17'),
(828, 'Menon', 'Harshitha', NULL, NULL, NULL, NULL, '2024-05-17'),
(829, 'Totoni', 'Ehsan', NULL, NULL, NULL, NULL, '2024-05-17'),
(830, 'Mercier', 'Guillaume', NULL, NULL, NULL, NULL, '2024-05-17'),
(831, 'Tessier', 'François', NULL, NULL, NULL, NULL, '2024-05-17'),
(832, 'Rojas', 'Elvis', NULL, NULL, NULL, NULL, '2024-05-17'),
(833, 'Njoroge Kahira', 'Albert', NULL, NULL, NULL, NULL, '2024-05-17'),
(834, 'M Badia', 'Rosa', NULL, NULL, NULL, NULL, '2024-05-17'),
(835, 'Miller', 'Phil', NULL, NULL, NULL, NULL, '2024-05-17'),
(836, 'Jones', 'Terry', NULL, NULL, NULL, NULL, '2024-05-17'),
(837, 'Maxwell', 'Don', NULL, NULL, NULL, NULL, '2024-05-17'),
(838, 'Cruz', 'EHM', NULL, NULL, NULL, NULL, '2024-05-17'),
(839, 'Maciel', 'JM', NULL, NULL, NULL, NULL, '2024-05-17'),
(840, 'Clozato', 'CL', NULL, NULL, NULL, NULL, '2024-05-17'),
(841, 'Serpa', 'MS', NULL, NULL, NULL, NULL, '2024-05-17'),
(842, 'Navaux', 'POA', NULL, NULL, NULL, NULL, '2024-05-17'),
(843, 'Meneses', 'E', NULL, NULL, NULL, NULL, '2024-05-17'),
(844, 'Abdalah', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(845, 'Diener', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(846, 'Meneses Rojas', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(847, 'Rodríguez-Rojas', 'Oldemar', NULL, NULL, NULL, NULL, '2024-05-17'),
(848, 'Esteban', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(849, 'Rodrıguez', 'OR', NULL, NULL, NULL, NULL, '2024-05-17'),
(850, 'J Torres-Rojas', 'Francisco', NULL, NULL, NULL, NULL, '2024-05-17'),
(851, 'Bak', 'Seonmyeong', NULL, NULL, NULL, NULL, '2024-05-17'),
(852, 'Becker', 'Aaron', NULL, NULL, NULL, NULL, '2024-05-17'),
(853, 'Bhandarkar', 'Milind', NULL, NULL, NULL, NULL, '2024-05-17'),
(854, 'Bhat', 'Nitin', NULL, NULL, NULL, NULL, '2024-05-17'),
(855, 'Bohm', 'Eric', NULL, NULL, NULL, NULL, '2024-05-17'),
(856, 'Brunner', 'Robert', NULL, NULL, NULL, NULL, '2024-05-17'),
(857, 'Buch', 'Ronak', NULL, NULL, NULL, NULL, '2024-05-17'),
(858, 'Chakravorty', 'Sayantan', NULL, NULL, NULL, NULL, '2024-05-17'),
(859, 'Chandrasekar', 'Kavitha', NULL, NULL, NULL, NULL, '2024-05-17'),
(860, 'Choi', 'Jaemin', NULL, NULL, NULL, NULL, '2024-05-17'),
(861, 'Denardo', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(862, 'DeSouza', 'Jayant', NULL, NULL, NULL, NULL, '2024-05-17'),
(863, 'Diener', 'Matthias', NULL, NULL, NULL, NULL, '2024-05-17'),
(864, 'Dokania', 'Harshit', NULL, NULL, NULL, NULL, '2024-05-17'),
(865, 'Dooley', 'Isaac', NULL, NULL, NULL, NULL, '2024-05-17'),
(866, 'Fenton', 'Wayne', NULL, NULL, NULL, NULL, '2024-05-17'),
(867, 'Galvez', 'Juan', NULL, NULL, NULL, NULL, '2024-05-17'),
(868, 'Gioachin', 'Fillipo', NULL, NULL, NULL, NULL, '2024-05-17'),
(869, 'Gupta', 'Abhishek', NULL, NULL, NULL, NULL, '2024-05-17'),
(870, 'Gupta', 'Gagan', NULL, NULL, NULL, NULL, '2024-05-17'),
(871, 'Gursoy', 'Attila', NULL, NULL, NULL, NULL, '2024-05-17'),
(872, 'Harsh', 'Vipul', NULL, NULL, NULL, NULL, '2024-05-17'),
(873, 'Hu', 'Fang', NULL, NULL, NULL, NULL, '2024-05-17'),
(874, 'Huang', 'Chao', NULL, NULL, NULL, NULL, '2024-05-17'),
(875, 'Jagathesan', 'Narain', NULL, NULL, NULL, NULL, '2024-05-17'),
(876, 'Jetley', 'Pritish', NULL, NULL, NULL, NULL, '2024-05-17'),
(877, 'Kanakagiri', 'Raghavendra', NULL, NULL, NULL, NULL, '2024-05-17'),
(878, 'Koenig', 'Greg', NULL, NULL, NULL, NULL, '2024-05-17'),
(879, 'Krishnan', 'Sanjeev', NULL, NULL, NULL, NULL, '2024-05-17'),
(880, 'Kumar', 'Sameer', NULL, NULL, NULL, NULL, '2024-05-17'),
(881, 'Kunzman', 'David', NULL, NULL, NULL, NULL, '2024-05-17'),
(882, 'Lang', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(883, 'Lawlor', 'Orion', NULL, NULL, NULL, NULL, '2024-05-17'),
(884, 'Wai Lee', 'Chee', NULL, NULL, NULL, NULL, '2024-05-17'),
(885, 'Mahesh', 'Karthik', NULL, NULL, NULL, NULL, '2024-05-17'),
(886, 'Mendes', 'Celso', NULL, NULL, NULL, NULL, '2024-05-17'),
(887, 'Mei', 'Chao', NULL, NULL, NULL, NULL, '2024-05-17'),
(888, 'Mikida', 'Eric', NULL, NULL, NULL, NULL, '2024-05-17'),
(889, 'Mokos', 'Ryan', NULL, NULL, NULL, NULL, '2024-05-17'),
(890, 'Narayanan', 'Venkatasubrahmanian', NULL, NULL, NULL, NULL, '2024-05-17'),
(891, 'Nomura', 'Kevin', NULL, NULL, NULL, NULL, '2024-05-17'),
(892, 'Paranjpye', 'Sameer', NULL, NULL, NULL, NULL, '2024-05-17'),
(893, 'Ramachandran', 'Parthasarathy', NULL, NULL, NULL, NULL, '2024-05-17'),
(894, 'Ramkumar', 'Balkrishna', NULL, NULL, NULL, NULL, '2024-05-17'),
(895, 'Ramos', 'Evan', NULL, NULL, NULL, NULL, '2024-05-17'),
(896, 'Robson', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(897, 'Saboo', 'Neelam', NULL, NULL, NULL, NULL, '2024-05-17'),
(898, 'Saletore', 'Vikram', NULL, NULL, NULL, NULL, '2024-05-17'),
(899, 'Senthil', 'Karthik', NULL, NULL, NULL, NULL, '2024-05-17'),
(900, 'Shah', 'Nimish', NULL, NULL, NULL, NULL, '2024-05-17'),
(901, 'Shu', 'Wennie', NULL, NULL, NULL, NULL, '2024-05-17'),
(902, 'B Sinha', 'Amitabh', NULL, NULL, NULL, NULL, '2024-05-17'),
(903, 'Sura', 'Zehra', NULL, NULL, NULL, NULL, '2024-05-17'),
(904, 'Varadarajan', 'Krishnan', NULL, NULL, NULL, NULL, '2024-05-17'),
(905, 'Venkataraman', 'Ramprasad', NULL, NULL, NULL, NULL, '2024-05-17'),
(906, 'Wang', 'Jackie', NULL, NULL, NULL, NULL, '2024-05-17'),
(907, 'Wesolowski', 'Lukasz', NULL, NULL, NULL, NULL, '2024-05-17'),
(908, 'White', 'Sam', NULL, NULL, NULL, NULL, '2024-05-17'),
(909, 'Wilmarth', 'Terry', NULL, NULL, NULL, NULL, '2024-05-17'),
(910, 'Wright', 'Jeff', NULL, NULL, NULL, NULL, '2024-05-17'),
(911, 'Yelon', 'Joshua', NULL, NULL, NULL, NULL, '2024-05-17'),
(912, 'Jiménez', 'Diego', NULL, NULL, NULL, NULL, '2024-05-17'),
(913, 'Campos-Duarte', 'Luis', NULL, NULL, NULL, NULL, '2024-05-17'),
(914, 'Solano-Piedra', 'Ricardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(915, 'Alonso Araya-Solano', 'Luis', NULL, NULL, NULL, NULL, '2024-05-17'),
(916, 'Vargas', 'Iván', NULL, NULL, NULL, NULL, '2024-05-17'),
(917, 'Denis', 'Jonathan', NULL, NULL, NULL, NULL, '2024-05-17'),
(918, 'Massobrio', 'Renzo', NULL, NULL, NULL, NULL, '2024-05-17'),
(919, 'Nesmachnow', 'Sergio', NULL, NULL, NULL, NULL, '2024-05-17'),
(920, 'Cristóbal', 'Alfredo', NULL, NULL, NULL, NULL, '2024-05-17'),
(921, 'Tchernykh', 'Andrei', NULL, NULL, NULL, NULL, '2024-05-17'),
(922, 'Gamboa-Venegas', 'Carlos', NULL, NULL, NULL, NULL, '2024-05-17'),
(923, 'Pilla', 'LL', NULL, NULL, NULL, NULL, '2024-05-17'),
(924, 'C Calhoun', 'Jon', NULL, NULL, NULL, NULL, '2024-05-17'),
(925, 'van der Laat', 'Leonardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(926, 'M Mora', 'Mauricio', NULL, NULL, NULL, NULL, '2024-05-17'),
(927, 'Fco Pacheco', 'Javier', NULL, NULL, NULL, NULL, '2024-05-17'),
(928, 'Lesage', 'Philippe', NULL, NULL, NULL, NULL, '2024-05-17'),
(929, 'Castro', 'Jorge', NULL, NULL, NULL, NULL, '2024-05-17'),
(930, 'Rojas-Gómez', 'Mónica', NULL, NULL, NULL, NULL, '2024-05-17'),
(931, 'Pablo Jiménez-Madrigal', 'Jose', NULL, NULL, NULL, NULL, '2024-05-17'),
(932, 'Montero-Vargas', 'Maripaz', NULL, NULL, NULL, NULL, '2024-05-17'),
(933, 'Loaiza-Montoya', 'Randall', NULL, NULL, NULL, NULL, '2024-05-17'),
(934, 'Chavarría', 'Max', NULL, NULL, NULL, NULL, '2024-05-17'),
(935, 'J Fuchs', 'Eric', NULL, NULL, NULL, NULL, '2024-05-17'),
(936, 'Corneio-Surez', 'Guillermo', NULL, NULL, NULL, NULL, '2024-05-17'),
(937, 'Pacheco', 'Javier', NULL, NULL, NULL, NULL, '2024-05-17'),
(938, 'Mora', 'Mauricio', NULL, NULL, NULL, NULL, '2024-05-17'),
(939, 'Quirós-Corella', 'Fabricio', NULL, NULL, NULL, NULL, '2024-05-17'),
(940, 'Coto-Vílchez', 'F', NULL, NULL, NULL, NULL, '2024-05-17'),
(941, 'Vargas', 'VI', NULL, NULL, NULL, NULL, '2024-05-17'),
(942, 'Solano-Piedra', 'R', NULL, NULL, NULL, NULL, '2024-05-17'),
(943, 'Rojas-Quesada', 'MA', NULL, NULL, NULL, NULL, '2024-05-17'),
(944, 'Araya-Solano', 'LA', NULL, NULL, NULL, NULL, '2024-05-17'),
(945, 'Ramírez', 'AA', NULL, NULL, NULL, NULL, '2024-05-17'),
(946, 'Hernández-Cisneros', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(947, 'Pérez-Hidalgo', 'JE', NULL, NULL, NULL, NULL, '2024-05-17'),
(948, 'Köhn-Seemann', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(949, 'Cerdas', 'F', NULL, NULL, NULL, NULL, '2024-05-17'),
(950, 'Vílchez-Coto', 'F', NULL, NULL, NULL, NULL, '2024-05-17'),
(951, 'Jiménez', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(952, 'Campos-Duarte', 'L', NULL, NULL, NULL, NULL, '2024-05-17'),
(953, 'González-Vega', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(954, 'Arias', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(955, 'Youn Lee', 'So', NULL, NULL, NULL, NULL, '2024-05-17'),
(956, 'JL Baldares', 'Ronald', NULL, NULL, NULL, NULL, '2024-05-17'),
(957, 'J Chaves', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(958, 'Somarribas', 'Jose', NULL, NULL, NULL, NULL, '2024-05-17'),
(959, 'Olivas', 'Kimberly', NULL, NULL, NULL, NULL, '2024-05-17'),
(960, 'Cubero-Corella', 'Mariana', NULL, NULL, NULL, NULL, '2024-05-17'),
(961, 'Durán-Monge', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(962, 'Díaz', 'Warner', NULL, NULL, NULL, NULL, '2024-05-17'),
(963, 'Gómez-Campos', 'Steffan', NULL, NULL, NULL, NULL, '2024-05-17'),
(964, 'Calvo', 'Manfred', NULL, NULL, NULL, NULL, '2024-05-17'),
(965, 'Kohn', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(966, 'Garro-Vargas', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(967, 'López-Rodríguez', 'D', NULL, NULL, NULL, NULL, '2024-05-17'),
(968, 'Sánchez-Castro', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(969, 'Chatzikonstantis', 'George', NULL, NULL, NULL, NULL, '2024-05-17'),
(970, 'Strydis', 'Christos', NULL, NULL, NULL, NULL, '2024-05-17'),
(971, 'Sidiropoulos', 'Harry', NULL, NULL, NULL, NULL, '2024-05-17'),
(972, 'Soudris', 'Dimitrios', NULL, NULL, NULL, NULL, '2024-05-17'),
(973, 'Kitson', 'Joy', NULL, NULL, NULL, NULL, '2024-05-17'),
(974, 'Costello', 'Ian', NULL, NULL, NULL, NULL, '2024-05-17'),
(975, 'Chen', 'Jiangzhuo', NULL, NULL, NULL, NULL, '2024-05-17'),
(976, 'Hoops', 'Stefan', NULL, NULL, NULL, NULL, '2024-05-17'),
(977, 'Mortveit', 'Henning', NULL, NULL, NULL, NULL, '2024-05-17'),
(978, 'Yeom', 'Jae-Seung', NULL, NULL, NULL, NULL, '2024-05-17'),
(979, 'V Marathe', 'Madhav', NULL, NULL, NULL, NULL, '2024-05-17'),
(980, 'Herrera-Mora', 'Javier', NULL, NULL, NULL, NULL, '2024-05-17'),
(981, 'Rampp', 'Markus', NULL, NULL, NULL, NULL, '2024-05-17'),
(982, 'Laure', 'Erwin', NULL, NULL, NULL, NULL, '2024-05-17'),
(983, 'Blandino H', 'Oscar', NULL, NULL, NULL, NULL, '2024-05-17'),
(984, 'Abdalah', 'Mariela', NULL, NULL, NULL, NULL, '2024-05-17'),
(985, 'Soto', 'Cristina', NULL, NULL, NULL, NULL, '2024-05-17'),
(986, 'Arce', 'Melissa', NULL, NULL, NULL, NULL, '2024-05-17'),
(987, 'Cruz', 'Eduardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(988, 'Maciel', 'Jöao', NULL, NULL, NULL, NULL, '2024-05-17'),
(989, 'Clozato', 'Camila', NULL, NULL, NULL, NULL, '2024-05-17'),
(990, 'Pérez', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(991, 'Rivera-Alvarado', 'Ernesto', NULL, NULL, NULL, NULL, '2024-05-17'),
(992, 'HM Cruz', 'Eduardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(993, 'M Maciel', 'João', NULL, NULL, NULL, NULL, '2024-05-17'),
(994, 'S Serpa', 'Matheus', NULL, NULL, NULL, NULL, '2024-05-17'),
(995, 'OA Navaux', 'Philippe', NULL, NULL, NULL, NULL, '2024-05-17'),
(996, 'Alvarado', 'Daniel', NULL, NULL, NULL, NULL, '2024-05-17'),
(997, 'de la Ossa', 'Alvaro', NULL, NULL, NULL, NULL, '2024-05-17'),
(998, 'Frutos-Alfaro', 'Francisco', NULL, NULL, NULL, NULL, '2024-05-17'),
(999, 'Gómez', 'Carlos', NULL, NULL, NULL, NULL, '2024-05-17'),
(1000, 'González', 'Gabriel', NULL, NULL, NULL, NULL, '2024-05-17'),
(1001, 'Carballo', 'Alexander', NULL, NULL, NULL, NULL, '2024-05-17'),
(1002, 'Jaime Barrios Hernandez', 'Carlos', NULL, NULL, NULL, NULL, '2024-05-17'),
(1003, 'Rizzi', 'Silvio', NULL, NULL, NULL, NULL, '2024-05-17'),
(1004, 'Mocskos', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(1005, 'M Monsalve Diaz', 'Jose', NULL, NULL, NULL, NULL, '2024-05-17'),
(1006, 'Montoya', 'Javier', NULL, NULL, NULL, NULL, '2024-05-17'),
(1007, 'Amador Salas', 'Daniel', NULL, NULL, NULL, NULL, '2024-05-17'),
(1008, 'Zumbado', 'Manuel', NULL, NULL, NULL, NULL, '2024-05-17'),
(1009, 'Villalobos', 'Johansell', NULL, NULL, NULL, NULL, '2024-05-17'),
(1010, 'Kitson', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(1011, 'Costello', 'I', NULL, NULL, NULL, NULL, '2024-05-17'),
(1012, 'Chen', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(1013, 'Hoops', 'S', NULL, NULL, NULL, NULL, '2024-05-17'),
(1014, 'Mortveit', 'H', NULL, NULL, NULL, NULL, '2024-05-17'),
(1015, 'Yeom', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(1016, 'Marathe', 'M', NULL, NULL, NULL, NULL, '2024-05-17'),
(1017, 'Bhatele', 'A', NULL, NULL, NULL, NULL, '2024-05-17'),
(1018, 'Campos', 'Luis', NULL, NULL, NULL, NULL, '2024-05-17'),
(1019, 'H Rizzi', 'Silvio', NULL, NULL, NULL, NULL, '2024-05-17'),
(1020, 'Knobloch', 'Michael', NULL, NULL, NULL, NULL, '2024-05-17'),
(1021, 'Daoud', 'Nour', NULL, NULL, NULL, NULL, '2024-05-17'),
(1022, 'Asch', 'Christian', NULL, NULL, NULL, NULL, '2024-05-17'),
(1023, 'Gitler', 'Isidoro', NULL, NULL, NULL, NULL, '2024-05-17'),
(1024, 'Zumbado-Corrales', 'Manuel', NULL, NULL, NULL, NULL, '2024-05-17'),
(1025, 'Cornejo-Suárez', 'Guillermo', NULL, NULL, NULL, NULL, '2024-05-17'),
(1026, 'van-der-Laat', 'Leonardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(1027, 'Castro', 'Harold', NULL, NULL, NULL, NULL, '2024-05-17'),
(1028, 'Ramos-Pollan', 'Raul', NULL, NULL, NULL, NULL, '2024-05-17'),
(1029, 'Fco Pacheco Alvarado', 'Javier', NULL, NULL, NULL, NULL, '2024-05-17'),
(1030, 'Cornejo Suárez', 'Guillermo', NULL, NULL, NULL, NULL, '2024-05-17'),
(1031, 'van der Laat Muñoz', 'Leonardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(1032, 'Vargas-Blanco', 'VI', NULL, NULL, NULL, NULL, '2024-05-17'),
(1033, 'Sánchez', 'Castro', NULL, NULL, NULL, NULL, '2024-05-17'),
(1034, 'Asenjo', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(1035, 'Mora', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(1036, 'Meneses-Rojas', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(1037, 'Guillermo Cornejo', 'Luis', NULL, NULL, NULL, NULL, '2024-05-17'),
(1038, 'Law', 'Yuen', NULL, NULL, NULL, NULL, '2024-05-17'),
(1039, 'Mora', 'Rodolfo', NULL, NULL, NULL, NULL, '2024-05-17'),
(1040, 'Solano Piedra', 'Ricardo', NULL, NULL, NULL, NULL, '2024-05-17'),
(1041, 'Garro Vargas', 'Andreína', NULL, NULL, NULL, NULL, '2024-05-17'),
(1042, 'Jiménez Vargas', 'Diego', NULL, NULL, NULL, NULL, '2024-05-17'),
(1043, 'Köhn', 'Alf', NULL, NULL, NULL, NULL, '2024-05-17'),
(1044, 'Coto Vílchez', 'Federico', NULL, NULL, NULL, NULL, '2024-05-17'),
(1045, 'Iván Vargas Blanco', 'Víctor', NULL, NULL, NULL, NULL, '2024-05-17'),
(1046, 'Quesada', 'Rojas', NULL, NULL, NULL, NULL, '2024-05-17'),
(1047, 'Daniel López Rodríguez', 'Luis', NULL, NULL, NULL, NULL, '2024-05-17'),
(1048, 'Sánchez Castro', 'J', NULL, NULL, NULL, NULL, '2024-05-17'),
(1049, 'Asenjo', 'José', NULL, NULL, NULL, NULL, '2024-05-17'),
(1050, 'Mora', 'Jonathan', NULL, NULL, NULL, NULL, '2024-05-17'),
(1051, 'Arias-Méndez', 'Esteban', NULL, NULL, NULL, NULL, '2024-05-17'),
(1052, 'Calvo-Sánchez', 'Manfred', NULL, NULL, NULL, NULL, '2024-05-17'),
(1053, 'Pisciuneri', 'Patrick', NULL, NULL, NULL, NULL, '2024-05-17'),
(1054, 'Givi', 'Peyman', NULL, NULL, NULL, NULL, '2024-05-17');

--
-- Déchargement des données de la table `2025_editors`
--

INSERT INTO `2025_editors` (`id`, `name`) VALUES
(5, ''),
(13, 'John Wiley & Sons, Ltd.'),
(14, 'ACM'),
(15, 'IEEE'),
(16, 'Springer Berlin Heidelberg'),
(17, 'MDPI'),
(18, 'Springer US'),
(19, 'Springer International Publishing'),
(20, 'John Wiley & Sons, Inc.'),
(21, 'The Eurographics Association'),
(22, 'Berlin: Springer-Verlag, 1973-'),
(23, 'IRISA'),
(24, 'Springer-Verlag'),
(25, 'SAGE Publications'),
(26, 'Lavoisier'),
(27, 'John Wiley & Sons, Ltd'),
(28, 'ONERA, The French Aerospace Lab'),
(29, 'The MIT Press'),
(30, 'MIT Press, Cambridge'),
(31, 'South Ural State University'),
(32, 'ASFRA BV'),
(33, 'Association for Computing Machinery'),
(34, 'National Academies Press'),
(35, 'Elsevier'),
(36, 'IBM'),
(37, 'MIT, Cambridge'),
(38, 'Cambridge University Press'),
(39, 'IEEE Press & John Wiley'),
(40, 'Kluwer'),
(41, 'Nature Publishing Group UK'),
(42, 'Academic Press'),
(43, 'SAGE PUBLICATIONS INC'),
(44, 'North-Holland'),
(45, 'Lawrence Livermore National Lab.(LLNL), Livermore, CA (United States)'),
(46, 'Society for Industrial and Applied Mathematics'),
(47, 'SIAM'),
(48, 'SIAM SOCIETY FOR INDUSTRIAL AND APPLIED'),
(49, 'American Mathematical Soc.'),
(50, 'Springer'),
(51, 'Pergamon'),
(52, 'Springer Berlin/Heidelberg'),
(53, 'Tech. Rep. BU-CE-0506, Department of Computer'),
(54, 'CRC Press'),
(55, 'Tech. rep., CERFACS, ENS Lyon, INPT (ENSEEIHT)-IRIT, Inria, Mumps Technologies and University of Bordeaux'),
(56, 'Research Report RR-9321, Inria Research Centre Grenoble, Rhône-Alpes'),
(57, 'Tech. Report BU-CE-0413, Department of Computer Engineering, Bilkent University, Ankara, Turkey'),
(58, 'Aug'),
(59, 'Springer Netherlands'),
(60, 'Editorial Tecnológica de Costa Rica'),
(61, 'Springer Nature Switzerland'),
(62, 'Lawrence Livermore National Laboratory (LLNL), Livermore, CA (United States)'),
(63, 'Springer Nature'),
(64, 'Instituto Politécnico Nacional, Centro de Investigación en Computación'),
(65, 'Instituto Tecnológico de Costa Rica'),
(66, 'Editorial Tecnológica de Costa Rica (entidad editora)'),
(67, 'Instituto Tecnológico de Costa Rica. Vicerrectoría de Investigación y Extensión. Escuela de Ingeniería en Computación.'),
(68, 'IEEE International Work Conference on Bioinspired Intelligence (IWOBI)'),
(69, 'Instituto Tecnológico de Costa Rica. Escuela de Ingeniería en Computación.'),
(70, 'Instituto Tecnológico de Costa Rica. Escuela de Ingeniería en Computación');

--
-- Déchargement des données de la table `2025_links`
--

INSERT INTO `2025_links` (`id_publication`, `id_attachment`) VALUES
(1, 1),
(2, 6),
(3, 7),
(4, 8),
(5, 9),
(6, 10),
(7, 11),
(8, 12),
(9, 13),
(10, 14),
(11, 15),
(12, 16),
(13, 17),
(14, 18),
(15, 19),
(16, 20),
(17, 21),
(18, 22),
(19, 23),
(20, 24),
(21, 25),
(22, 26),
(23, 27),
(24, 28),
(25, 29),
(26, 30),
(27, 31),
(28, 32),
(29, 33),
(30, 34),
(31, 35),
(32, 36),
(33, 37),
(34, 38),
(35, 39),
(36, 40),
(37, 41),
(38, 42),
(39, 43),
(40, 44),
(41, 45),
(9, 46),
(42, 47),
(43, 48),
(44, 49),
(45, 50),
(46, 51),
(47, 52),
(48, 53),
(49, 54),
(50, 55),
(51, 56),
(52, 57),
(53, 58),
(54, 59),
(55, 60),
(56, 61),
(57, 62),
(58, 63),
(59, 64),
(60, 65),
(61, 66),
(62, 67),
(14, 68),
(63, 69),
(64, 70),
(65, 71),
(66, 72),
(67, 73),
(68, 74),
(69, 75),
(70, 76),
(71, 77),
(61, 78),
(72, 79),
(73, 80),
(74, 81),
(75, 82),
(76, 83),
(6, 84),
(77, 85),
(78, 86),
(79, 87),
(80, 88),
(81, 89),
(82, 90),
(83, 91),
(84, 92),
(85, 93),
(86, 94),
(87, 95),
(97, 95),
(98, 95),
(153, 95),
(181, 95),
(88, 96),
(89, 97),
(90, 98),
(91, 99),
(92, 100),
(93, 101),
(94, 102),
(95, 103),
(96, 104),
(99, 105),
(100, 106),
(101, 107),
(102, 108),
(103, 109),
(104, 110),
(105, 111),
(106, 112),
(107, 113),
(108, 114),
(109, 115),
(110, 116),
(111, 117),
(112, 118),
(113, 119),
(114, 120),
(115, 121),
(116, 122),
(117, 123),
(118, 124),
(119, 125),
(120, 126),
(121, 127),
(122, 128),
(123, 129),
(124, 130),
(125, 131),
(126, 132),
(127, 133),
(128, 134),
(129, 135),
(130, 136),
(131, 137),
(132, 138),
(133, 139),
(134, 140),
(135, 141),
(136, 142),
(137, 143),
(138, 144),
(139, 145),
(140, 146),
(141, 147),
(142, 148),
(143, 149),
(144, 150),
(145, 151),
(146, 152),
(147, 153),
(148, 154),
(149, 155),
(150, 156),
(151, 157),
(152, 158),
(154, 159),
(155, 160),
(156, 161),
(157, 162),
(158, 163),
(159, 164),
(160, 165),
(161, 166),
(162, 167),
(163, 168),
(164, 169),
(165, 170),
(166, 171),
(167, 172),
(168, 173),
(169, 174),
(170, 175),
(171, 176),
(172, 177),
(173, 178),
(174, 179),
(175, 180),
(176, 181),
(177, 182),
(178, 183),
(179, 184),
(180, 185),
(181, 186),
(182, 187),
(183, 188),
(184, 189),
(185, 190),
(186, 191),
(187, 192),
(188, 193),
(189, 194),
(190, 195),
(191, 196),
(192, 197),
(193, 198),
(194, 199),
(195, 200),
(196, 201),
(197, 202),
(198, 203),
(199, 204),
(200, 205),
(201, 206),
(202, 207),
(203, 208),
(204, 209),
(205, 210),
(206, 211),
(207, 212),
(208, 213),
(209, 214),
(210, 215),
(211, 216),
(212, 217),
(213, 218),
(214, 219),
(215, 220),
(216, 221),
(217, 222),
(218, 223),
(219, 224),
(220, 225),
(221, 226),
(222, 227),
(223, 228),
(224, 229),
(184, 230),
(225, 231),
(226, 232),
(227, 233),
(228, 234),
(229, 235),
(230, 236),
(231, 237),
(232, 238),
(233, 239),
(234, 240),
(235, 241),
(236, 242),
(237, 243),
(238, 244),
(239, 245),
(240, 246),
(241, 247),
(242, 248),
(243, 249),
(244, 250),
(245, 251),
(246, 252),
(247, 253),
(248, 254),
(249, 255),
(250, 256),
(251, 257),
(252, 258),
(253, 259),
(254, 260),
(255, 261),
(256, 262),
(257, 263),
(258, 264),
(259, 265),
(260, 266),
(261, 267),
(262, 268),
(263, 269),
(264, 270),
(265, 271),
(266, 272),
(267, 273),
(268, 274),
(269, 275),
(270, 276),
(271, 277),
(272, 278),
(273, 279),
(274, 280),
(275, 281),
(276, 282),
(277, 283),
(278, 284),
(279, 285),
(280, 286),
(281, 287),
(282, 288),
(283, 289),
(284, 290),
(285, 291),
(286, 292),
(287, 293),
(288, 294),
(289, 295),
(290, 296),
(291, 297),
(292, 298),
(293, 299),
(294, 300),
(295, 301),
(296, 302),
(297, 303),
(298, 304),
(299, 305),
(300, 306),
(301, 307),
(302, 308),
(303, 309),
(304, 310),
(305, 311),
(306, 312),
(307, 313),
(308, 314),
(309, 315),
(310, 316),
(311, 317),
(312, 318),
(313, 319),
(314, 320),
(315, 321),
(316, 322),
(317, 323),
(318, 324),
(319, 325),
(320, 326),
(321, 327),
(322, 328),
(323, 329),
(324, 330),
(325, 331),
(326, 332),
(327, 333),
(328, 334),
(329, 335),
(330, 336),
(331, 337),
(332, 338),
(333, 339),
(334, 340),
(335, 341),
(336, 342),
(337, 343),
(338, 344),
(339, 345),
(340, 346),
(341, 347),
(342, 348),
(343, 349),
(344, 350),
(345, 351),
(346, 352),
(347, 353),
(348, 354),
(349, 355),
(350, 356),
(351, 357),
(352, 358),
(353, 359),
(354, 360),
(355, 361),
(356, 362),
(357, 363),
(358, 364),
(359, 365),
(360, 366),
(361, 367),
(362, 368),
(363, 369),
(364, 370),
(365, 371),
(366, 372),
(367, 373),
(368, 374),
(369, 375),
(370, 376),
(371, 377),
(372, 378),
(373, 379),
(374, 380),
(375, 381),
(376, 382),
(377, 383),
(378, 384),
(379, 385),
(380, 386),
(381, 387),
(382, 388),
(383, 389),
(384, 390),
(385, 391),
(386, 392),
(387, 393),
(388, 394),
(389, 395),
(390, 396),
(391, 397),
(392, 398),
(393, 399),
(394, 400),
(395, 401),
(396, 402),
(397, 403),
(398, 404),
(399, 405),
(400, 406),
(401, 407),
(402, 408),
(403, 409),
(404, 410),
(405, 411),
(406, 412),
(407, 413),
(408, 414),
(409, 415),
(410, 416),
(411, 417),
(412, 418),
(413, 419),
(414, 420),
(415, 421),
(416, 422),
(417, 423),
(418, 424),
(419, 425),
(402, 426),
(420, 427),
(421, 428),
(422, 429),
(405, 430),
(423, 431),
(424, 432),
(425, 433),
(426, 434),
(427, 435),
(428, 436),
(394, 437),
(429, 438),
(430, 439),
(431, 440),
(432, 441),
(433, 442),
(434, 443),
(435, 444),
(436, 445),
(437, 446);

--
-- Déchargement des données de la table `2025_publications`
--

INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(1, 'Prise en compte de la mobilité logique de données en environnement paira pair', 'La mobilité de données est une propriété importante de certaines applications distribuées en pair-a-pair fortement dynamiques. Un avatar d’un jeu massivement multijoueur est en déplacement constant dans son monde virtuel. Les métadonnées d’un participanta un réseau social évoluent dans le temps. Si l’emplacementde ces entités dans la topologie pair-a-pair est déterminé en fonction de leurscaractéristiques sémantiques, les entités sont fréquemment amenéesa migrer de nœud en nœud. Cela impose de fortes contraintes d’adaptabilité au réseau logique sousjacent. Ce document présente un mécanisme permettant au systeme pair-a-pair de mieux s’ adaptera ce contexte fortement dynamique en anticipant la mobilité de la donnée grâcea l’analyse de ses caractéristiques sémantiques. Une évaluationdes gains via le simulateur Peersim est menée.', '', '0000-00-00', '2024-05-14', '', '', 5),
(2, 'How to bring together fault tolerance and data consistency to enable grid data sharing', ' This paper addresses the challenge of transparent data sharing within computing Grids built as cluster federations. On such platforms, the availability of storage resources may change in a dynamic way, often due to hardware failures. We focus on the problem of handling the consistency of replicated data in the presence of failures. We propose a software architecture which decouples consistency management from fault tolerance management. We illustrate this architecture with a case study showing how to design a consistency protocol using fault‐tolerant building blocks. As a proof of concept, we describe a prototype implementation of this protocol within JUXMEM, a software experimental platform for Grid data sharing, and we report on a preliminary experimental evaluation of the proposed approach. Copyright © 2006 John Wiley & Sons, Ltd.', 'Revue', '2006-11-01', '2024-05-14', 'Concurrency and Computation: Practice and Experience', '1705-1723', 13),
(3, 'Matchmaking in multi-player on-line games: studying user traces to improve the user experience', 'Designing and implementing a quality matchmaking service for Multiplayer Online Games requires an extensive knowledge of the habits, behaviors and expectations of the players. Gathering and analyzing traces of real games offers insight on these matters, but game server providers are very protective of such data in order to deter possible reuse by the competition and to prevent cheating. We circumvented this issue by gathering public data from a League of Legends server (information over more than 28 million game sessions). In this paper, we present our database which is freely available online, and we detail the analysis and conclusions we draw from this data regarding the expected requirements for the matchmaking service.', 'Livre', '2014-03-19', '2024-05-14', 'Proceedings of Network and Operating System Support on Digital Audio and Video Workshop', '7-12', 5),
(4, 'RelaxDHT: A churn-resilient replication strategy for peer-to-peer distributed hash-tables', 'DHT-based P2P systems provide a fault-tolerant and scalable means to store data blocks in a fully distributed way. Unfortunately, recent studies have shown that if connection/disconnection frequency is too high, data blocks may be lost. This is true for most of the current DHT-based systems\' implementations. To deal with this problem, it is necessary to build more efficient replication and maintenance mechanisms. In this article, we study the effect of churn on PAST, an existing DHT-based P2P system. We then propose solutions to enhance churn tolerance and evaluate them through discrete event simulation.', 'Revue', '2012-07-30', '2024-05-14', 'ACM Transactions on Autonomous and Adaptive Systems (TAAS)', '1-18', 14),
(5, 'Hybrid checkpointing for parallel applications in cluster federations', 'Cluster federations are attractive for executing applications like large scale code coupling. However faults may appear frequently in such architectures. Thus, checkpointing long-running applications is desirable to avoid to restart them from the beginning in the event of a node failure. To take into account the constraints of a cluster federation architecture, an hybrid checkpointing protocol is proposed. It uses global coordinated checkpointing inside clusters but only quasi-synchronous checkpointing techniques between clusters. The proposed protocol has been evaluated by simulation and fits well for applications that can be divided into modules with lots of communications within modules but few between them.', 'Conférence', '2004-04-19', '2024-05-14', 'IEEE International Symposium on Cluster Computing and the Grid, 2004. CCGrid 2004.', '773-782', 15),
(6, 'Large-scale deployment in P2P experiments using the JXTA distributed framework', ' The interesting properties of P2P systems (high availability despite peer volatility, support for heterogeneous architectures, high scalability, etc.) make them attractive for distributed computing. However, conducting large-scale experiments with these systems arises as a major challenge. Simulation allows only to partially model the behavior of P2P prototypes. Experiments on real testbeds encounter serious difficulty with large-scale deployment and control of peers. This paper shows how an optimized version of the JXTA Distributed Framework (JDF) can help deploying, configuring and controlling P2P experiments. We report on our experience in the context of our JuxMem JXTA-based grid data sharing service for various configurations.', 'Conférence', '2004-01-01', '2024-05-14', 'Euro-Par 2004 Parallel Processing: 10th International Euro-Par Conference, Pisa, Italy, August 31-September 3, 2004. Proceedings 10', '1038-1047', 16),
(7, 'Data warehousing process modeling from classical approaches to new trends: Main features and comparisons', 'The extract, transform, and load (ETL) process is at the core of data warehousing architectures. As such, the success of data warehouse (DW) projects is essentially based on the proper modeling of the ETL process. As there is no standard model for the representation and design of this process, several researchers have made efforts to propose modeling methods based on different formalisms, such as unified modeling language (UML), ontology, model-driven architecture (MDA), model-driven development (MDD), and graphical flow, which includes business process model notation (BPMN), colored Petri nets (CPN), Yet Another Workflow Language (YAWL), CommonCube, entity modeling diagram (EMD), and so on. With the emergence of Big Data, despite the multitude of relevant approaches proposed for modeling the ETL process in classical environments, part of the community has been motivated to provide new data warehousing methods that support Big Data specifications. In this paper, we present a summary of relevant works related to the modeling of data warehousing approaches, from classical ETL processes to ELT design approaches. A systematic literature review is conducted and a detailed set of comparison criteria are defined in order to allow the reader to better understand the evolution of these processes. Our study paints a complete picture of ETL modeling approaches, from their advent to the era of Big Data, while comparing their main characteristics. This study allows for the identification of the main challenges and issues related to the design of Big Data warehousing systems, mainly involving the lack of a generic design …', '', '2022-08-12', '2024-05-14', '', '113', 17),
(8, 'Aren: a popularity aware replication scheme for cloud storage', 'Delivering on-demand web content to end-users in order to carry out strict QoS metrics is not a trivial task for globally distributed network providers. This task becomes still harder when content popularity varies over the time and the SLA definitions have to include both transfer rate and latency metrics. Current worldwide content delivery approaches and datacenter infrastructures rely on cumbersome replication schemes that are agnostic to edge-network resources, and damage content provision. In this work we present AREN, an novel replication scheme for cloud storage on edge networks. AREN relies on a collaborative cache strategy and bandwidth reservation to adapt the replication degree according to strict SLA contracts and content popularity growth. We have evaluated the performances of replication schemes on edge networks using Caju, a content distribution system for edge networks. Compared to a non …', 'Conférence', '2012-12-17', '2024-05-14', '2012 IEEE 18th International Conference on Parallel and Distributed Systems', '189-196', 15),
(9, 'Blue Banana: resilience to avatar mobility in distributed MMOGs', 'Massively Multiplayer Online Games (MMOGs) recently emerged as a popular class of applications with millions of users. To offer acceptable gaming experience, such applications need to render the virtual world surrounding the player with a very low latency. However, current state-of-the-art MMOGs based on peer-to-peer overlays fail to satisfy these requirements. This happens because avatar mobility implies many data exchanges through the overlay. As state-of-the-art overlays do not anticipate this mobility, the needed data is not delivered on time, which leads to transient failures at the application level. To solve this problem, we propose Blue Banana, a mechanism that models and predicts avatar movement, allowing the overlay to adapt itself by anticipation to the MMOG needs. Our evaluation is based on large-scale traces derived from Second life. It shows that our anticipation mechanism decreases by 20 …', 'Conférence', '2010-06-28', '2024-05-14', '2010 IEEE/IFIP International Conference on Dependable Systems & Networks (DSN)', '171-180', 15),
(10, 'Churn-resilient replication strategy for peer-to-peer distributed hash-tables', ' DHT-based P2P systems provide a fault-tolerant and scalable mean to store data blocks in a fully distributed way. Unfortunately, recent studies have shown that if connection/disconnection frequency is too high, data blocks may be lost. This is true for most current DHT-based system’s implementations. To avoid this problem, it is necessary to build really efficient replication and maintenance mechanisms. In this paper, we study the effect of churn on an existing DHT-based P2P system such as DHash or PAST. We then propose solutions to enhance churn tolerance and evaluate them through discrete event simulations.', 'Livre', '2009-11-03', '2024-05-14', 'Symposium on Self-Stabilizing Systems', '485-499', 16),
(11, 'A hierarchical checkpointing protocol for parallel applications in cluster federations', 'Summary form only given. Code coupling applications can be divided into communicating modules, that may be executed on different clusters in a cluster federation. As a cluster federation comprises of a large number of nodes, there is a high probability of a node failure. We propose a hierarchical checkpointing protocol that combines a synchronized checkpointing technique inside clusters and a communication-induced technique between clusters. This protocol fits to the characteristics of a cluster federation (large number of nodes, high latency and low bandwidth networking technologies between clusters). A preliminary performance evaluation performed using a discrete event simulator shows that the protocol is suitable for code coupling applications.', 'Conférence', '2004-04-26', '2024-05-14', '18th International Parallel and Distributed Processing Symposium, 2004. Proceedings.', '211', 15),
(12, 'Building fault-tolerant consistency protocols for an adaptive grid data-sharing service', 'We address the challenge of sharing large amounts of numerical data within computing grids consisting of clusters federation. We focus on the problem of handling the consistency of replicated data in an environment where the availability of storage resources dynamically changes. We propose a software architecture which decouples consistency management from fault-tolerance management. We illustrate this architecture with a case study showing how to design a consistency protocol using fault-tolerant building blocks. As a proof of concept, we describe a prototype implementation of this protocol within JuxMem , a software experimental platform for grid data sharing, and we report on a preliminary experimental evaluation.', '', '2004-01-01', '2024-05-14', '', '15', 5),
(13, 'Gestion des données dans les grilles de calcul: support pour la tolérance aux fautes et la cohérence des données.', 'Les applications scientifiques d\'aujourd\'hui, telles les simulations de grands phénomènes naturels, requièrent une grande puissance de calcul ainsi qu\'une importante capacité de stockage. Les grilles de calcul apparaissent comme une solution permettant d\'atteindre cette puissance par la mise en commun de ressources de différentes organisations. Ces architectures présentent en revanche des caractéristiques rendant leur programmation complexe: elles sont dynamiques, hétérogènes, réparties à grande échelle. Cette thèse s\'intéresse aux problématiques liées à la conception d\'un service de partage de données pour les grilles de calcul. L\'objectif est de permettre un accès transparent aux données, en automatisant la localisation, le transfert, la gestion de la persistance et de la cohérence des données partagées. Nous nous sommes plus particulièrement concentrés sur la gestion de la cohérence et de la persistance des données en environnement dynamique. Dans un tel contexte, assurer la persistance nécessite la mise en place de mécanismes de tolérance aux fautes. Nous proposons une approche pour gérer conjointement ces deux aspects via une architecture logicielle multiprotocole permettant de coupler différents protocoles de cohérence avec différents mécanismes de tolérance aux fautes. Nous proposons une conception hiérarchique de cette architecture, adaptée à la topologie réseau des grilles de calcul. Ces contributions ont été mises en oeuvre au sein du service de partage de données pour grilles JUXMEM. Les expérimentations menées sur la grille expérimentale Grid\'5000 montrent que notre conception hiérarchique …', '', '2006-11-30', '2024-05-14', '', '', 5),
(14, 'GDS: An architecture proposal for a grid data-sharing service', ' Grid computing has recently emerged as a response to the growing demand for resources (processing power, storage, etc.) exhibited by scientific applications. We address the challenge of sharing large amounts of data on such infrastructures, typically consisting of a federation of node clusters. We claim that storing, accessing, updating and sharing such data should be considered by applications as an external service. We propose an architecture for such a service, whose goal is to provide transparent access to mutable data, while enhancing data persistence and consistency despite node disconnections or failures. Our approach leverages on weaving together previous results in the areas of distributed shared memory systems, peer-to-peer systems, and fault-tolerant systems.', 'Revue', '2006-01-01', '2024-05-14', 'Future Generation Grids: Proceedings of the Workshop on Future Generation Grids November 1–5, 2004, Dagstuhl, Germany', '133-152', 18),
(15, 'Caju: a content distribution system for edge networks', ' More and more, users store their data in the cloud. While the content is then retrieved, the retrieval has to respect quality of service (QoS) constraints. In order to reduce transfer latency, data is replicated. The idea is make data close to users and to take advantage of providers home storage. However to minimize the cost of their platform, cloud providers need to limit the amount of storage usage. This is still more crucial for big contents. This problem is hard, the distribution of the popularity among the stored pieces of data is highly non-uniform: several pieces of data will never be accessed while others may be retrieved thousands of times. Thus, the trade-off between storage usage and QoS of data retrieval has to take into account the data popularity. This paper presents our architecture gathering several storage domains composed of small-sized datacenters and edge devices; and it shows the …', 'Conférence', '2013-01-01', '2024-05-14', 'Euro-Par 2012: Parallel Processing Workshops: BDMC, CGWS, HeteroPar, HiBB, OMHI, Paraphrase, PROPER, Resilience, UCHPC, VHPC, Rhodes Islands, Greece, August 27-31, 2012. Revised Selected Papers 18', '13-23', 16),
(16, 'WiFi-direct simulation for INET in OMNeT++', 'Wi-Fi Direct is a popular wireless technology which is integrated in most of today\'s smartphones and tablets. This technology allows a set of devices to dynamically negotiate and select a group owner which plays the role access point. This important feature is the strength of Wi-Fi Direct and makes it more and more widely used in telecommunications networks. In this paper, we present the implementation of Wi-Fi Direct in the INET framework of OMNeT++. We have implemented the main procedures of Wi-Fi Direct such as discovery, negotiation and group formation. The implementation has been validated by two test scenarios which show the conformity of the implementation to the protocol specification.', 'Revue', '2016-09-15', '2024-05-14', 'arXiv preprint arXiv:1609.04604', '', 5),
(17, 'Device-to-device communications using Wi-Fi direct for dense wireless networks', 'Device-to-device (D2D) communications have been widely studied for traffic offloading in cellular networks. In this paper, we demonstrate that D2D communications can also be used to offload the Wi-Fi access point in a dense wireless network. Wi-Fi Direct, a popular wireless technology available in tablets and smartphones, is used to realize D2D communications. Clustering, power control and transmission scheduling techniques are applied to optimize the network performances. The simulation results show that a significant performance gain can be obtained with a download time reduction up to 30%.', 'Conférence', '2016-11-16', '2024-05-14', '2016 7th International Conference on the Network of the Future (NOF)', '1-3', 15),
(18, 'SPLAD: scattering and placing data replicas to enhance long-term durability', 'Distributed storage systems have to ensure data availability and durability despite the occurrence of failures. To do so, many of them rely on replication mechanisms: for each piece of data, several replicas are stored. We show that the layout of the data block copies on the nodes, chiefly the way the copies are scattered, has a major impact on the reparation speed and thus on the data loss ratio. In this paper, we propose SLPAD, an approach that provides the ability: (i) to finely tune the proportion of common content stored by the nodes; and (ii) to control the storage load distribution while creating new data block copies. We propose a simulation model that allows us to present a long-term study of the impact of the data block copies layout and the system load on the data loss ratio.', '', '2014-01-01', '2024-05-14', '', '23', 5),
(19, 'Puma: pooling unused memory in virtual machines for I/O intensive applications', 'With the advent of cloud architectures, virtualization has become a key mechanism. In clouds, virtual machines (VMs) offer both isolation and flexibility. This is the foundation of cloud elasticity, but it induces fragmentation of the physical resources, including memory. While each VM memory needs evolve during time, existing mechanisms used to dynamically adjust VMs memory are inefficient, and it is currently impossible to take benefit of the unused memory of VMs hosted by another host. In this paper we propose Puma, a mechanism that improves I/O intensive applications performance by providing the ability for a VM to entrust clean page-cache pages to other VMs having unsused memory. By reusing the existing page-cache data structures, Puma is very efficient to reclaim the memory lent to another VM. By being distributed, Puma increases the memory consolidation at the scale of a data center. In our …', 'Livre', '2015-05-26', '2024-05-14', 'Proceedings of the 8th ACM International Systems and Storage Conference', '1-11', 5),
(20, 'Repfd-using reputation systems to detect failures in large dynamic networks', 'Failure detection is a crucial service for dependable distributed systems. Traditional failure detector implementations usually target homogeneous and static configurations, as their performance relies heavily on the connectivity of each network node. In this paper we propose a new approach towards the implementation of failure detectors for large and dynamic networks: we study reputation systems as a means to detect failures. The reputation mechanism allows efficient node cooperation via the sharing of views about other nodes. Our experimental results show that a simple prototype of a reputation-based detection service performs better than other known adaptive failure detectors, with improved flexibility. It can thus be used in a dynamic environment with a large and variable number of nodes.', 'Conférence', '2015-09-01', '2024-05-14', '2015 44th International Conference on Parallel Processing', '91-100', 15),
(21, 'Towards a scalable refereeing system for online gaming', ' Refereeing for Massively Multiplayer Online Games (MMOGs) currently relies on centralized architectures, which facilitates cheat prevention but also prohibits MMOGs from scaling properly. Centralization limits the size of the virtual world as well as the number of players that evolve in it. The present paper shows that it is possible to design a peer-to-peer refereeing system that remains highly efficient, even on a large scale, both in terms of performance and in terms of cheat prevention. Simulations show that such a system scales easily to more than 30,000 nodes, while leaving less than 0.013% occurrences of cheating undetected on a mean total of 24,819,649 refereeing queries.', 'Revue', '2014-10-01', '2024-05-14', 'Multimedia systems', '579-593', 16),
(22, 'Predicting popularity and adapting replication of Internet videos for high-quality delivery', 'Content availability has become increasingly important for the Internet video delivery chain. To deliver videos with an outstanding availability and meet the increasing user expectations, content delivery networks (CDNs) must enforce strict QoS metrics, like bitrate and latency, through SLA contracts. Adaptive content replication has been seen as a promising way to achieve this goal. However, it remains unclear how to avoid waste of resources when strict SLA contracts must be enforced. In this work, we introduce Hermes, an adaptive replication scheme based on accurate predictions about the popularity of Internet videos. Simulations using popularity growth curves from YouTube traces suggest that our approach meets user expectations efficiently. Compared to a non-collaborative caching, Hermes reduces storage usage for replication by two orders of magnitude, and under heavy load conditions, it increases the …', 'Conférence', '2013-12-15', '2024-05-14', '2013 International Conference on Parallel and Distributed Systems', '412-419', 15),
(23, 'Gargamel: boosting DBMS performance by parallelising write transactions', 'Parallel transactions in distributed DBs incur high overhead for concurrency control and aborts. We propose an alternative approach by pre-serializing possibly conflicting transactions, and parallelizing non-conflicting update transactions to different replicas. Our system provides strong transactional guarantees. In effect, Gargamel partitions the database dynamically according to the update workload. Each database replica runs sequentially, at full bandwidth, mutual synchronisation between replicas remains minimal. Our simulations show that Gargamel improves both response time and load by an order of magnitude when contention is high (highly loaded system with bounded resources), and that otherwise slow-down is negligible.', 'Conférence', '2012-12-17', '2024-05-14', '2012 IEEE 18th International Conference on Parallel and Distributed Systems', '572-579', 15),
(24, 'Analysis of a stochastic model of replication in large distributed storage systems: A mean-field approach', 'Distributed storage systems such as Hadoop File System or Google File System (GFS) ensure data availability and durability using replication. Persistence is achieved by replicating the same data block on several nodes, and ensuring that a minimum number of copies are available on the system at any time. Whenever the contents of a node are lost, for instance due to a hard disk crash, the system regenerates the data blocks stored before the failure by transferring them from the remaining replicas. This paper is focused on the analysis of the efficiency of replication mechanism that determines the location of the copies of a given file at some server. The variability of the loads of the nodes of the network is investigated for several policies. Three replication mechanisms are tested against simulations in the context of a real implementation of a such a system: Random, Least Loaded and Power of Choice. The …', 'Revue', '2017-06-13', '2024-05-14', 'Proceedings of the ACM on Measurement and Analysis of Computing Systems', '1-21', 14),
(25, 'Move: Design of an application-malleable overlay', 'Peer-to-peer overlays allow distributed applications to work in a wide-area, scalable, and fault-tolerant manner. However, most structured and unstructured overlays present in literature today are inflexible from the application viewpoint. In other words, the application has no control over the structure of the overlay itself. This paper proposes the concept of an application-malleable overlay, and the design of the first malleable overlay which we call MOve. In MOve, the communication characteristics of the distributed application using the overlay can influence the overlay\'s structure itself, with the twin goals of (1) optimizing the application performance by adapting the overlay, while also (2) retaining the large scale and fault tolerance of the overlay approach. The influence could either be explicitly specified by the application or implicitly gleaned by our algorithms. Besides neighbor list membership management, MOve …', 'Conférence', '2006-10-02', '2024-05-14', '2006 25th IEEE Symposium on Reliable Distributed Systems (SRDS\'06)', '355-364', 15),
(26, 'SDN-based Wi-Fi Direct clustering for cloud access in campus networks', ' Mobile cloud is changing the way to enroll teaching activities in a university campus. Lectures and lab sessions can be carried out directly from tablets in a classroom by accessing a server in the cloud. In this paper, we address the problem of high-density cloud access with wireless devices in campus networks. We propose to use Wi-Fi direct clustering to solve the problem of quality of service (QoS) degradation when a high number of wireless devices want to access a content in the cloud at the same time. A centralized software-defined network controller is used in our proposed architecture to capture the network state and organize the Wi-Fi Direct groups. The optimized number of clusters can be calculated in function of the number of devices in the room. By simulations, we show that we can provide a better QoS in terms of download time and application’s throughput by reducing the interference in this …', 'Revue', '2018-04-01', '2024-05-14', 'Annals of Telecommunications', '239-249', 19),
(27, 'Scattering and placing data replicas to enhance long-term durability', 'Distributed storage systems have to ensure data availability and durability despite the occurrence of failures. To do so, many of them rely on replication mechanisms. We show that the layout of the data block copies on the nodes, chiefly the way the copies are scattered, has a major impact on the reparation speed and thus on the data loss ratio. In this paper, we propose an approach that provides the ability: (i) to finely tune the proportion of common content stored by the nodes, and (ii) to control the storage load distribution while creating new data block copies. We propose a simulation model that allows us to present a long-term study of the impact of the data block copies layout and the system\'s storage load on the data loss ratio.', 'Conférence', '2015-09-28', '2024-05-14', '2015 IEEE 14th International Symposium on Network Computing and Applications', '226-229', 15),
(28, 'Extending the entry consistency model to enable efficient visualization for code-coupling grid applications', 'This paper addresses the problem of efficient visualization of shared data within code coupling grid applications. These applications are structured as a set of distributed, autonomous, weakly-coupled codes. We focus on the case where the codes are able to interact using the abstraction of a shared data space. We propose an efficient visualization scheme by adapting the mechanisms used to maintain the data consistency. We introduce a new operation called relaxed read, as an extension to the entry consistency model. This operation can efficiently take place without locking, in parallel with write operations. We discuss the benefits and the constraints of the proposed approach.', 'Conférence', '2006-05-16', '2024-05-14', 'Sixth IEEE International Symposium on Cluster Computing and the Grid (CCGRID\'06)', '4 pp.-560', 15),
(29, 'Move: design and evaluation of a malleable overlay for group-based applications', 'While peer-to-peer overlays allow distributed applications to scale and tolerate failures, most structured and unstructured overlays in literature today are inflexible from the application viewpoint. The application thus has no first-class control on the overlay structure. This paper proposes the concept of an application-malleable overlay, and the design of the first malleable overlay which we call MOve. MOve is targeted at group- based applications, e.g., collaborative applications. In MOve, the communication characteristics of the distributed application using the overlay can influence the overlay\'s structure itself, with the twin goals of (1) optimizing the application performance by adapting the overlay, while also (2) retaining the large scale and fault tolerance of the overlay approach. Besides neighbor list membership management, MOve also contains algorithms for resource discovery, update propagation, and churn …', 'Revue', '2007-09-01', '2024-05-14', 'IEEE Transactions on Network and Service Management', '107-116', 15),
(30, 'A multi-layer modeling for the generation of new architectures for big data warehousing', 'With the explosion of new data processing and storage technologies nowadays, businesses are looking to harness the hidden value of data, each in their own way. Many contributions were proposed defining pipelines dedicated to Big Data processing and storage, but they target usually particular types of data and specific technologies to meet precise needs without considering the evolution of requirements or the data characteristics’ change. Thus, no approach has defined a generic architecture for Big Data warehousing process. In this paper, we propose a multi-layer model that integrates all the necessary elements and concepts in the different phases of a data warehousing process. It also contributes to generate an architecture that considers the specificity of data and applications and the suitable technologies. To illustrate our contribution, we have implemented the proposed model through a Business model …', 'Livre', '2022-03-31', '2024-05-14', 'International Conference on Advanced Information Networking and Applications', '204-218', 19),
(31, 'Boosting streaming video delivery with wisereplica', ' Streaming video consumption has risen sharply over the last years. It has not only reshaped the Internet traffic, it has also changed the manner of watching videos. Users are progressively moving from the old-fashioned scheduled television to video-on-demand (VoD) services. As broadcasting future seems to be online, customers have become more sensitive to VoD quality, expecting ever-higher bitrates and lower rebuffering. In this context, average bitrate is a key quality of service (QoS) metric. Therefore, content delivery networks (CDNs) and content providers must be committed to enforce average bitrate through service-level agreement (SLA) contracts. Adaptive content replication is a promising technique towards this goal. However, this still offers a major challenge for CDN providers, particularly as they aim to avoid waste of resources. In this work, we introduce WiseReplica, an adaptive replication …', 'Revue', '2015-01-01', '2024-05-14', 'Transactions on Large-Scale Data-and Knowledge-Centered Systems XX: Special Issue on Advanced Techniques for Big Data Management', '34-58', 16),
(32, 'Performing accurate simulations for deadline-aware applications', 'One of the most appealing aspects of cloud computing is its potential capacity of offering customized services for clients through Service Level Agreement (SLA) contracts. Emerging cloud providers are intended to provide services whose performance targets are defined by precise data transfer deadlines. Yet, enforcing strict transfer rates for cloud-like applications is not simple. This has caught system designers and analysts\' interest, and drawn their attention to study and evaluate the performance of deadline-aware applications. In order to address the increasing demand for performance evaluation tools for deadline-aware simulations, we present a bandwidth scheduling component for the PeerSim simulator. Our component provides a lightweight and accurate fair-sharing of bandwidth and rate control enforcement. We assume a simple approach that does not reproduce in-depth transport protocol behaviour …', 'Conférence', '2013-07-01', '2024-05-14', '2013 International Conference on High Performance Computing & Simulation (HPCS)', '65-71', 15),
(33, 'Scalability and availability for massively multiplayer online games', 'MMOGs (Massively Multiplayer Online Games) are getting ever more popular, but current game server architectures do not scale with the number of players. Instead of addressing the issue, the most common workaround in the industry is to use multiple distinct and non communicating game servers. After a brief overview of existing game server architectures and methods to distribute server load, this position paper outlines another kind of architecture that should scale and discusses the difficulty of evaluating game platforms on a large scale.', 'Conférence', '2015-09-07', '2024-05-14', '11th European Dependable Computing Conference (EDCC 2015)', '', 5),
(34, 'POPS: a popularity-aware live streaming service', 'Live streaming has become very popular. Many systems, such as justin.tv, have emerged. They aim to collect user live-streams and serve them to the viewers using broadcasting servers. However, the huge variation in the total number of viewers and the great heterogeneity among streams popularity generally implies over-provisioning, leading to an important resource waste. In this paper, we show that there is a trade-off between the number of servers involved to broadcast the streams and the bandwidth usage among the servers. We also stress the importance to predict streams popularity in order to efficiently place them on the servers. We propose POPS: a live streaming service using popularity predictions to map live-streams on the servers.', 'Conférence', '2014-12-16', '2024-05-14', '2014 20th IEEE International Conference on Parallel and Distributed Systems (ICPADS)', '710-717', 15),
(35, 'A grid based distributed cooperative environment for health care research', ' Providing a distributed cooperative environment is a challenging task, which requires a middleware infrastructure that provides, among others, management of distributed shared data, synchronization, consistency, recovery, security and privacy support. In this paper, we present the ECADeG project which proposes a layered architecture for developing distributed cooperative environments running on top of a desktop grid middleware that can encompass multiple organizations. We also present a particular cooperative environment for supporting scientific research focused on the health domain. It uses the services supplied by the ECADeG architecture in order to allow researchers to share access to multiple institutions databases, visualize and analyze data by means of data mining techniques, edit research documents cooperatively, exchange information through forums and chats, etc.. Such a rich …', 'Conférence', '2013-01-01', '2024-05-14', 'Foundations of Health Information Engineering and Systems: Second International Symposium, FHIES 2012, Paris, France, August 27-28, 2012. Revised Selected Papers 2', '142-150', 16),
(36, 'Candor: Consistency aware dynamic data replication', 'Data management has become crucial. More and more distributed data management solutions arise, e.g. Casandra or Cosmos DB. Some of them propose multiple consistency protocols. Thus, for each piece of data, the developer can choose a consistency protocol adapted to his needs. In this paper we explain why taking the consistency protocol into account is important while replicating data; and we propose CAnDoR, an approach that dynamically adapts the replication according to the data usage (read/write frequencies and locations) and the consistency protocol used to manage the piece of data. Our simulations show that using CAnDoR to place and move data copies can improve the global average access latency by up to 40%.', 'Conférence', '2019-09-26', '2024-05-14', '2019 IEEE 18th International Symposium on Network Computing and Applications (NCA)', '1-5', 15),
(37, 'Toward heterogeneity-aware device-to-device data dissemination over Wi-Fi networks', 'In the last few years, there has been an explosive growth of the number of mobile devices. This has come with a plethora of new applications and usages. Among these new usages, there are many occasions for which a content has to be disseminated to a large number of mobile devices (e.g., large-scale events providing a multi-media support, video streaming, \\ldots). To cope with network bandwidth limitations, new approaches, leveraging device-to-device (D2D) communications have emerged. Obviously, one of the main problem that D2D-based approaches have to face is the energy consumption. Furthermore, there is usually a huge heterogeneity among the devices: some may benefit of a good, fully charged battery while others may have only a couple of hours left before a power failure; the network bandwidth can also differ a lot. In this paper, based on a previous work, we propose an approach to take into …', 'Conférence', '2017-12-15', '2024-05-14', '2017 IEEE 23rd International Conference on Parallel and Distributed Systems (ICPADS)', '105-112', 15),
(38, 'ACDC: Advanced consolidation for dynamic containers', 'The thriving success of the Cloud Industry greatly relies on the fact that virtual resources are as good as bare metal resources when it comes to ensuring a given level of quality of service. Thanks to the isolation provided by virtualisation techniques based on hypervisors, a big physical resource can be spatially multiplexed into smaller virtual resources which are easier to sell. Unfortunately, virtual machines have quickly shown their limit in terms of temporal multiplexing. It has been demonstrated that reclaiming the unused memory of a VM is a tedious task, infeasible in production. Today, containerization opens up a wide range of multiplexing opportunities that were not accessible through machine virtualization. However, in this article, we demonstrate, through a reproducible experiment, that the current implementation of memory consolidation can deteriorate the performance of applications deployed in Linux kernel …', 'Conférence', '2017-10-30', '2024-05-14', '2017 IEEE 16th International Symposium on Network Computing and Applications (NCA)', '1-8', 15),
(39, 'Edwin: Leveraging device-to-device communications for efficient data dissemination over wi-fi networks', 'An emerging usage is to rely on mobile devices (Smartphones or tablets) for large-scale events. They can be used for many applications like live voting or chatting, but also to access all the data related to an event. However, in such case, handling mobile devices trying to access data simultaneously is difficult. A Wi-Fi access point can only handle a limited amount of devices. Current solutions, relying on pre-loading data on the devices or over-sizing the network equipments are not satisfying and are not even always possible. We propose an approach that leverages the capability of mobile devices to interact directly through device-to-device (D2D) communications. Our solution can be tuned to choose the right level of parallelization to cope with radio interferences, it also provides the ability to adjust the trade-off between efficiency and energy consumption. We evaluate our approach using a discrete event simulator …', 'Conférence', '2017-03-27', '2024-05-14', '2017 IEEE 31st International Conference on Advanced Information Networking and Applications (AINA)', '228-235', 15),
(40, 'POPS: service de diffusion de flux vidéos live prenant en compte la popularité', 'La diffusion en direct (live) de flux vidéos est devenue très populaire. De nombreux systèmes, comme justin. tv ou YouTube, collectent des flux vidéos live et les diffusent à des utilisateurs spectateurs en utilisant un ensemble de serveurs. Cependant, le nombre de spectateurs varie considérablement dans le temps et la distribution de la popularité parmi les flux est extrêmement hétérogène. Cela amène les fournisseurs de service à utiliser des plateformes surdimensionnées afin d’absorber les pics de spectateurs. Dans ce papier, en nous appuyant sur des traces de justin. tv et de YouTube, nous étudions le compromis entre le nombre de serveurs provisionnés et l’utilisation de la bande passante entre ces serveurs. Nous mettons également en évidence l’importance de pouvoir prédire la popularité des flux afin de les placer efficacement sur les serveurs. Nous proposons POPS: un service de diffusion en direct de flux videos se basant sur des prédictions de popularité.', 'Revue', '2014-04-22', '2024-05-14', 'French Conference ComPAS', '5', 5),
(41, 'Peer‐to‐Peer Storage', ' This chapter contains sections titled:   Introduction   BitTorrent   Gnutella   Conclusion   Bibliography  ', 'Revue', '2013-02-28', '2024-05-14', 'Distributed Systems: Design and Algorithms', '59-80', 20),
(42, 'Using failure injection mechanisms to experiment and evaluate a grid failure detector', ' Computing grids are large-scale, highly-distributed, often hierarchical, platforms. At such scales, failures are no longer exceptions, but part of the normal behavior. When designing software for grids, developers have to take failures into account. It is crucial to make experiments at a large scale, with various volatility conditions, in order to measure the impact of failures on the whole system. This paper presents an experimental tool allowing the user to inject failures during a practical evaluation of fault-tolerant systems. We illustrate the usefulness of our tool through an evaluation of a hierarchical grid failure detector.', 'Conférence', '2007-01-01', '2024-05-14', 'High Performance Computing for Computational Science-VECPAR 2006: 7th International Conference, Rio de Janeiro, Brazil, June 10-13, 2006, Revised Selected and Invited Papers 7', '610-621', 16),
(43, 'Towards a semantic model for wise systems-a graph matching algorithm', 'Wise systems refer to distributed communicating software objects, which we named Wise Objects, able to autonomously learn how they behave and how they are used. They are designed to be associated either with software or physical objects (eg, home automation) to adapt to end users while demanding little attention from them. Construction of such systems requires at least two views: on one hand, a conceptual view relying on knowledge given by developers to either control or specify the expected system behavior. On the other hand, wise systems are provided with mechanisms to generate their own view based on behavior-related knowledge acquired during their learning processes. The problem is that, while a conceptual view is understandable by humans (ie, developers, end users, etc.), a view generated by a software system contains mainly numerical information with mostly no meaning for humans. In this paper, we address the issue of how to relate both views using two state-based formalisms: Input Output Symbolic Transition Systems for conceptual views and State Transition Graphs for views generated by the wise systems. Our proposal is to extend the generated knowledge with the conceptual knowledge using a matching algorithm founded on graph morphism. This provides the ability to make wise systems’ generated knowledge understandable by humans and to enable human evaluation of wise systems’ outputs.', 'Revue', '2022-11-12', '2024-05-14', 'ADVCOMP 2022, The Sixteenth International Conference on Advanced Engineering Computing and Applications in Sciences', '27-34', 5),
(44, 'A New Software Architecture for the Wise Object Framework: Multidimensional Separation of Concerns.', 'Adaptive systems represent an appropriate solution to the increasing complexity of software-intensive systems. We constructed a Wise Object Framework to develop self-adaptive software systems we name “Wise systems”. Those consist of distributed communicating software objects (Wise Objects) able to autonomously learn on how they behave and how they are used while demanding little attention from their users. A WO is either delivering a service (Awake state) or simulating its operation to learn behavior that has not occurred yet (Dream state). In its first version, WO architecture has been designed on the basis of a single component embedding built-in mechanisms for data monitoring and analysis. This architecture has major drawbacks we encountered when using WOF to develop new applications:(1) built-in mechanisms embedded within the WO do not allow using data by other components such as new analyzers,(2) raw data and data resulting from analysis in Awake or Dream states are not distinguished,(3) mandatory components to self-adaptation are missing especially those for action plan construction and execution. In this paper, we address those limitations through a MAPEK compliant architecture, based on the Separation of Concerns (SoC) and an event-driven publish/subscribe mechanism. This is related to the general issue of wise system maintenance, reuse and evolution. Separation of Concerns is done according to different dimensions that are managed using hyperslicing techniques.', 'Conférence', '2022-07-11', '2024-05-14', 'ICSOFT', '567-574', 5),
(45, 'How to use the past to face the future?', 'Large-scale distributed systems are highly dynamic: nodes may crash, messages may be delayed or lost, new nodes may join, virtual machines may migrate... The workload may also vary a lot depending on the users or applications behavior. Thus, distributed systems and services must adapt continuously in order to remain efficient. To do so, distributed systems usually monitor their environment and maintain a knowledge of what has happened (e.g., heartbeats time-stamps for a failure detection mechanism, data access statistics for a distributed storage systems, etc.). Based on these observations, a distributed system can decide to adapt to better tackle future situations (migrate a virtual machine, create a new data replica, etc.). However, even if a system has a full event log, it is not a trivial task to decide how much and which part of the past must be taken into account. In this paper we propose and study the impact of multiple approaches, from \"full-memory\" to \"no-memory\" through \"time-window\" and \"fading-memory\" based strategies.', '', '2020-01-01', '2024-05-14', '', '', 5),
(46, 'Vers un cache réparti adapté au cloud computing', 'Composer plusieurs infrastructures fournies en tant que service (IaaS) pour former une plate-forme virtualisée (PaaS) nécessite l\'introduction d\'un mécanisme de cache permettant d\'offrir certaines garanties en termes de performances et de cohérence à l\'utilisateur. Les caches répartis permettent d\'offrir ce type de service et sont particulièrement bien adaptés aux environnements distribués, surtout lorsqu\'ils offrent une faible latence réseau. Bien souvent, ces caches répartis sont associés à des systèmes de fichiers répartis ou sont implantés au niveau applicatif, nécessitant d\'adapter les applications existantes, ce qui n\'est pas compatible avec la philosophie du cloud. Cet article propose une approche générique pour développer un cache réparti en l\'intégrant directement dans le noyau Linux, ce qui permet d\'ap- porter le niveau de généricité dont les clouds ont besoin. Nous avons implémenté un prototype de cache réparti utilisant cette approche. Notre évalation des performances montre que nous pouvons multiplier par 6 le débit lors de lectures aléatoires.', 'Conférence', '2013-01-16', '2024-05-14', 'Conférence d\'informatique en Parallélisme, Architecture et Système (ComPAS\'2013)-9ème Conférence Française sur les Systèmes d\'Exploitation (CFSE\'13)', '1-12', 5);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(47, 'A practical evaluation of a data consistency protocol for efficient visualization in grid applications', ' Data visualization is important in the context of grid applications, especially when successive refinements are iteratively realized based on intermediate results. We mainly focus on code coupling grid applications, structured as a set of distributed, autonomous, weakly-coupled codes. We consider the case where the codes are able to interact using the abstraction of a shared data space. In previous work, we have proposed an efficient visualization scheme by introducing a new operation called relaxed read, as an extension to the entry consistency model. This operation can efficiently take place without locking, in parallel with write operations. On the other hand, the user has to relax the consistency constraints, and accept slightly older versions of the data, whose “freshness” can however still be controlled. In this paper, we discuss and extensively evaluate the proposed consistency protocol, whose efficiency …', 'Livre', '2006-06-10', '2024-05-14', 'International Conference on High Performance Computing for Computational Science', '692-706', 16),
(48, 'Conception et évaluation d\'un protocole de reprise d\'applications paralèlles dans une fédération de grappes de calculateurs', 'Ce document présente le compte-rendu d\'une étude sur la reprise d\'applications parallèles dans les fédérations de grappes de calculateurs. Les protocoles de l\'état de l\'art ne passent pas à l\'échelle. Ce doccument décrit un protocole hiérarchique de points de reprise / recouvrement arrière qui combine une technique de points de reprise coordonnés au sein d\'une grappe et une technique de points de reprise induits par les communications entre les grappes. En premier lieu, il présente un aperçu des techniques de reprises d\'applications parallèles existantes ainsi qu\'une discussion sur ces dernières. Ensuite, une réflexion sur la prise en compte de l\'architecture particulière des fédérations de grappes de calculateurs est menée. Cette réflexion aboutie à la proposition d\'un protocole de tolérance aux défaillances adapté. Ce protocole est présenté et analysé au travers d\'exemples. Une étude des performances du protocole proposé est menée à l\'aide d\'un simulateur à évènements discrets.', '', '2003-01-01', '2024-05-14', '', '66', 5),
(49, 'A Graph Matching Algorithm to extend Wise Systems with Semantic', 'Software technology has exponentially evolved leading to the development of intelligent applications using artificial intelligence models and techniques. Such development impacts all scientific and social fields: home automation, medicine, communication, etc. To make those new applications useful to a larger number of people, researchers are working on how to integrate artificial intelligence into real world while respecting the notion of calm technology. This paper fits in the context of the development of intelligent systems termed “wise systems” that aim at satisfying the calm technology requirement. Those systems are based on the concept of “Wise Object”: a software entity – object, service, component, application, etc. – able to learn by itself how it is expected to behave and how it is used by a human or another software entity. During its learning process, a Wise Object constructs a graph that represents its …', 'Conférence', '2023-09-17', '2024-05-14', '2023 18th Conference on Computer Science and Intelligence Systems (FedCSIS)', '411-420', 15),
(50, 'Outil interactif pour l\'alignement de la vue client-opérateur sur les architectures de réseau', 'Dans cet article, nous proposons le développement d\'un outil interactif qui permette aux opérateurs et leurs clients de visualiser les topologies de réseaux multi-couches et des les extraire dans le langage déclaratif YANG développé par l\'IETF. Afin de réduire les délais de déploiement, qui peuvent venir d\'une distance entre les clients et l\'opérateur-compétences techniques variées, vocabulaire-, nous proposons (a) un module pour décrire les données nécessaires à la visualisation des topologies, et (b) une mise en oeuvre sous forme d\'une interface web pour la visualisation interactive de graphes multi-couches, adaptée aux topologies réseaux.', 'Conférence', '2023-05-22', '2024-05-14', 'CoRes 2023-8èmes Rencontres Francophones sur la Conception de protocoles, l\'évaluation de performances et l\'expérimentation de Réseaux de communication', '', 5),
(51, 'A Graph Matching Algorithm to Extend Software Wise Systems with Human Semantic', 'A Graph Matching Algorithm to Extend Software Wise Systems with Human Semantic - Archive \nouverte HAL Accéder directement au contenu Documentation FR Français (FR) Anglais (EN) \nSe connecter HAL science ouverte Recherche Loading... Recherche avancée Information de \ndocuments Titres Titres Sous-titre Titre de l\'ouvrage Titre du volume (Série) Champ de \nrecherche par défaut (multicritères) + texte intégral des PDF Résumé Texte intégral indexé des \ndocuments PDF Mots-clés Type de document Sous-type de document Tous les identifiants du \ndocument Identifiant HAL du dépôt Langue du document (texte) Pays (Texte) Ville À paraître \n(true ou false) Ajouter Auteur Auteur (multicritères) Auteur (multicritères) Auteur : Nom complet \nAuteur : Nom de famille Auteur : Prénom Auteur : Complément de nom, deuxième prénom \nAuteur : Organisme payeur Auteur : IdHal (chaîne de caractères) Auteur : Fonction Auteur …', 'Revue', '2023-01-01', '2024-05-14', 'International Journal On Advances in Software', '59--70', 5),
(52, 'Gestion dynamique du cache entre machines virtuelles', 'PUMA est un mécanisme de cache réparti intégré au noyau Linux qui permet de mutualiser la mémoire inutilisée de machines virtuelles (MVs) pour améliorer les performances des applications intensives en entrées/sorties (E/S). Dans le design initial que nous avons proposé, la configuration de PUMA était essentiellement statique, la quantité de mémoire prêtée par un noeud était difficilement modifiable en cas de variation de charge sur l\'un des noeud. Dans cet article, nous proposons plusieurs mécanismes permettant à PUMA d\'ajuster dynamiquement la quantité de mémoire prêtée aux MVs en fonction des besoins. Nos évaluations, reposant sur des lectures aléatoires et des allocations de mémoire, montrent que PUMA est capable d\'ajuster son activité et la quantité de mémoire prêtée à d\'autres noeuds pour éviter de dégrader les performances. Comparé à une approche à de type ballooning automatique, PUMA est capable de récupérer 10 fois plus rapidement la mémoire allouée.', 'Conférence', '2015-06-30', '2024-05-14', 'Conférence d\'Informatique en Parallélisme, Architecture et Système', '1-10', 5),
(53, 'Conception et évaluation d\'un système de cache réparti adapté aux environnements virtualisés.', 'Certaines applications, comme les serveurs d’e-commerce, effectuent beaucoup d’opérations d’entrée/sortie (E/S) sur disque. Leurs performances sont étroitement liées à l’efﬁcacité de ces opérations. Pour les améliorer, les systèmes d’exploitation tels que Linux utilisent la mémoire libre pour fournir des mécanismes de cache. Cependant, les ressources d’aujourd’hui sont virtualisées: par exemple, dans les clouds, les machines virtuelles (MV) peuvent être déployées et déplacées entre les hôtes physiques pour offrir à la fois isolation et ﬂexibilité. Ceci implique un partitionnement des ressources physiques, dont la mémoire. Ce partitionnement limite la quantité de mémoire disponible qu’une MV peut utiliser comme cache. Dans cet article, nous proposons PUMA, un mécanisme de cache distant qui permet à une MV d’étendre son cache en utilisant la mémoire d’autres MV situées sur le même hôte ou sur un hôte …', 'Revue', '2015-01-01', '2024-05-14', 'Tech. Sci. Informatiques', '101-123', 5),
(54, 'Etude des services de matchmaking dans les jeux mutlijoueurs en ligne: récupérer les traces utilisateur afin d\'améliorer l\'expérience de jeu', 'L’acquisition et l’analyse de traces d’utilisation réelles issues de jeux vidéo permettent d’acquérir une connaissance approfondie des habitudes, des comportements et des attentes des joueurs. Cela constitue une étape cruciale pour la conception de services logiciels de qualité pour les jeux vidéo. Toutefois, les acteurs de cette industrie protègent jalousement de telles don-nées afin de dissuader une éventuelle réutilisation par la concurrence et pour éviter la triche. Nous avons contourné ce problème en collectant, sur le serveur d’un jeu en vogue (League of Legends), des données publiques représentant plus de 28 millions de sessions. Dans cet article, nous présentons notre base de données disponible librement en ligne. Nous détaillons ensuite l’analyse et les conclusions que nous tirons de ces données concernant les exigences d’un service essentiel pour les jeux multi-joueurs en ligne: le matchmaking, ou …', 'Revue', '2015-01-01', '2024-05-14', 'Revue des Sciences et Technologies de l\'Information-Série TSI: Technique et Science Informatiques', '175-194', 5),
(55, 'Multi-site gargamel: Optimistic synchronization for reliable geo-replicated databases', 'Databases scale poorly in distributed configurations. This is mainly due to the cost of concurrency control and to resource contention. The alternative of centralizing writes works well only for read-intensive workloads, whereas weakening transactional properties is problematic for application developers. In a previous work we introduced Gargamel, a middleware that spreads non-conflicting update transactions to different replicas, but still provides strong transactional guarantees. We extended Gargamel to geo-replication settings. If a data-center fails, the database remains available at other locations. We minimize the synchronization cost, synchronizing optimistically replicas at distant data-centers. The evaluations of our prototype using distant Amazon data-centers show that Gargamel improves both response time and load by an order of magnitude when contention is high (highly loaded system with bounded …', 'Livre', '2014-12-08', '2024-05-14', 'Proceedings of the 9th Workshop on Middleware for Next Generation Internet Computing', '1-6', 5),
(56, 'Matchmaking dans les jeux mutlijoueurs en ligne: étudier les traces utilisateurs pour améliorer l’expérience de jeu', 'L’acquisition et l’analyse de traces d’utilisation réelles issues de jeux vidéo permettent d’acquérir une connaissance approfondie des habitudes, des comportements et des attentes des joueurs. Cela constitue une étape cruciale pour la conception de services logiciels de qualité pour les jeux vidéo. Toutefois, les acteurs de cette industrie protègent jalousement de telles données afin de dissuader une éventuelle réutilisation par la concurrence et pour éviter la triche. Nous avons contourné ce problème en collectant, sur le serveur d’un jeu en vogue (League of Legends), des données publiques représentant plus de 28 millions de sessions.Dans cet article, nous présentons notre base de données disponible librement en ligne. Nous détaillons ensuite l’analyse et les conclusions que nous tirons de ces données concernent les exigences d’un service essentiel pour les jeux multi-joueurs en ligne : le matchmaking, ou mise en relation de joueurs.', 'Conférence', '2014-04-22', '2024-05-14', 'Conférence d’informatique en Parallélisme, Architecture et Système', '', 5),
(57, 'PUMA: Un cache distant pour mutualiser la mémoire inutilisée des machines virtuelles', 'Certaines applications, comme les serveurs d’e-commerce, effectuent beaucoup d’opérations d’entrée/sortie (E/S) sur disque. Leurs performances sont étroitement liées à l’efficacité de ces opérations. Pour les améliorer, les systèmes d’exploitation tels que Linux utilisent la mémoire libre pour fournir des mécanismes de cache. Cependant, les ressources d’aujourd’hui sont virtualisées: par exemple, dans les clouds, les machines virtuelles (MVs) peuvent être déployées et déplacées entre les hôtes physiques pour offrir à la fois isolation et flexibilité. Ceci implique une fragmentation des ressources physiques, dont la mémoire. Cette fragmentation limite la quantité de mémoire disponible d’une MV pour y mettre ses données en cache. Dans cet article, nous proposons PUMA, un mécanisme de cache distant qui permet à une MV d’étendre son cache en utilisant la mémoire d’autres MVs situées sur un hôte local ou distant. Nos évaluations montrent que PUMA permet de multiplier les performances des applications par 9.', 'Conférence', '2014-04-22', '2024-05-14', 'ComPAS\'2014: Conférence d\'informatique en Parallélisme, Architecture et Système', '1-12', 5),
(58, 'Large‐Scale Peer‐to‐Peer Game Applications', ' This chapter contains sections titled:   Introduction   Large‐scale game applications: model and specific requirements   Overview of peer‐to‐peer overlays for large‐scale game applications   Overlays for FPS games   Overlays for online life‐simulation games   Conclusion   Bibliography  ', 'Revue', '2013-02-28', '2024-05-14', 'Distributed Systems: Design and Algorithms', '81-103', 20),
(59, 'Vers un système d\'arbitrage décentralisé pour les jeux en ligne', 'L\'arbitrage des jeux massivement multi-joueurs (MMOGs) repose actuellement sur des architectures centralisées, qui facilitent la détection de la triche mais empêchent les MMOGs de passer à l\'échelle. La centralisation limite la taille du monde virtuel ainsi que le nombre de joueurs qui y évoluent. Nous montrons dans cet article qu\'il est possible de concevoir un arbitrage pair à pair hautement efficace, même à grande échelle, aussi bien en terme de performance que de prévention de la triche. Nos simulations montrent que notre solution permet de gérer au-delà de 30000 nœuds tout en détectant plus de 99,987% des tentatives de triche sur des dizaines de millions de requêtes d\'arbitrage', 'Conférence', '2013-01-16', '2024-05-14', 'RenPar\'21-Rencontres francophones du Parallelisme', '9 p.', 5),
(60, 'DONUT: Building Shortcuts in Large-Scale Decentralized Systems with Heterogeneous Peer Distributions', 'Large-scale distributed systems gather thousands of peers spread all over the world. Such systems need to offer good routing performances regardless of their size and despite high churn rates. To achieve that requirement, the system must add appropriate shortcuts to its logical graph (overlay). However, to choose efficient shortcuts, peers need to obtain information about the overlay topology. In case of heterogeneous peer distributions, retrieving such information is not straightforward. Moreover, due to churn, the topology rapidly evolves, making gathered information obsolete. State of- the-art systems either avoid the problem by enforcing peers to adopt a uniform distribution or only partially fulfill these requirements. To cope with this problem, we propose DONUT, a mechanism to build a local map that approximates the peer distribution, allowing the peer to accurately estimate graph distance to other peers with a …', 'Conférence', '2011-10-04', '2024-05-14', '2011 IEEE 30th International Symposium on Reliable Distributed Systems', '91-100', 15),
(61, 'Peer-to-peer metadata management for knowledge discovery applications in grids', 'Computational Grids are powerful platforms gathering computational power and storage space from thousands of geographically distributed resources. The applications running on such platforms need to efficiently and reliably access the various and heterogeneous distributed resources they offer. This can be achieved by using metadata information describing all available resources. It is therefore crucial to provide efficient metadata management architectures and frameworks. In this paper we describe the design of a Grid metadata management service. We focus on a particular use case: the Knowledge Grid architecture which provides high-level Grid services for distributed knowledge discovery applications. Taking advantage of an existing Grid data-sharing service, namely JuxMem, the proposed solution lies at the border between peer-to-peer systems and Web services.', 'Revue', '2008-01-01', '2024-05-14', 'Grid Middleware and Services: Challenges and Solutions', '219-233', 18),
(62, 'Extension du modèle de cohérence à l\'entrée pour la visualisation dans les applications de couplage de codes sur grilles', 'Ce papier s\'intéresse au problème de la visualisation des données partagées dans les applications à base de couplage de codes sur les grilles. Nous proposons d\'améliorer l\'efficacité de la visualisation en intervenant sur les mécanismes de gestion des données répliquées et plus particulièrement au niveau du protocole de cohérence. La notion de lecture relâchée est alors introduite comme une extension du modèle de cohérence à l\'entrée (entry consistency). Ce nouveau type d\'opération peut être réalisé sans prise de verrou, en parallèle avec des écritures. En revanche, l\'utilisateur relâche les contraintes sur la fraîcheur de la donnée et accepte de lire des versions légèrement anciennes, dont le retard est néanmoins contrôlé. L\'implémentation de cette approche au sein du service de partage de données pour grilles JuxMem montre des gains considérables par rapport à une implémentation classique basée sur des lectures avec prise de verrou.', 'Conférence', '2005-11-03', '2024-05-14', 'Actes des Journées francophones sur la Cohérence des Données en Univers Réparti', '', 5),
(63, 'Cohérence et volatilité dans un service de partage de données dans les grilles de calcul', 'Nous nous intéressons au partage de données modifiables à grande échelle dans les grilles de calcul. Une contrainte pour la mise en oeuvre d\'un tel système est la gestion de la cohérence des données en environnement volatile. Dans ce travail, nous proposons une architecture qui découple les mécanismes de tolérance aux fautes de la gestion de la cohérence. Nous validons cette approche par la conception d\'un protocole de cohérence hiérarchique tolérant aux fautes sur la plate-forme JuxMem, qui est un service de partage de données pour la grille. Nous présentons également une évaluation expérimentale préliminaire de ce protocole.', 'Conférence', '2005-01-01', '2024-05-14', 'Rencontres francophones du parallélisme (RenPar 16)', '47--55', 5),
(64, 'Big Data Tools: Interoperability Study and Performance Testing', 'The technological revolution, the huge sharing of data via social networks, web and mobile applications and IoT devices are generating a huge volume of data every day, commonly referred to as “Big Data”. To cope with Big Data and the challenges associated with their specific features, the last decade, a multitude of technologies and platforms have emerged to harness their potential. The community is still seeking a comprehensive and up-to-date comparative study of these tools. Such an experimentally-derived study is essential for enabling informed decision-making, fostering innovation, and ensuring that organizations can make the best choices when implementing Big Data solutions. In this paper, a multi-purpose experimental study was conducted. The primary objective is to provide an overview of today’s most popular Big Data tools, and to evaluate their interoperability. The second is to test performance by …', 'Conférence', '2023-12-15', '2024-05-14', '2023 IEEE International Conference on Big Data (BigData)', '2386-2395', 15),
(65, 'Learning suitable data representation for credit card fraud detection algorithms', 'With the recent pandemic, credit card and even contactless payment have gained significant popularity. The elevated frequency of card usage, along with the lack of diligence among customers, has resulted in an increase in stolen or counterfeit cards, often leading to fraudulent activities. This emphasized the importance of real-time detection of abnormal banking transactions for card issuers. Automated analysis of transaction logs is a prevalent approach to address this challenge, often involving the comparison of incoming transactions to a database containing genuine and fraudulent transactions. Methods such as the Mahalanobis distance have proven to be efficient when seeking for similarities between high dimensional data. However, the challenge lies in the fact that credit card logs contain both categorical and tabular data, which poses compatibility issues with the Mahalanobis algorithm. This study explores …', 'Conférence', '2023-07-28', '2024-05-14', '2023 6th International Conference on Data Science and Information Technology (DSIT)', '194-202', 15),
(66, 'The Burden of Time on a Large-Scale Data Management Service', 'Distributed data management services usually run on top of dynamic and heterogeneous systems. This remains true for most distributed services. At large scale, it becomes impossible to get an accurate global view of the system. To provide the best quality of service despite this highly dynamic environment, those services must continuously adapt. To do so, they monitor their environment and store events and states of the system in memory. In this paper, we propose a model to formalize this memory and three strategies to use it. We explain the theoretical difference between those strategies and conduct an experimental evaluation. We show that providing the ability to “forget” old events leads to better performance. However, using fading events (events that progressively disappear) rather than events that suddenly disappear leads to even better performance and is more adequate to detect habits and recurrent …', 'Livre', '2023-03-20', '2024-05-14', 'International Conference on Advanced Information Networking and Applications', '248-260', 19),
(67, 'MILADY (Matrix+ Linear Diagram): Visual Exploration and Edition of Multivariate Graphs for Computer Networks Management', 'This poster introduces MILADY (Matrix+ Linear Diagram), a visual method for exploring and editing multivariate graphs from a computer networks perspective. Existing methods usually require multiple views, but our integrated approach enables users to visualize and edit both aspects with drag gestures and in a single view. We demonstrate the usefulness of our method for computer networks management.', '', '2023-01-01', '2024-05-14', '', '', 21),
(68, 'Publicity Chairs', 'Welcome to 2022 12th International Conference on Applied Physics and Mathematics (ICAPM 2022), which should be held in Singapore during February 18-20, 2022. Due to global travel restrictions because of the COVID-19 pandemic, the conference was organized as an online meeting. Despite this, despite the different time zones of participants, despite some unavoidable technical hazards the conference matched by far the expectation of researchers and specialists to be a place of discussions, a vitrine of the new achievements in the field of applied Physics and Mathematics.', 'Revue', '2022-01-01', '2024-05-14', 'Journal of Physics: Conference Series', '011001', 5),
(69, 'Contributions à la réplication de données dans les systèmes distribués à grande échelle', 'La réplication de données est une technique clé pour permettre aux systèmes de gestion de données distribués à grande échelle d\'offrir un stockage fiable et performant. Comme il gère un nombre suffisant de copies de chaque donnée, le système peut améliorer la pérennité.  De plus, la présence de copies bien placées réduit les temps d\'accès. Cependant, cette même existence de plusieurs copies pose des problèmes de cohérence en cas de modification. Ces dernières années, mes contributions ont porté sur ces trois aspects liés à la réplication de données: la pérennité des données, la performance des accès et la gestion de la cohérence. RelaxDHT et SPLAD permettent d\'améliorer la pérennité des données en jouant sur le placement des copies. Caju, AREN et POPS permettent de réduire les temps d\'accès aux données en améliorant la localité et en prenant en compte la popularité. Pour accélérer la localisation des copies, DONUT crée des raccourcis efficaces prenant en compte la distribution des données. Enfin, dans le contexte des bases de données répliquées, Gargamel permet de ne paralléliser que les transactions qui sont indépendantes, améliorant ainsi les performances et évitant tout abandon de transaction pour cause de conflit. Ces travaux ont été réalisés avec huit étudiants en thèse dont quatre ont soutenu. Pour l\'avenir, je me propose d\'étendre ces travaux, d\'une part en concevant un système de gestion de données pour les MMOGs, une classe d\'application particulièrement exigeante; et, d\'autre part, en concevant des mécanismes de gestion de données permettant de n\'utiliser que la quantité strictement nécessaire de …', '', '2015-11-03', '2024-05-14', '', '', 5),
(70, 'Real-time online emulation of real applications on SimGrid with Simterpose', 'Dans le cadre de ce stage, nous allons nous intéresser aux applications distribuées. Il s’ agit d’applications dont une partie ou la totalité des ressources n’est pas localisée sur la machine où l’application s’ exécute, mais sur plusieurs machines distinctes. Ces dernières communiquent entre elles via le réseau pour s’ échanger les données nécessaires à l’exécution de l’application. Les applications distribuées ont de nombreux avantages: elles permettent notamment d’augmenter la disponibilité des données en se les échangeant, comme les applications Torrent (BitTorrent...). Grâce au projet BOINC 1 par exemple, on peut partager la puissance de calcul inutilisée de sa machine. On peut également penser aux applications de stockage de données LAFS 2 et CEPH 3. La première apporte un stockage robuste qui préserve les données même si un site est physiquement détruit. La seconde souhaite fournir performance, fiabilité et scalabilité. Depuis longtemps, la popularité de ces applications distribuées ne cesse de croître. Elles deviennent de plus en plus complexes avec des contraintes et des exigences de plus en plus fortes, en particulier au niveau des performances et de l’hétérogénéité des plateformes et des ressources utilisées. Il est donc de plus en plus difficile de créer de telles applications (absence d’horloge commune et mémoire centrale, deadlock, race condition, famine) mais aussi de les tester. En effet, l’évaluation d’applications distribuées a évoluée mais cela représente un effort permanent.Actuellement, il existe trois façons principales de tester le comportement d’applications distribuées [10]: l’exécution sur plate-forme réelle, la …', '', '2015-09-04', '2024-05-14', '', '', 5),
(71, 'Provisionnement dynamique de serveurs de jeux massivement multijoueurs', 'À l\'origine, les jeux en ligne permettaient à un nombre limité de joueurs (usuellement 16 voir 64) de se rencontrer dans des parties relativement courtes. De nos jours, de plus en plus jeux massivement multijoueurs en ligne (MMOG) permettent à des milliers de joueurs de se rencontrer dans un univers persistant. Le genre a été popularisé à la fin des années 1990 par la sortie de MMORPG (jeux de rôle massivement multijoueurs en ligne) tels que Ultima Online [39], Lineage [31] ou Everquest [27]. En 2004, Blizzard Entertainment a sorti World of Warcraft (WOW)[41] qui a eu immédiatement un grand succès et qui continue aujourd\'hui à être un des plus grands MMORPG avec encore près de 10 millions d\'utilisateurs dans le monde fin 2014 [35].Les serveurs de ces jeux doivent servir un très grand nombre de joueurs connectés (habituellement plus de 1000 joueurs) en leur délivrant une vue cohérente tout en …', 'Revue', '2015-08-01', '2024-05-14', 'Mars', '', 5),
(72, 'Workshop 2-High-Performance Data Management in Grid Environments-A Practical Evaluation of a Data Consistency Protocol for Efficient Visualization in Grid Applications', '', 'Revue', '2007-01-01', '2024-05-14', 'Lecture Notes in Computer Science', '692-706', 22),
(73, 'Gestion de données dans les grilles de calcul', 'Gestion de données dans les grilles de calcul: - Support pour la tolérance aux fautes et la \ncohérence des données Page 1 Contexte et motivations Contributions Mise en œuvre et \névaluation Conclusions et perspectives Gestion de données dans les grilles de calcul: Support \npour la tolérance aux fautes et la cohérence des données Sébastien Monnet Projet PARIS/IRISA \nUniversité de Rennes 1 France 30 novembre 2006 Directeurs de thèse : Luc Bougé et Gabriel \nAntoniu Page 2 Contexte et motivations Contributions Mise en œuvre et évaluation \nConclusions et perspectives Grilles de calcul et partage de données Gestion de la cohérence \net de la tolérance aux fautes De nouveaux besoins Simulations numériques Grande précision \nPhénomènes physiques complexes Importants besoins Efficacité d’interaction Exploitation \ndes résultats Puissance de calcul Espace de stockage Thermodynamique Optique Mécanique …', '', '2006-11-30', '2024-05-14', '', '', 5),
(74, 'MOve design of an application-malleable overlay', '', '', '2006-01-01', '2024-05-14', '', '', 23),
(75, 'Extension du modèle de cohérence à l\'entrée pour la visualisation dans les applications de couplage de codes sur grille', 'Ce papier s\'intéresse au problème de la visualisation des données partagées dans les applications à base de couplage de codes sur les grilles. Nous proposons d\'améliorer l\'efficacité de la visualisation en intervenant sur les mécanismes de gestion des données répliquées et plus particulièrement au niveau du protocole de cohérence. La notion de lecture relâchée est alors introduite comme une extension du modèle de cohérence à l\'entrée (entry consistency). Ce nouveau type d\'opération peut être réalisé sans prise de verrou, en parallèle avec des écritures. En revanche, l\'utilisateur relâche les contraintes sur la fraîcheur de la donnée et accepte de lire des versions légèrement anciennes, dont le retard est néanmoins contrôlé. L\'implémentation de cette approche au sein du service de partage de données pour grilles montre des gains considérables par rapport à une implémentation classique basée sur des lectures avec prise de verrou.', '', '2006-01-01', '2024-05-14', '', '9', 5),
(76, 'Using failure injection mechanisms to experiment and evaluate a hierarchical failure detector', 'Computing grids consist of a large-scale, highly-distributed hardware architecture, often built in a hierarchical way, as cluster federations. At such scales, failures are no longer exceptions, but part of the normal behavior. When designing software for grids, developers have to take failures into account, in order to be able to provide a stable service. The fault-tolerance mechanisms need to be validated and evaluated. It is therefore crucial to make experiments at a large scale, with various volatility conditions, in order to measure the impact of failures on the whole system. This paper presents an experimental tool allowing the user to control the volatility conditions during a practical evaluation of fault-tolerant systems. The tool is based on failure-injection mechanisms. We illustrate the usefulness of our tool through an evaluation of a failure detector specifically designed for hierarchical grids.', '', '2006-01-01', '2024-05-14', '', '19', 5),
(77, 'Gestion des appareils au laboratoire de contrôle qualité', '', '', '2003-01-01', '2024-05-14', '', '', 5),
(78, 'RECTORAT-ExtRaction automatique dE ConfiguraTiOn Réseau sAtisfaisant les contrainTes client (Automatic extraction of network configurations satisfying client constraints).', 'Description. A problem faced by Internet Service Providers offering services to customers in a territory consists in transforming the needs and functional constraints of customers into a technical solution able to meet them, while validating the operational constraints specific to the operator. Today, this matching is done by the technical sales staff who must transform the needs expressed by the customer into a solution proposal. This operation is complex and requires a strong technical and operational expertise to propose viable and efficient solutions, in terms of cost, resource consumption, and more. This thesis aims to develop machine learning solutions to learn from past configurations rules and apply them to future cases. This will allow to break the deadlock generated by the current requirements of expert knowledge driven extraction. Many problems in artificial intelligence can be interpreted as problems of …', '', '0000-00-00', '2024-05-14', '', '', 5),
(79, 'Going Large-scale in P2P Experiments Using the JXTA Distributed Framework', 'The interesting properties of P2P  systems (high availability despite node volatil- ity, support for heterogeneous architectures, high scalability, etc.) make them attractive for distributed computing. However, conducting large-scale experiments with these systems arise as a major challenge. Simulation allows to model only partially the behavior of P2P  prototypes. Experiments on real testbeds encounter serious difficulty with large-scale de- ployment and control of peers. This paper shows that using an optimized version of the JXTA Distributed Framework (JDF) allows to easily deploy, configure and control P2P  ex- periments. We illustrate these features with sample tests performed,with our JUXMEM JXTA-based grid data sharing  service, for various large-scale configurations. Key-words: Peer-to-peer, large scale, experiments, JXTA (Rï¿½sumï¿½ : tsvp) Unitï¿½ de recherche INRIA Rennes', '', '0000-00-00', '2024-05-14', '', '', 5),
(80, 'FTXS committees', 'FTXS committees Toggle navigation IEEE Computer Society Digital Library Jobs Tech News \nResource Center Press Room Advertising About Us IEEE IEEE Computer Society IEEE \nComputer Society Digital Library My Subscriptions Magazines Journals Conference \nProceedings Institutional Subscriptions IEEE IEEE Computer Society More Jobs Tech News \nResource Center Press Room Advertising About Us Cart All Advanced Search Conference \nCover Image Download 1.Home 2.Proceedings 3.dsnw 2010 FTXS committees 2010, pp. vi, DOI \nBookmark: 10.1109/DSNW.2010.5542640 Keywords Authors 2010 International Conference on \nDependable Systems and Networks Workshops (DSN-W) vi FTXS Committees 1st Workshop \non Fault-Tolerance for HPC at Extreme Scale (FTXS) Organizers: John Daly, Center for \nExceptional Computing/Dept. of Defense, USA Nathan DeBardeleben, Center for Exceptional …', '', '0000-00-00', '2024-05-14', '', '', 5),
(81, '2012 IEEE International Conference on Cloud Networking IEEE CloudNet 2012 List of Reviewers', '2012 IEEE International Conference on Cloud Networking IEEE CloudNet 2012 List of \nReviewers Albert Rafetseder Amokrane Ahmed A Page 1 2012 IEEE International Conference \non Cloud Networking IEEE CloudNet 2012 List of Reviewers Albert Rafetseder Amokrane \nAhmed Andrzej Duda Antonio Cianfrani Antonio Pescapé Aruna Prem Bianzino Brice Augustin \nBrunilde Sansò Charlie Kaufman Cherkaoui Omar Christophe Kiennert Chun-Jen Chung \nChunming Qiao Clarissa Marquezan Claudio Testa Clémence Magnien Dallal Belabed Damien \nSaucez David Stezenbach Deep Medhi Dirk Kutscher Djamal Zeghlache Emmanuel Dotaro \nFederico Larumbe Florian Metzger Florian Schreiner Fouad Guenane Guillaume Urvoy-Keller \nGuy Pujolle Harry Skianis Honggang Zhang Huijun Wu Jose Maria Alcaraz Calero Kaiqi Xiong \nKaliappa Ravindran Kamel Haddadou Karthik Kumar Kenichi Ogaki Konglin Zhu Kui Ren …', '', '0000-00-00', '2024-05-14', '', '', 5),
(82, 'Uncoordinated checkpointing without domino effect for send-deterministic mpi applications', 'As reported by many recent studies, the mean time between failures of future post-petascale supercomputers is likely to reduce, compared to the current situation. The most popular fault tolerance approach for MPI applications on HPC Platforms relies on coordinated check pointing which raises two major issues: a) global restart wastes energy since all processes are forced to rollback even in the case of a single failure, b) checkpoint coordination may slow down the application execution because of congestions on I/O resources. Alternative approaches based on uncoordinated check pointing and message logging require logging all messages, imposing a high memory/storage occupation and a significant overhead on communications. It has recently been observed that many MPI HPC applications are send-deterministic, allowing to design new fault tolerance protocols. In this paper, we propose an uncoordinated …', 'Conférence', '2011-05-16', '2024-05-15', 'Parallel & Distributed Processing Symposium (IPDPS), 2011 IEEE International', '989-1000', 15),
(83, 'On communication determinism in parallel HPC applications', 'Current fault tolerant protocols for high performance computing parallel applications have two major drawbacks: either they require to restart all processes even in the case of only a single process failure or they have a high performance overhead in fault free situation. As a consequence none of existing generic fault tolerant protocols matches needs of HPC applications and surprisingly, there is no fault tolerant protocol dedicated to them. One way to design better fault tolerant protocols for HPC applications is to explore and take advantage of their specific characteristics. In particular we suspect that most of them present some form of determinism in communication patterns. Communication determinism can play an important role in the design of new fault tolerant protocols by reducing their complexity. In this paper, we explore the communication determinism in 27 HPC parallel applications that are representative of …', 'Conférence', '2010-08-02', '2024-05-15', 'Computer Communications and Networks (ICCCN), 2010 Proceedings of 19th International Conference on', '1-8', 15),
(84, 'Unified model for assessing checkpointing protocols at extreme‐scale', 'In this paper, we present a unified model for several well‐known checkpoint/restart protocols. The proposed model is generic enough to encompass both extremes of the checkpoint/restart space, from coordinated approaches to a variety of uncoordinated checkpoint strategies (with message logging). We identify a set of crucial parameters, instantiate them, and compare the expected efficiency of the fault tolerant protocols, for a given application/platform pair. We then propose a detailed analysis of several scenarios, including some of the most powerful currently available high performance computing platforms, as well as anticipated Exascale designs. The results of this analytical comparison are corroborated by a comprehensive set of simulations. Altogether, they outline comparative behaviors of checkpoint strategies at very large scale, thereby providing insight that is hardly accessible to direct experimentation …', 'Revue', '2014-12-10', '2024-05-15', 'Concurrency and Computation: Practice and Experience', '2772-2791', 5),
(85, 'HydEE: Failure containment without event logging for large scale send-deterministic mpi applications', 'High performance computing will probably reach exascale in this decade. At this scale, mean time between failures is expected to be a few hours. Existing fault tolerant protocols for message passing applications will not be efficient anymore since they either require a global restart after a failure (check pointing protocols) or result in huge memory occupation (message logging). Hybrid fault tolerant protocols overcome these limits by dividing applications processes into clusters and applying a different protocol within and between clusters. Combining coordinated check pointing inside the clusters and message logging for the inter-cluster messages allows confining the consequences of a failure to a single cluster, while logging only a subset of the messages. However, in existing hybrid protocols, event logging is required for all application messages to ensure a correct execution after a failure. This can significantly …', 'Conférence', '2012-05-21', '2024-05-15', 'Parallel & Distributed Processing Symposium (IPDPS), 2012 IEEE 26th International', '1216-1227', 15),
(86, 'On the use of cluster-based partial message logging to improve fault tolerance for mpi hpc applications', ' Fault tolerance is becoming a major concern in HPC systems. The two traditional approaches for message passing applications, coordinated checkpointing and message logging, have severe scalability issues. Coordinated checkpointing protocols make all processes roll back after a failure. Message logging protocols log a huge amount of data and can induce an overhead on communication performance. Hierarchical rollback-recovery protocols based on the combination of coordinated checkpointing and message logging are an alternative. These partial message logging protocols are based on process clustering: only messages between clusters are logged to limit the consequence of a failure to one cluster. These protocols would work efficiently only if one can find clusters of processes in the applications such that the ratio of logged messages is very low. We study the communication patterns of …', 'Livre', '2011-01-01', '2024-05-15', 'Euro-Par 2011 Parallel Processing', '567-578', 16),
(87, 'SC16: International Conference for High Performance Computing, Networking, Storage and Analysis (SC)(2016)', '', '', '0000-00-00', '2024-05-15', '', '', 5),
(88, 'Spbc: Leveraging the characteristics of mpi hpc applications for scalable checkpointing', 'The high failure rate expected for future supercomputers requires the design of new fault tolerant solutions. Most checkpointing protocols are designed to work with any message-passing application but suffer from scalability issues at extreme scale. We take a different approach: We identify a property common to many HPC applications, namely channel-determinism, and introduce a new partial order relation, called always-happens-before relation, between events of such applications. Leveraging these two concepts, we design a protocol that combines an unprecedented set of features. Our protocol called SPBC combines in a hierarchical way coordinated checkpointing and message logging. It is the first protocol that provides failure containment without logging any information reliably apart from process checkpoints, and this, without penalizing recovery performance. Experiments run with a representative set of …', 'Conférence', '2013-11-17', '2024-05-15', 'High Performance Computing, Networking, Storage and Analysis (SC), 2013 International Conference for', '1-12', 15),
(89, 'Failure Detection and Propagation in HPC systems', 'Building an infrastructure for Exascale applications requires, in addition to many other key components, a stable and efficient failure detector. This paper describes the design and evaluation of a robust failure detector, able to maintain and distribute the correct list of alive resources within proven and scalable bounds. The detection and distribution of the fault information follow different overlay topologies that together guarantee minimal disturbance to the applications. A virtual observation ring minimizes the overhead by allowing each node to be observed by another single node, providing an unobtrusive behavior. The propagation stage is using a non-uniform variant of a reliable broadcast over a circulant graph overlay network, and guarantees a logarithmic fault propagation. Extensive simulations, together with experiments on the Titan ORNL supercomputer, show that the algorithm performs extremely well, and …', 'Conférence', '2016-11-13', '2024-05-15', 'High Performance Computing, Networking, Storage and Analysis, SC16: International Conference for', '312-322', 15),
(90, 'Reactive DVFS Control for Multicore Processors', 'Several solutions are considered to reduce energy consumption of computers. Among them, Dynamic Voltage and Frequency Scaling (DVFS) emerged as an effective way to enhance energy efficiency by adapting processor frequency to workloads. We propose Forest, a new DVFS controller designed to efficiently exploit the recent technologies introduced in processors. Forest is a runtime DVFS controller able to estimate the energy savings it can achieve from power gains, evaluated offline using power probes embedded in modern CPUs, and speedups measured at runtime for the current workload. It does not use any performance model but rather directly measures the effect of frequency transitions on energy. Using such methodology, Forest can achieve energy savings on the whole system under user-defined slowdown constraints. In our experiments, Forest is able to achieve more than 39% CPU energy …', 'Conférence', '2013-08-20', '2024-05-15', 'Green Computing and Communications (GreenCom), 2013 IEEE and Internet of Things (iThings/CPSCom), IEEE International Conference on and IEEE Cyber, Physical and Social Computing', '102-109', 15),
(91, 'A failure detector for HPC platforms', 'Building an infrastructure for exascale applications requires, in addition to many other key components, a stable and efficient failure detector. This article describes the design and evaluation of a robust failure detector that can maintain and distribute the correct list of alive resources within proven and scalable bounds. The detection and distribution of the fault information follow different overlay topologies that together guarantee minimal disturbance to the applications. A virtual observation ring minimizes the overhead by allowing each node to be observed by another single node, providing an unobtrusive behavior. The propagation stage uses a nonuniform variant of a reliable broadcast over a circulant graph overlay network and guarantees a logarithmic fault propagation. Extensive simulations, together with experiments on the Titan Oak Ridge National Laboratory supercomputer, show that the algorithm performs …', 'Revue', '2018-01-01', '2024-05-15', 'The International Journal of High Performance Computing Applications', '139-158', 25),
(92, 'Multi-criteria checkpointing strategies: response-time versus resource utilization', ' Failures are increasingly threatening the efficiency of HPC systems, and current projections of Exascale platforms indicate that rollback recovery, the most convenient method for providing fault tolerance to general-purpose applications, reaches its own limits at such scales. One of the reasons explaining this unnerving situation comes from the focus that has been given to per-application completion time, rather than to platform efficiency. In this paper, we discuss the case of uncoordinated rollback recovery where the idle time spent waiting recovering processors is used to progress a different, independent application from the system batch queue. We then propose an extended model of uncoordinated checkpointing that can discriminate between idle time and wasted computation. We instantiate this model in a simulator to demonstrate that, with this strategy, uncoordinated checkpointing per application …', 'Livre', '2013-01-01', '2024-05-15', 'Euro-Par 2013 Parallel Processing', '420-431', 16),
(93, 'FoREST-mn: Runtime DVFS beyond communication slack', 'Dynamic Voltage and Frequency Scaling (DVFS) is commonly used to save energy in computing systems. However, when it comes to parallel programs, existing DVFS controllers only reduce frequency while or before waiting in blocking communications. As a consequence, energy savings are only possible for the program tasks out of the critical path and when the workload is imbalanced. We propose a new runtime DVFS controller, FoREST-mn. It allows to take advantage of both the low CPU usage of some program phases as well as communication slack to save more energy with parallel programs. The DVFS control then becomes more complex, but energy savings are even obtained when the workload is balanced. The resulting slowdown on programs is carefully controlled and constrained by a user-defined threshold. We implemented the presented strategies and evaluated it on 4 compute nodes totaling 64 …', 'Conférence', '2014-11-03', '2024-05-15', 'Green Computing Conference (IGCC), 2014 International', '1-6', 15),
(94, 'Minimizing Energy Consumption of MPI Programs in Realistic Environment', 'Dynamic voltage and frequency scaling proves to be an efficient way of reducing energy consumption of servers. Energy savings are typically achieved by setting a well-chosen frequency during some program phases. However, determining suitable program phases and their associated optimal frequencies is a complex problem. Moreover, hardware is constrained by non negligible frequency transition latencies. Thus, various heuristics were proposed to determine and apply frequencies, but evaluating their efficiency remains an issue. In this paper, we translate the energy minimization problem into a mixed integer program that specifically models most current hardware limitations. The problem solution then estimates the minimal energy consumption and the associated frequency schedule. The paper provides two different formulations and a discussion on the feasibility of each of them on realistic applications.', 'Revue', '2015-02-24', '2024-05-15', 'arXiv preprint arXiv:1502.06733', '', 5);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(95, 'Identifying thread interference with performance variation', 'Understanding the performance of a multi-threaded appli- cation is difficult. The threads interfere when they access the same hardware resource, which slows down their execution. Unfortunately, current profiling tools are unable to identify the most problematic interference, because they cannot classify interference on different hardware resources. In this paper, we propose a holistic metric able to simultaneously classify inter- ference on different hardware resources. The metric considers performance variation as a universal indicator. We propose an interactive profiling tool to compute this metric. With an evaluation of 27 applications we show that our profiling tool successfully identify 10 performance bottlenecks caused by 6 different kinds of interference', '', '2017-07-01', '2024-05-15', '', '14', 5),
(96, 'Research report ICL-UT-1301 Multi-criteria checkpointing strategies: optimizing response-time versus resource utilization', 'Failures are increasingly threatening the efficiency of HPC systems, and current projections of Exascale platforms indicate that rollback recovery, the most convenient method for providing fault tolerance to generalpurpose applications, reaches its own limits at such scales. One of the reasons explaining this unnerving situation comes from the focus that has been given to per-application completion time, rather than to platform efficiency. In this paper, we discuss the case of uncoordinated rollback recovery where the idle time spent waiting recovering processors is used to progress a different, independent application from the system batch queue. We then propose an extended model of uncoordinated checkpointing that can discriminate between idle time and wasted computation. We instantiate this model in a simulator to demonstrate that, with this strategy, uncoordinated checkpointing per application completion time is unchanged, while it delivers near-perfect platform efficiency.', '', '2013-02-27', '2024-05-15', '', '', 5),
(97, 'HydEE, vers un protocole de recouvrement arrière hiérarchique pour les machines exascales: De l\'exploitation du déterminisme des émissions dans les protocoles de recouvrement …', '', 'Revue', '2012-01-01', '2024-05-15', 'TSI. Technique et science informatiques', '1049-1078', 26),
(98, 'HydEE, vers un protocole de recouvrement arriè} re hiérarchique pour les machines exascales', '', 'Revue', '2012-01-01', '2024-05-15', 'Technique et Science Informatiques (TSI)', '20', 5),
(99, 'Un protocole de recouvrement arrière hiérarchique pour applications MPI de très grande taille avec émissions déterministes', 'Les protocoles de sauvegarde de points de reprise coordonnés sont les protocoles de recouvrement ar-rière les plus répandus dans les applications MPI de calcul haute performance. Cependant, avec l\'aug-mentation du nombre de composants des machines, les défaillances deviennent de plus en plus fré-quentes et le redémarrage de tous les processus de l\'application après une défaillance n\'est plus une solution adaptée. En s\'appuyant sur le déterminisme d\'émission de la majeure partie des applications MPI, nous proposons dans cet article un nouveau protocole de recouvrement arrière hiérarchique fondé sur la combinaison d\'un protocole de sauvegarde de points de reprise coordonné et d\'un protocole à en-registrement de messages. Ce protocole profite des caractéristiques des schémas de communications de la plupart de ces applications qui permettent d\'identifier des groupes de processus communiquant fré-quemment entre eux, et ainsi d\'appliquer un protocole différent au sein des groupes et entre les groupes. Nos évaluations montrent qu\'en appliquant un protocole de sauvegarde de points de reprise coordonné au sein des groupes, et en enregistrant seulement les messages entre processus de différents groupes, il est possible de limiter les conséquences d\'une défaillance à un petit sous-ensemble des processus de l\'application, tout en sauvegardant le plus souvent moins de 20% des données échangées au sein de l\'application au cours de son exécution.', 'Conférence', '2011-01-01', '2024-05-15', 'Rencontres Francophones du Parallèlisme (RenPar20)', '', 5),
(100, 'Reasons for a pessimistic or optimistic message logging protocol in MPI uncoordinated failure, recovery', 'With the growing scale of high performance computing platforms, fault tolerance has become a major issue. Among the various approaches for providing fault tolerance to MPI applications, message logging has been proved to tolerate higher failure rate. However, this advantage comes at the expense of a higher overhead on communications, due to latency intrusive logging of events to a stable storage. Previous work proposed and evaluated several protocols relaxing the synchronicity of event logging to moderate this overhead. Recently, the model of message logging has been refined to better match the reality of high performance network cards, where message receptions are decomposed in multiple interdependent events. According to this new model, deterministic and non-deterministic events are clearly discriminated, reducing the overhead induced by message logging. In this paper we compare …', 'Conférence', '2009-08-31', '2024-05-16', '2009 IEEE International Conference on Cluster Computing and Workshops', '1-9', 15),
(101, 'Leveraging hardware message passing for efficient thread synchronization', 'As the level of parallelism in manycore processors keeps increasing, providing efficient mechanisms for thread synchronization in concurrent programs is becoming a major concern. On cache-coherent shared-memory processors, synchronization efficiency is ultimately limited by the performance of the underlying cache coherence protocol. This paper studies how hardware support for message passing can improve synchronization performance. Considering the ubiquitous problem of mutual exclusion, we adapt two state-of-the-art solutions used on shared-memory processors, namely the server approach and the combining approach, to leverage the potential of hardware message passing. We propose HybComb, a novel combining algorithm that uses both message passing and shared memory features of emerging hybrid processors. We also introduce MP-Server, a straightforward adaptation of the server …', 'Livre', '2014-02-06', '2024-05-16', 'Proceedings of the 19th ACM SIGPLAN symposium on Principles and practice of parallel programming', '143-154', 5),
(102, 'Data and thread placement in numa architectures: A statistical learning approach', 'Nowadays, NUMA architectures are common in compute-intensive systems. Achieving high performance for multi-threaded application requires both a careful placement of threads on computing units and a thorough allocation of data in memory. Finding such a placement is a hard problem to solve, because performance depends on complex interactions in several layers of the memory hierarchy. In this paper we propose a black-box approach to decide if an application execution time can be impacted by the placement of its threads and data, and in such a case, to choose the best placement strategy to adopt. We show that it is possible to reach near-optimal placement policy selection. Furthermore, solutions work across several recent processor architectures and decisions can be taken with a single run of low overhead profiling.', 'Livre', '2019-08-05', '2024-05-16', 'Proceedings of the 48th International Conference on Parallel Processing', '1-10', 5),
(103, 'An efficient wait-free resizable hash table', 'This paper presents an efficient wait-free resizable hash table. To achieve high throughput at large core counts, our algorithm is specifically designed to retain the natural parallelism of concurrent hashing, while providing wait-free resizing. An extensive evaluation of our hash table shows that in the common case where resizing actions are rare, our implementation outperforms all existing lock-free hash table implementations while providing a stronger progress guarantee.', 'Livre', '2018-07-11', '2024-05-16', 'Proceedings of the 30th on Symposium on Parallelism in Algorithms and Architectures', '111-120', 5),
(104, 'High-performance RMA-based Broadcast on the Intel SCC', 'Many-core chips with more than 1000 cores are expected by the end of the decade. To overcome scalability issues related to cache coherence at such a scale, one of the main research directions is to leverage the message-passing programming model. The Intel Single-Chip Cloud Computer (SCC) is a prototype of a message-passing many-core chip. It offers the ability to move data between on-chip Message Passing Buffers (MPB) using Remote Memory Access (RMA). Performance of message-passing applications is directly affected by efficiency of collective operations, such as broadcast. In this paper, we study how to make use of the MPBs to implement an efficient broadcast algorithm for the SCC. We propose OC-Bcast (On-Chip Broadcast), a pipelined k-ary tree algorithm tailored to exploit the parallelism provided by on-chip RMA. Using a LogP-based model, we present an analytical evaluation that compares …', 'Livre', '2012-06-25', '2024-05-16', 'Proceedings of the twenty-fourth annual ACM symposium on Parallelism in algorithms and architectures', '121-130', 5),
(105, 'The architecture of the xtreemos grid checkpointing service', ' The EU-funded XtreemOS project implements a grid operating system (OS) transparently exploiting distributed resources through the SAGA and POSIX interfaces. XtreemOS uses an integrated grid checkpointing service (XtreemGCP) for implementing migration and fault tolerance for grid applications. Checkpointing and restarting applications in a grid requires saving and restoring distributed/parallel applications in distributed heterogeneous environments. In this paper we present the architecture of the XtreemGCP service integrating existing system-specific checkpointer solutions. We propose to bridge the gap between grid semantics and system-specific checkpointers by introducing a common kernel checkpointer API that allows using different checkpointers in a uniform way. Our architecture is open to support different checkpointing strategies that can be adapted according to evolving failure situations or …', 'Conférence', '2009-01-01', '2024-05-16', 'Euro-Par 2009 Parallel Processing: 15th International Euro-Par Conference, Delft, The Netherlands, August 25-28, 2009. Proceedings 15', '429-441', 16),
(106, 'Active optimistic and distributed message logging for message‐passing applications', ' Message logging is an attractive solution to provide fault tolerance for message‐passing applications because it is more scalable than coordinated checkpointing. Sender‐based message logging is a well‐known optimization that allows the saving of message payload in the sender memory. Thus, only message reception events have to be logged reliably by using an event logger. This paper proposes solutions to further improve message logging protocol scalability. In existing works on message logging, the event logger has always been considered as a centralized process. We propose a distributed event logger that takes advantage of multi‐core processors that are to be executed in parallel with application processes, leveraging the volatile memory of the nodes to save events reliably. We also propose the combination of our distributed event logger and O2P, an active optimistic message logging protocol using …', 'Revue', '2011-12-10', '2024-05-16', 'Concurrency and Computation: Practice and Experience', '2167-2178', 27),
(107, 'Replication for send-deterministic MPI HPC applications', 'Replication has recently gained attention in the context of fault tolerance for large scale MPI HPC applications. Existing implementations try to cover all MPI codes and to be independent from the underlying library. In this paper, we evaluate the advantages of adopting a different approach. First, we try to take advantage of a communication property common to many MPI HPC application, namely send-determinism. Second, we choose to implement replication inside the MPI library. The main advantage of our approach is simplicity. While being only a small patch to the Open MPI library, our solution called SDR-MPI supports most main features of the MPI standard including all collectives and group operations. SDR-MPI additionally achieves good performance: Experiments run with HPC benchmarks and applications show that its overhead remains below 5%.', 'Livre', '2013-06-18', '2024-05-16', 'Proceedings of the 3rd Workshop on Fault-tolerance for HPC at extreme scale', '33-40', 5),
(108, 'Hierarchical clustering strategies for fault tolerance in large scale HPC systems', 'Future high performance computing systems will need to use novel techniques to allow scientific applications to progress despite frequent failures. Checkpoint-Restart is currently the most popular way to mitigate the impact of failures during long-running executions. Different techniques try to reduce the cost of Checkpoint-Restart, some of them such as local check pointing and erasure codes aim to reduce the time to checkpoint while others such as uncoordinated checkpoint and message-logging aim to decrease the cost of recovery. In this paper, we study how to combine all these techniques together in order to optimize both: check pointing and recovery. We present several clustering and topology challenges that lead us to an optimization problem in a four-dimensional space: reliability level, recovery cost, encoding time and message logging overhead. We propose a novel clustering method inspired from brain …', 'Conférence', '2012-09-24', '2024-05-16', '2012 IEEE International Conference on Cluster Computing', '355-363', 15),
(109, 'Asynchronous broadcast on the Intel SCC using interrupts', 'This paper focuses on the design of an asynchronous broadcast primitive on the Intel SCC. Our solution is based on OC-Bcast, a state-of-the-art k-ary tree synchronous broadcast algorithm that leverages the parallelism provided by on-chip Remote Memory Accesses to Message Passing Buffers. In the paper, we study the use of parallel inter-core interrupts as a means to implement an efficient asynchronous group communication primitive, and present the userspace library we designed to be able to use interrupts in OC-Bcast and make it work asynchronously. Our experimental evaluation shows that our algorithm allows parallel broadcast operations to efficiently progress concurrently and provides low latency for a single broadcast operation. It highlights that parallel interrupts can help implementing efficient group communication primitives on many-core systems.', 'Conférence', '2012-07-19', '2024-05-16', 'The 6th Many-core Applications Research Community (MARC) Symposium', '24-29', 28),
(110, 'ResPCT: fast checkpointing in non-volatile memory for multi-threaded applications', 'Non-volatile memory (NVMM) technologies are a great opportunity to build fast fault-tolerant programs, as they provide persistent storage in main memory. However, since the processor caches remain volatile, solutions are needed to recover a consistent state from NVMM after a crash. This paper presents ResPCT, a checkpointing approach to make multi-threaded programs fault tolerant, by flushing persistent data structures to NVMM periodically. ResPCT uses In-Cache-Line logging to efficiently track modifications during failure-free execution, and to restore a consistent state after a crash. The ResPCT API enables programmers to position restart points in their program, which simplifies the identification of the persistent program state and can also help improving performance. Experiments with representative benchmarks and applications, show that ResPCT can outperform state-of-the-art solutions by up to 2.7× …', 'Livre', '2022-03-28', '2024-05-16', 'Proceedings of the Seventeenth European Conference on Computer Systems', '525-540', 5),
(111, 'CPU overheating characterization in HPC systems: a case study', 'With the increase in size of supercomputers, also increases the number of abnormal events. Some of these events might lead to an application failure. Others might simply impact the system efficiency. CPU overheating is one such event that decreases the system efficiency: when a CPU overheats, it reduces its frequency. This paper studies the problem of CPU overheating in supercomputers. In a first part, we analyze data collected over one year on a supercomputer of the top500 list to understand under which conditions CPU overheating occurs. Our analysis show that overheating events are due to some specific applications. In a second part, we evaluate the impact of such overheating events on the performance of MPI applications. Using 6 representative HPC benchmarks, we show that for a majority of the applications, a frequency drop on one CPU impacts the execution time of distributed runs proportionally to …', 'Conférence', '2018-11-16', '2024-05-16', '2018 IEEE/ACM 8th Workshop on Fault Tolerance for HPC at eXtreme Scale (FTXS)', '59-68', 15),
(112, 'Improving message logging protocols scalability through distributed event logging', ' Message logging is an attractive solution to provide fault tolerance for message passing applications because it is more scalable than coordinated checkpointing. Sender-based message logging is a well known optimization that allows to save messages payload in the sender memory and so only the events corresponding to message receptions have to be logged reliably using an event logger. In existing work on message logging, the event logger has always been considered as a centralized process, limiting message logging protocols scalability. In this paper, we propose a distributed event logger. This new event logger takes advantage of multi-cores processors to be executed in parallel with application processes. It makes use of the nodes’ volatile memory to save events reliably. We propose a simple gossip-based dissemination protocol to make application processes aware of new stable events. We …', 'Conférence', '2010-01-01', '2024-05-16', 'Euro-Par 2010-Parallel Processing: 16th International Euro-Par Conference, Ischia, Italy, August 31-September 3, 2010, Proceedings, Part I 16', '511-522', 16),
(113, 'Active optimistic message logging for reliable execution of MPI applications', ' To execute MPI applications reliably, fault tolerance mechanisms are needed. Message logging is a well known solution to provide fault tolerance for MPI applications. It as been proved that it can tolerate higher failure rate than coordinated checkpointing. However pessimistic and causal message logging can induce high overhead on failure free execution. In this paper, we present O2P, a new optimistic message logging protocol, based on active optimistic message logging. Contrary to existing optimistic message logging protocols that saves dependency information on reliable storage periodically, O2P logs dependency information as soon as possible to reduce the amount of data piggybacked on application messages. Thus it reduces the overhead of the protocol on failure free execution, making it more scalable and simplifying recovery. O2P is implemented as a module of the Open MPI library …', 'Conférence', '2009-01-01', '2024-05-16', 'Euro-Par 2009 Parallel Processing: 15th International Euro-Par Conference, Delft, The Netherlands, August 25-28, 2009. Proceedings 15', '615-626', 16),
(114, 'Gamose: An accurate monitoring service for Grid applications', 'Monitoring distributed applications executed on a computational Grid is challenging since they are executed on several heterogeneous nodes belonging to different administrative domains. An application monitoring service should provide users and administrators with useful and dependable data on the applications executed on the Grid. We present in this paper a grid application monitoring service designed to handle high availability and scalability issues. The service supplies information on application state, on failures and on re- source consumption. A set of transparent monitoring mechanisms are used according to grid node nature to effectively monitor the applications. Experiments on the Grid\'5000 testbed show that the service provides dependable information with a minimal cost on Grid performances.', 'Conférence', '2007-07-05', '2024-05-16', 'Sixth International Symposium on Parallel and Distributed Computing (ISPDC\'07)', '40-40', 15),
(115, 'On the performance of delegation over cache-coherent shared memory', 'Delegation is a thread synchronization technique where access to shared data is performed through a dedicated server thread. When a client thread requires shared data access, it makes a request to a server and waits for a response. This paper studies delegation implementation over cache-coherent shared memory, with the goal of optimizing it for high throughput. Whereas client-server communication naturally fits message-passing systems, efficient implementation over cache-coherent shared memory requires careful optimization. We demonstrate optimizations that significantly improve delegation performance on two modern x86 processors (the Intel Xeon Westmere and the AMD Opteron Magny-Cours), enabling us to come up with counter, stack and queue implementations that outperform the best known alternatives in a large number of cases. Our optimized delegation solution achieves 1.4x (resp. 2x) higher …', 'Livre', '2015-01-04', '2024-05-16', 'Proceedings of the 16th International Conference on Distributed Computing and Networking', '1-10', 5),
(116, 'Efficient process replication for MPI applications: sharing work between replicas', 'With the increased failure rate expected in future extreme scale supercomputers, process replication might become a viable alternative to check pointing. By default, the workload efficiency of replication is limited to 50% because of the additional resources that have to be used to execute the replicas of the application\'s processes. In this paper, we introduce intra-parallelization, a solution that avoids replicating all computation by introducing work-sharing between replicas. We show on a representative set of benchmarks that intra-parallelization allows achieving more than 50% efficiency without compromising fault tolerance.', 'Conférence', '2015-05-25', '2024-05-16', '2015 IEEE International Parallel and Distributed Processing Symposium', '645-654', 15),
(117, 'O2P: An extremely optimistic message logging protocol', 'Message logging is a transparent solution to provide fault tolerance for message passing applications. O2P is an extremely optimistic message logging protocol that is proved to tolerate multiple failures. Extremely optimistic message logging aims at combining the advantages of optimistic and pessimistic message logging to be well-suited for large scale applications while minimizing the overhead on failure free execution. In this paper, we present the O2P protocol and prove that it can handle concurrent failures.', '', '2007-01-01', '2024-05-16', '', '', 5),
(118, 'LogFlow: simplified log analysis for large scale systems', 'Distributed infrastructures generate huge amount of logs that can provide useful information about the state of system, but that can be challenging to analyze. The paper presents LogFlow, a tool to help human operators in the analysis of logs by automatically constructing graphs of correlations between log entries. The core of LogFlow is an interpretable predictive model based on a Recurrent Neural Network augmented with a state-of-the-art attention layer from which correlations between log entries are deduced. To be able to deal with huge amount of data, LogFlow also relies on a new log parser algorithm that can be orders of magnitude faster than best existing log parsers. Experiments run with several system logs generated by Supercomputers and Cloud systems show that LogFlow is able to achieve more than 96% of accuracy in most cases. ', 'Livre', '2021-01-05', '2024-05-16', 'Proceedings of the 22nd International Conference on Distributed Computing and Networking', '116-125', 5),
(119, 'High-throughput maps on message-passing manycore architectures: Partitioning versus replication', ' The advent of manycore architectures raises new scalability challenges for concurrent applications. Implementing scalable data structures is one of them. Several manycore architectures provide hardware message passing as a means to efficiently exchange data between cores. In this paper, we study the implementation of high-throughput concurrent maps in message-passing manycores. Partitioning and replication are the two approaches to achieve high throughput in a message-passing system. Our paper presents and compares different strongly-consistent map algorithms based on partitioning and replication. To assess the performance of these algorithms independently of architecture-specific features, we propose a communication model of message-passing manycores to express the throughput of each algorithm. The model is validated through experiments on a 36-core TILE-Gx8036 processor …', 'Conférence', '2014-01-01', '2024-05-16', 'Euro-Par 2014 Parallel Processing: 20th International Conference, Porto, Portugal, August 25-29, 2014. Proceedings 20', '536-547', 19),
(120, 'Fault tolerance in cluster federations with o2p-cf', 'Fault tolerance is one of the key issues for large scale applications executed on high performance computing systems. In a cluster federation, clusters are gathered to provide huge computing power. To work efficiently on such systems, networks characteristics have to be taken into account: the latency between two nodes of different clusters is much higher than the latency between two nodes of the same cluster. In this paper, we present O2P-CF a message logging protocol well-suited to provide fault tolerance for message passing applications executed on cluster federations. O2P-CF is based on the combination of O2P, an extremely optimistic message logging protocol, with a pessimistic message logging protocol.', 'Conférence', '2008-05-19', '2024-05-16', '2008 Eighth IEEE International Symposium on Cluster Computing and the Grid (CCGRID)', '807-812', 15),
(121, 'Beyond The Cloud, How Should Next Generation Utility Computing Infrastructures Be Designed?', 'To accommodate the ever-increasing demand for Utility Computing (UC) resources, while taking into account both energy and economical issues, the current trend consists in building larger and larger data centers in a few strategic locations. Although such an approach enables to cope with the actual demand while continuing to operate UC resources through centralized software system, it is far from delivering sustainable and efficient UC infrastructures. We claim that a disruptive change in UC infrastructures is required: UC resources should be managed differently, considering locality as a primary concern. We propose to leverage any facilities available through the Internet in order to deliver widely distributed UC platforms that can better match the geographical dispersal of users as well as the unending demand. Critical to the emergence of such locality-based UC (LUC) platforms is the availability of appropriate operating mechanisms. In this paper, we advocate the implementation of a unified system driving the use of resources at an unprecedented scale by turning a complex and diverse infrastructure into a collection of abstracted computing facilities that is both easy to operate and reliable. By deploying and using such a LUC Operating System on backbones, our ultimate vision is to make possible to host/operate a large part of the Internet by its internal structure itself: A scalable and nearly infinite set of resources delivered by any computing facilities forming the Internet, starting from the larger hubs operated by ISPs, government and academic institutions to any idle resources that may be provided by end-users. Unlike previous researches on …', '', '2013-07-01', '2024-05-16', '', '', 5),
(122, 'Reasons to be pessimist or optimist for failure recovery in high performance clusters', '', 'Revue', '2009-01-01', '2024-05-16', 'Proceedings of the 2009 IEEE Cluster Conference (September 2009)', '', 5),
(123, 'Supervision d’applications sur grille de calcul', 'Une grille de calcul regroupe des ressources réparties géographiquement au travers de plusieurs domaines d\'administration. L\'objectif est de fournir de grandes capacités de calcul, nécessaires aux applications de calcul scienti que. Les ressources composant une grille sont hétérogènes et volatiles. Les causes de cette volatilité sont multiples: déconnexion volontaire, défaillance au niveau du réseau, défaillance de la ressource, etc. L\'utilisation des ressources d\'une grille est donc complexe. C\'est pourquoi un système peut être utilisé pour en simpli er et optimiser l\'exploitation. Ce système se compose d\'un ensemble de services qui lui permettent d\'o rir des fonctionnalités comparables à celles d\'un système d\'exploitation classique. Une interface utilisateur permet la soumission d\'applications. Un service de gestion d\'applications se charge de trouver sur la grille et d\'allouer aux applications, les ressources …', 'Revue', '2006-06-01', '2024-05-16', 'Rapport de master de recherche, Université de Rennes', '', 5),
(124, 'CPU overheating prediction in HPC systems', ' With the increase in size of supercomputers, also increases the number of abnormal events. CPU overheating is one such event that decreases the system efficiency: when a CPU overheats, it reduces its frequency. This paper presents a machine learning solution to predict such events. The proposed algorithm is based on dynamic time warping for feature extraction and on a machine learning algorithm for classification. It predicts overheating events solely by analyzing the trends of the temperature of the CPUs and can deal with very low temperature sampling rates while having a negligible computational cost in practice. Our evaluation, using data coming from a production supercomputer, shows that the proposed solution can make predictions a few minutes in advance with a good accuracy. Furthermore, considering two simple preventive actions to avoid CPU overheating events, we present an analytical study …', 'Revue', '2021-07-10', '2024-05-16', 'Concurrency and Computation: Practice and Experience', 'e6231', 5),
(125, 'Towards highly available and self-healing grid services', 'The volatility of nodes in large scale distributed systems endangers the availability of grid services and makes them difficult to use. In such a context, structured peer-to-peer overlays can be used to provide scalable and fault tolerant communication mechanisms. To ensure the availability of services, active replication can be used on top of the overlays. In this paper, we present Semias, a framework that is based on active replication on top of a structured overlay to provide high availability and self-healing for stateful grid services. The self-healing mechanisms of Semias ensure the high availability of the replicated services while minimizing the number of reconfigurations. We have used Semias to make Vigne grid middleware services highly available. Experiments run on Grid\'5000 and PlanetLab show the performance and self-healing properties of the framework.', '', '2010-04-25', '2024-05-16', '', '', 5),
(126, 'Addressing the last roadblock for message logging in HPC: Alleviating the memory requirement using dedicated resources', ' Currently used global application checkpoint-restart will not be a suitable solution for HPC applications running on large scale as, given the predicted fault rates, it will impose a high load on the I/O subsystem and lead to inefficient resource usage. Combining application checkpointing with message logging is appealing as it allows restarting only the processes that actually failed. One major issue with message logging protocols is the high amount of memory required to store logs. In this work we propose to use additional dedicated resources to save the part of the logs that would not fit in the memory of a compute node. We show that, combined with a cluster-based hierarchical logging technique, only few dedicated nodes would be required to accommodate the memory requirement of message logging protocols. We additionally show that the proposed technique achieves a reasonable performance …', 'Conférence', '2015-01-01', '2024-05-16', 'Euro-Par 2015: Parallel Processing Workshops: Euro-Par 2015 International Workshops, Vienna, Austria, August 24-25, 2015, Revised Selected Papers 21', '644-655', 19),
(127, 'Providing qos in a grid application monitoring service', 'Monitoring distributed applications executed on a computational Grid is challenging since they are executed on several heterogeneous nodes belonging to different administrative domains. An application monitoring service should provide users and administrators with useful and dependable data on the applications executed on the Grid. We present in this paper a grid application monitoring service designed to handle high availability and scalability issues. The service supplies information on application state, on failures and on resource consumption. A set of monitoring mechanisms are used according to grid node nature to effectively monitor the applications. experiments on the Grid\'5000 testbed show that the service provides dependable information with a minimal cost on Grid performances.', '', '2006-01-01', '2024-05-16', '', '16', 5),
(128, 'Semias: Self-Healing Active Replication on Top of a Structured Peer-to-Peer Overlay', 'Active replication on top of a structured peer-to-peer overlay is an attractive solution for transparently providing high availability to distributed applications. However, self-healing is necessary to ensure the availability of the replicated application despite node arrivals, failures or departures in the overlay. Self-healing means to automatically reconfigure the replica groups when changes in the overlay occur. In the case of active replication, reconfigurations must be done carefully, to keep the replicas consistency. Moreover, as every reconfiguration could imply a state transfer between replicas, their number should be limited. In this paper we propose a self-healing solution that limits the number of group reconfigurations and ensures the availability of the replicated application in a dynamic environment. To evaluate the performance of our solution, we implemented it in a framework, called Semias, in the context of Vigne …', 'Conférence', '2010-10-31', '2024-05-16', '2010 29th IEEE Symposium on Reliable Distributed Systems', '235-244', 15),
(129, 'Combining Optimism and Pessimism in a Grid Message Logging Protocol', 'Fault tolerance is a key issue in grid systems. But few works have been done to provide transparent fault tolerance mechanisms for message passing applications executed in large scale grids. Optimistic and pessimistic message logging protocols are two well known solutions to provide fault tolerance for message passing applications. Although these two approaches seem to be completely opposite, we propose to combine them to create a grid fault tolerance protocol. This new protocol targets federation of clusters, a particular case of grid infrastructure.', 'Conférence', '2007-01-01', '2024-05-16', 'Student Forum of International Conference on Dependable Systems and Networks (DSN 2007)(Supplemental Volume)', '', 5),
(130, 'On the Detection of Silent Data Corruptions in HPC Applications Using Redundant Multi-threading', ' This paper studies the use of Redundant Multi-Threading (RMT) to detect Silent Data Corruptions in HPC applications. To understand if it can be a viable solution in an HPC context, we study two software optimizations to reduce RMT performance overhead by reducing the amount of data exchanged between the replicated threads. We conduct experiments with representative HPC workloads to measure the performance gains obtained through these optimizations, and the error detection coverage they achieve. In the best case, when running on a processor that features Simultaneous Multi-Threading, our results show that the overhead can be as low as 1.4 without significantly reducing the ability to detect data corruptions.', 'Livre', '2020-08-24', '2024-05-16', 'European Conference on Parallel Processing', '290-302', 19),
(131, 'KDetect: Unsupervised Anomaly Detection for Cloud Systems Based on Time Series Clustering', 'To improve the user experience in Cloud systems, it is of major interest for Cloud management tools to be able to automatically detect and notify anomalies in the behavior of services executed in virtual machines in a non-intrusive manner. To this end, this paper presents KDetect, an unsupervised learning algorithm to detect anomalies in periodic time series using clustering techniques. Using unlabeled time series representing the resource consumption of an unknown service executing in a virtual machine as input, KDetect is able to identify patterns that correspond to anomalies in the behavior of that service, assuming that the service behaves normally most of the time. Our evaluation, run with data extracted from a production dataset and coming from virtual machines exhibiting very different normal and abnormal behaviors, shows that KDetect is able to achieve a very high accuracy in the detection of anomalies …', 'Livre', '2020-06-23', '2024-05-16', 'Proceedings of the 3rd International Workshop on Systems and Network Telemetry and Analytics', '3-10', 5),
(132, 'Leveraging Modern Multi-core Processor Features to Efficiently Deal with Silent Errors', 'Since current multi-core processors are more com-plex systems on a chip than previous generations, some transient errors may happen, go undetected by the hardware and can potentially corrupt the result of an expensive calculation. Because of that, techniques such as Instruction Level Redundancy or checkpointing are utilized to detect and correct these soft errors; however these mechanisms are highly expensive, adding a lot of resource overhead. Hardware Transactional Memory (HTM) exposes a very convenient and efficient way to revert the state of a core’s cache, which can be utilized as a recovery technique. An experimental prototype has been created that uses such feature to recover the previous state of the calculation when a soft error has been found. The combination of HTM, Hyper-Threading and Memory Protection Extensions may further improve the performance, applicability and confidence of our technique.', 'Revue', '2017-01-01', '2024-05-16', 'Memorias de congresos TEC', '', 5),
(133, 'Panels: Panel session I: Resiliency in extreme scale high performance computing systems and applications', 'Recent experiences in extreme scale high performance computing systems and applications indicate that failure rates continue to be on the rise, at times exponentially. The reasons are multi-faceted. The probability of errors not only grows with system size, but also with increasing architectural vulnerabilities caused by employing accelerators, such as FPGAs and GPUs, and by shrinking nanometer technologies. Ever increasing component counts and software complexities will continue to rise, while application correctness and execution efficiency will be expected to become even more critical. The gains made due to today\'s and future generation extreme scale designs can be diminished due to lack of fault tolerance and resiliency adequate solutions. Reactive fault tolerance technologies, such as checkpointing/restarting, are unable to handle high failure rates given the overheads associated with such approaches …', 'Conférence', '2016-07-18', '2024-05-16', '2016 International Conference on High Performance Computing & Simulation (HPCS)', '1-10', 15),
(134, 'HydEE: Vers un protocole de recouvrement arrière hiérarchique pour les machines exascales De l\'exploitation du déterminisme des émissions dans les protocoles de recouvrement …', 'Dans la perspective de la conception de super-calculateurs exascale, de nouvelles solutions de tolérance aux fautes doivent être trouvées. Pour les applications parallèles à échange de messages, les protocoles de recouvrement arrière existants ne sont pas adaptés. Pour pou-voir supporter des applications de très grande taille et des fréquences de défaillance élevées, un protocole doit être capable de confiner les conséquences des défaillances à un petit sous ensemble de processus tout en offrant de bonnes performances en fonctionnement normal, et en limitant les quantités de données à sauvegarder, en particulier en mémoire. Pour répondre à ces objectifs, nous proposons HydEE, un protocole de recouvrement arrière hiérarchique com-binant sauvegarde de points de reprise coordonnés et enregistrement de messages. HydEE se fonde sur le déterminisme des émissions des applications parallèles du calcul scientifique pour pouvoir tolérer des fautes multiples sans recourir à un support de stockage stable. Nos évalua-tions montrent que pour la plupart des applications, sauvegarder le contenu de moins de 15% des messages en mémoire, permet de limiter les retours arrière après une défaillance à moins de 15% des processus. ABSTRACT. The move towards exascale super-computers requires new fault tolerance solutions. Regarding parallel message passing applications, existing rollback-recovery protocols are not suited. To be able to deal with very large scale applications and high failure rate, a proto-Technique et science informatiques', 'Revue', '2012-12-30', '2024-05-16', 'Revue des Sciences et Technologies de l\'Information-Série TSI: Technique et Science Informatiques', '1049-1078', 5),
(135, 'Using a Failure History Service for Reliable Grid Node Information', 'The need for reliability in Grid Systems is a difficult challenge which is very important in the context of highly dynamic systems composed of thousands of nodes. Failure management is a key component in the attempt to provide such a reliable environment. The proposed approach is based on the existence of accurate failure information about the nodes in the Grid which is very difficult in large scale systems. This paper proposes a failure history service used to share failure information which is critical to the management of resources in large scale distributed systems, thus improving the overall reliability. This novel service ensures that the information about the current state of a node, as well as its failure history, is as accurate as possible even when facing a large number of node failures. This solution aims to increase the reliability of Grid systems by providing accurate data which can be used to analyze failures over …', 'Conférence', '2010-11-04', '2024-05-16', '2010 International Conference on P2P, Parallel, Grid, Cloud and Internet Computing', '37-44', 15),
(136, 'Services et protocoles pour l\'exécution fiable d\'applications distribuées dans les grilles de calcul', 'Une grille de calcul regroupe un très grand nombre de ressources de calcul hétérogènes, pouvant appartenir à différents domaines d\'administration. Les grille sont attractives car elles peuvent fournir à leurs utilisateurs les ressources nécessaires à l\'exécution d\'applications de calcul scientifique. Cependant exécuter une application sur la grille est une tâche difficile car la fréquence des défaillances matérielles y est élevés. Pour assurer l\'exécution fiable d\'applications distribuées dans les grilles de calcul, nous proposons tout d\'abord un service de recouvrement arrière assurant le redémarrage automatique des applications défaillantes. Nous proposons ensuite une solution assurant la haute disponibilité et l\'auto-réparation de services de grille. Enfin nous proposons un protocole de recouvrement arrière pour application à échange de messages passant à l\'échelle.', '', '2009-12-11', '2024-05-16', '', '', 5),
(137, 'Semias: A Framework for Highly Available and Self-Healing Services in Large Scale Dynamic Distributed Systems', 'Next generation HPC systems will be large scale distributed systems spread over wide area networks. Overlays are used in those systems to provide scalable and fault tolerant communication mechanisms. In such a context, providing highly available services to users is challenging. In this paper, we present Semias, a framework that provides stateful services with high availability and self-healing. Based on active replication on top of a structured overlay, Semias requires very few modifications of existing services. Semias self-healing mechanisms are designed to minimize the number of reconfigurations of replicated services while ensuring high availability. We have used Semias to make Vigne grid middleware services highly available. Experiments run on the Grid\'5000 testbed show the performance and self-healing properties of the framework.', '', '2009-01-01', '2024-05-16', '', '', 5),
(138, 'O2P: un protocole à enregistrement de messages extrêmement optimiste', '', '', '0000-00-00', '2024-05-16', '', '', 5),
(139, 'Lecture notes: Studying distributed systems–Atomic Broadcast', 'The atomic broadcast communication primitive is a group communication primitive, as the other broadcast primitives studied in a previous lecture. Compared to reliable broadcast primitives studied earlier, it orders all messages, even those from different senders. Atomic broadcast is an important abstraction as it is necessary to implement active replication: it is used to ensure consistency between multiple active replicas that are used to implement a logical service, and whose behavior can be captured by a deterministic state machine.', '', '0000-00-00', '2024-05-16', '', '', 5),
(140, 'Lecture notes: Studying distributed systems–About abstractions and failure detectors', 'Distributed systems are complex systems with a large diversity in hardware and software. Servers can vary in the number of processors, their type, the storage they have access to, etc. Communication infrastructures differ in performance, reliability, topology, etc. Hence, to be able to reason about distributed systems, we need to define abstractions. The first risk, if we would focus on a specific distributed infrastructure, would be to design solutions that could only work on that specific infrastructure. The second risk is that the systems are so complex that trying to take into all the problems at once would be so difficult that we would never reach to a solution.', '', '0000-00-00', '2024-05-16', '', '', 5),
(141, 'Lecture notes: Studying distributed systems–Consensus', 'For instance, consensus is required to implement active replication. Active replication is used to made a service fault tolerant by creating multiple replicas of that service. Active replication refers to replication techniques where all replicas are active and are able to process clients requests (as opposed to passive replication). To guarantee that a client receives the same answer no matter which replica answers its request, the only solution is that all replicas process all the requests from all clients in the same order: They need to reach consensus on the order in which requests should be processed.', '', '0000-00-00', '2024-05-16', '', '', 5),
(142, 'Lecture notes: Studying distributed systems–Motivations and the ordering of events', 'We start by defining the concept of distributed system. As a starting point we can quote L. Lamport:', '', '0000-00-00', '2024-05-16', '', '', 5),
(143, 'Lecture notes: Replication for fault tolerance in the Cloud', 'To be able to reason about fault tolerance techniques, we need to define an abstract model that captures the main characteristics of the faults we want be able to tackle. In the following, we will assume benign faults. For processes, benign faults correspond to crashes: a process either executes according to the specification, or stops executing. For channels, benign faults correspond to the loss of messages. Another model that could have been considered is Random faults (Byzantine). In this model, a system provides random outputs to the same inputs. It covers the cases where different users might observe different behaviors and the cases of malicious behaviors. Due to the complexity of the solutions that deal with byzantine faults, we do not consider them hereafter.', '', '0000-00-00', '2024-05-16', '', '', 5),
(144, 'Lecture notes: About failures in the Cloud', 'Lecture notes: About failures in the Cloud Page 1 Lecture notes: About failures in the Cloud M2 \nMOSIG: Cloud Computing, from infrastructure to applications Thomas Ropars 2023 These \nlecture notes discuss failures in the Cloud. 1 Some definitions 1.1 Fault, error, and failures An \nerror is the part of the system state that may cause a subsequent failure: a failure occurs when \nan error reaches the service interface and alters the service. A fault is the adjudged or \nhypothesized cause of an error Internal fault External fault Error Error activation propagation \nService interface Failure Figure 1: Fault/error/failure The failure of a component is a fault from \nthe perspective of the component using it, as illustrated in Figure 2. Failures and Cloud \napplications When building cloud applications, we would like to avoid that a failure impacting \nan internal component of the system, lead to a failure for a user service. 2 A focus on availability …', '', '0000-00-00', '2024-05-16', '', '', 5);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(145, 'LSR', 'Record #252206 English Français login Menu Search Browse Collections Help English \nFrançais login Infoscience Details Title LSR Formal Name (French) Laboratoire de systèmes \nrépartis Formal Name (English) Distributed Systems Laboratory Lab Manager Infoscience team \nGroup ID U10411 Affiliated authors Biely, Martin Boichat, Romain Borran, Fatemeh Cavin, \nDavid de Sousa Santos, Nuno Filipe Eugster, Patrick Favez, Cendrine Hutle, Martin Kalantari, \nBabak Mena, Sergio Meoni, Marco Milosevic, Zarko Pedone, Fernando Petrovic, Darko \nRopars, Thomas Sanchez, Eduardo Sasson, Yoav Schiper, André Institute IINFCOM Faculty IC \nNote Members of LSR-unit Linked resource http://lsrwww.epfl.ch/ Publications A Fault-Tolerant \nToken-Based Atomic Broadcast Algorithm A Simple Logic for Authentication Protocol Design \nA formal approach to fault tolerant distributed consensus Communication Predicates: A high-…', '', '0000-00-00', '2024-05-16', '', '', 5),
(146, 'HydEE: Vers un protocole de recouvrement arrière hiérarchique pour les machines exascales', 'Dans la perspective de la conception de super-calculateurs exascale, de nouvelles solutions de tolérance aux fautes doivent être trouvées. Pour les applications parallèles à échange de messages, les protocoles de recouvrement arrière existants ne sont pas adaptés. Pour pouvoir supporter des applications de très grande taille et des fréquences de défaillance élevées, un protocole doit être capable de confiner les conséquences des défaillances à un petit sous ensemble de processus tout en offrant de bonnes performances en fonctionnement normal, et en limitant les quantités de données à sauvegarder, en particulier en mémoire. Pour répondre à ces objectifs, nous proposons HydEE, un protocole de recouvrement arrière hiérarchique combinant sauvegarde de points de reprise coordonnés et enregistrement de messages. HydEE se fonde sur le déterminisme des émissions des applications parallèles du calcul scientifique pour pouvoir tolérer des fautes multiples sans recourir à un support de stockage stable. Nos évaluations montrent que pour la plupart des applications, sauvegarder le contenu de moins de 15% des messages en mémoire, permet de limiter les retours arrière après une défaillance à moins de 15% des processus.ABSTRACT. The move towards exascale super-computers requires new fault tolerance solutions. Regarding parallel message passing applications, existing rollback-recovery protocols are not suited. To be able to deal with very large scale applications and high failure rate, a proto-', '', '0000-00-00', '2024-05-16', '', '', 5),
(147, 'Improving Grid Systems Reliability with a Failure History Service', 'The field of Grid computing has seen a lot of interest in recent years due to the demand for more and more computing power. There are already systems using thousands of nodes and this increase in size also leads to new challenges like the need for increased reliability. A very important part in ensuring reliability in distributed systems is failure detection and the need for accurate information about the reliability of the available nodes. This paper proposes a failure history service that allows services and applications executing in the grid to share their information about failures. This novel service ensures that the information about the current state of a node, as well as its failure history, is as accurate as possible even in a large scale dynamic system. By providing accurate failure data and allowing to analyze failures over time, this solution aims to increase the reliability of Grid systems.', '', '0000-00-00', '2024-05-16', '', '', 5),
(148, 'Distributed Algorithms and Fault Tolerance', 'Distributed Algorithms and Fault Tolerance - Error Detection Page 1 Distributed Algorithms and \nFault Tolerance Error Detection Thomas Ropars thomas.ropars@imag.fr ERODS research team \n– LIG/IM2AG/UGA 2015 2015 1 Page 2 Agenda Introduction to fault tolerance Physical \nredundancy Temporal redundancy Design redundancy Information redundancy Software \nreplication 2015 2 Page 3 Fault tolerance Definition Fault tolerance aims at preserving the \ndelivery of correct service in the presence of active faults. 2015 3 Page 4 Fault tolerance \nDefinition Fault tolerance aims at preserving the delivery of correct service in the presence of \nactive faults. Fault tolerance includes: ▶ Error detection ► Very important: you can’t tolerate a \nfault if you don’t know it happened. ▶ Recovery ► Error handling: Eliminates errors from the \nsystem state ► Fault handling: Prevents located faults from being activated again 2015 3 Page 5 …', '', '0000-00-00', '2024-05-16', '', '', 5),
(149, 'IRISA', 'Monitoring distributed applications executed on a computational Grid is challenging since they are executed on several heterogeneous nodes belonging to different administrative domains. An application monitoring service should provide users and administrators with useful and dependable data on the applications executed on the Grid. We present in this paper a grid application monitoring service designed to handle high availability and scalability issues. The service supplies information on application state, on failures and on resource consumption. A set of monitoring mechanisms are used according to grid node nature to effectively monitor the applications. Experiments on the Grid’5000 testbed show that the service provides dependable information with a minimal cost on Grid performances.', '', '0000-00-00', '2024-05-16', '', '', 5),
(150, 'FTXS 2014 Workshop Committee', 'Provides a listing of current committee members and society officers.', '', '0000-00-00', '2024-05-16', '', '', 5),
(151, 'MPI: the complete reference (Vol. 2)', '', '', '1998-01-01', '2024-05-17', '', '', 29),
(152, 'MPI–The Complete Reference, 2nd edn. The MPI Core, vol. 1', '', '', '1998-01-01', '2024-05-17', '', '', 30),
(153, 'S. H uss-Lederman, D. Walker, andJ. Dongarra. MPI-The CompleteReference, volume 1, The MPI Core', '', 'Revue', '0000-00-00', '2024-05-17', 'MIT Press,', '8', 5),
(154, 'The NYU Ultracomputer: Designing an MIMD Shared Memory Parallel Computer', 'We present the design for the NYU Ultracomputer, a shared-memory MIMD parallel machine composed of thousands of autonomous processing elements. This machine uses an enhanced message switching network with the geometry of an Omega-network to approximate the ideal behavior of Schwartz\'s paracomputer model of computation and to implement efficiently the important fetch-and-add synchronization primitive. We outine the hardware that would be required to build a 4096 processor system using 1990\'s technology. We also discuss system software issues, and present analytic studies of the network performance. Finally, we include a sample of our effort to implement and simulate parallel variants of important scientific p̀rograms.', 'Revue', '1983-02-01', '2024-05-17', 'Computers, IEEE Transactions on', '175-189', 15),
(155, 'The international exascale software project roadmap', 'Over the last 20 years, the open-source community has provided more and more software on which the world’s high-performance computing systems depend for performance and productivity. The community has invested millions of dollars and years of effort to build key components. However, although the investments in these separate software elements have been tremendously valuable, a great deal of productivity has also been lost because of the lack of planning, coordination, and key integration of technologies necessary to make them work together smoothly and efficiently, both within individual petascale systems and between different systems. It seems clear that this completely uncoordinated development model will not provide the software needed to support the unprecedented parallelism required for peta/ exascale computation on millions of cores, or the flexibility required to exploit new hardware models …', 'Revue', '2011-02-01', '2024-05-17', 'The international journal of high performance computing applications', '3-60', 25),
(156, 'The performance of multistage interconnection networks for multiprocessors', 'This paper studies the performance of unbuffered and buffered, packet-switching, multistage interconnection networks. We begin by reviewing the definition of banyan networks and introducing some generalizations of them. We then present an asymptotic analysis of the performance of unbuffered banyan networks, thereby solving a problem left open by Patel. We analyze the performance of the unbuffered generalized banyan networks, and compare networks with approximately equivalent hardware complexity. Finally, we analyze the performance of buffered banyan networks and again compare networks with approximately equivalent hardware complexity.', 'Revue', '1983-12-01', '2024-05-17', 'IEEE transactions on computers', '1091-1098', 15),
(157, 'Addressing failures in exascale computing', 'We present here a report produced by a workshop on ‘Addressing failures in exascale computing’ held in Park City, Utah, 4–11 August 2012. The charter of this workshop was to establish a common taxonomy about resilience across all the levels in a computing system, discuss existing knowledge on resilience across the various hardware and software layers of an exascale system, and build on those results, examining potential solutions from both a hardware and software perspective and focusing on a combined approach.The workshop brought together participants with expertise in applications, system software, and hardware; they came from industry, government, and academia, and their interests ranged from theory to implementation. The combination allowed broad and comprehensive discussions and led to this document, which summarizes and builds on those discussions.', 'Revue', '2014-05-01', '2024-05-17', 'The International Journal of High Performance Computing Applications', '129-173', 25),
(158, 'Efficient and correct execution of parallel programs that share memory', 'In this paper we consider an optimization problem that arises in the execution of parallel programs on shared-memory multiple-instruction-stream, multiple-data-stream (MIMD) computers. A program on such machines consists of many sequential program segments, each executed by a single processor. These segments interact as they access shared variables. Access to memory is asynchronous, and memory accesses are not necessarily executed in the order they were issued. An execution is correct if it is sequentially consistent: It should seem as if all the instructions were executed sequentially, in an order obtained by interleaving the instruction streams of the processors. Sequential consistency can be enforced by delaying each access to shared memory until the previous access of the same processor has terminated. For performance reasons, however, we want to allow several accesses by the same processor …', 'Revue', '1988-04-01', '2024-05-17', 'ACM Transactions on Programming Languages and Systems (TOPLAS)', '282-312', 14),
(159, 'Toward exascale resilience', 'Over the past few years resilience has became a major issue for high-performance computing (HPC) systems, in particular in the perspective of large petascale systems and future exascale systems. These systems will typically gather from half a million to several millions of central processing unit (CPU) cores running up to a billion threads. From the current knowledge and observations of existing large systems, it is anticipated that exascale systems will experience various kind of faults many times per day. It is also anticipated that the current approach for resilience, which relies on automatic or application level checkpoint/ restart, will not work because the time for checkpointing and restarting will exceed the mean time to failure of a full system. This set of projections leaves the community of fault tolerance for HPC systems with a difficult challenge: finding new approaches, which are possibly radically disruptive, to run …', 'Revue', '2009-11-01', '2024-05-17', 'The International Journal of High Performance Computing Applications', '374-388', 25),
(160, 'Toward exascale resilience: 2014 update', 'Resilience is a major roadblock for HPC executions on future exascale systems. These systems will typically gather millions of CPU cores running up to a billion threads. Projections from current large systems and technology evolution predict errors will happen in exascale systems many times per day. These errors will propagate and generate various kinds of malfunctions, from simple process crashes to result corruptions.The past five years have seen extraordinary technical progress in many domains related to exascale resilience. Several technical options, initially considered inapplicable or unrealistic in the HPC context, have demonstrated surprising successes. Despite this progress, the exascale resilience problem is not solved, and the community is still facing the difficult challenge of ensuring that exascale applications complete and generate correct results while running on unstable systems. Since 2009 …', '', '2014-04-06', '2024-05-17', '', '5-28', 31),
(161, 'MPI: a standard message passing interface', 'MPI is a proposed standard message passing interface originally designed for writing applications and libraries for distributed memory environments. The main advantages of establishing a message passing interface for such environments are portability and ease-of-use, and a standard message passing interface is a key component in building a concurrent computing environment in which applications, software libraries, and tools can be transparently ported between di erent machines. Furthermore, the de nition of a message passing standard provides vendors with a clearly de ned set of routines that they can implement e ciently, or in some cases provide hardware or low-level system support for, thereby enhancing scalability. The functionality that MPI is designed to provide is based on current common practice, and is similar to that provided by widely-used message passing systems such as Express 11], NX/2 12], Vertex, 10], parmacs 7, 8], and P4 9]. In addition, the exibility and usefulness of MPI has been broadened by incorporating ideas from more recent and innovative message passing systems such as chimp 4, 5], Zipcode 13, 14], and the IBM External User Interface 6].The MPI standardization e ort involved about 60 people from 40 organizations mainly from the United States and Europe. Most of the major vendors of concurrent computers were involved in MPI, along with researchers from universities, government laboratories, and industry. The standardization process began with the Workshop on Standards for Message Passing in a Distributed Memory Environment, sponsored by the Center for Research on Parallel Computing, held …', 'Revue', '1996-01-01', '2024-05-17', 'Supercomputer', '56-68', 32),
(162, 'A Model for Hierarchical Memory', 'In this paper we introduce the Hierarchical Memory Model (HMM) of computation. It is intended to model computers with multiple levels in the memory hierarchy. Access to memory location x is assumed to take time ⌈ log x ⌉. Tight lower and upper bounds are given in this model for the time complexity of searching, sorting, matrix multiplication and FFT. Efficient algorithms in this model utilize locality of reference by bringing data into fast memory and using them several times before returning them to slower memory. It is shown that the circuit simulation problem has inherently poor locality of reference. The results are extended to HMM\'s where memory access time is given by an arbitrary (nondecreasing) function. Tight upper and lower bounds are obtained for HMM\'s with polynomial memory access time; the algorithms for searching, FFT and matrix multiplication are shown to be optimal for arbitrary memory access …', 'Revue', '1987-01-01', '2024-05-17', 'Proceedings of the nnual ACM Symposium on Theory of Computing', '305-314', 33),
(163, 'Getting up to speed: The future of supercomputing', 'Supercomputers play a significant and growing role in a variety of areas important to the nation. They are used to address challenging science and technology problems. In recent years, however, progress in supercomputing in the United States has slowed. The development of the Earth Simulator supercomputer by Japan that the United States could lose its competitive advantage and, more importantly, the national competence needed to achieve national goals. In the wake of this development, the Department of Energy asked the NRC to assess the state of US supercomputing capabilities and relevant R&D. Subsequently, the Senate directed DOE in S. Rpt. 107-220 to ask the NRC to evaluate the Advanced Simulation and Computing program of the National Nuclear Security Administration at DOE in light of the development of the Earth Simulator. This report provides an assessment of the current status of supercomputing in the United States including a review of current demand and technology, infrastructure and institutions, and international activities. The report also presents a number of recommendations to enable the United States to meet current and future needs for capability supercomputers.', '', '2005-03-03', '2024-05-17', '', '', 34),
(164, 'A complexity theory of efficient parallel algorithms', 'This paper outlines a theory of parallel algorithms that emphasizes two crucial aspects of parallel computation: speedup the improvement in running time due to parallelism, and efficiency, the ratio of work done by a parallel algorithm to the work done by a sequential algorithm. We define six classes of algorithms in these terms; of particular interest is the class, EP, of algorithms that achieve a polynomial speedup with constant efficiency. The relations between these classes are examined. We investigate the robustness of these classes across various models of parallel computation. To do so, we examine simulations across models where the simulating machine may be smaller than the simulated machine. These simulations are analyzed with respect to their efficiency and to the reduction in the number of processors. We show that a large number of parallel computation models are related via efficient simulations, if a …', 'Revue', '1990-03-13', '2024-05-17', 'Theoretical Computer Science', '95-132', 35),
(165, 'The power of parallel prefix', 'The prefix computation problem is to compute all  n  initial products  a 1 * . . . * a 1 , i =1, . . .,  n  of a set of  n  elements, where * is an associative operation. An O(((log n ) log(2 n / p ))XI( n / p )) time deterministic parallel algorithm using  p ≤ n  processors is presented to solve the prefix computation problem, when the order of the elements is specified by a linked list. For  p ≤O( n 1-ε )(ε>0 any constant), this algorithm achieves linear speedup. Such optimal speedup was previously achieved only by probabilistic algorithms. This study assumes the weakest PRAM model, where shared memory locations can only be exclusively read or written (the EREW model).', 'Revue', '1985-10-01', '2024-05-17', 'IEEE Transactions on Computers', '965-968', 15),
(166, 'Blue Gene: A vision for protein science using a petaflop supercomputer', 'In December 1999, IBM announced the start of a five-year effort to build a massively parallel computer, to be applied to the study of biomolecular phenomena such as protein folding. The project has two main goals: to advance our understanding of the mechanisms behind protein folding via large-scale simulation, and to explore novel ideas in massively parallel machine architecture and software. This project should enable biomolecular simulations that are orders of magnitude larger than current technology permits. Major areas of investigation include: how to most effectively utilize this novel platform to meet our scientific goals, how to make such massively parallel machines more usable, and how to achieve performance targets, with reasonable cost, through novel machine architectures. This paper provides an overview of the Blue Gene project at IBM Research. It includes some of the plans that have been made …', 'Revue', '2001-01-01', '2024-05-17', 'IBM systems journal', '310-327', 36),
(167, 'Communication complexity of PRAMs', 'We propose a model, LPRAM, for parallel random access machines with local memory that captures both the communication and computational requirements in parallel computation. For this model, we present several interesting results, including the following: Two n× n matrices can be multiplied in 0 (n 3/p) computation time and 0 (n 2/p 2 3) communication steps using p processors (for p= 0 (n 3/log 3 2 n)). Furthermore, these bounds are optimal for arithmetic on semirings (using+,× only). It is shown that any algorithm that uses comparisons only and that sorts n words requires Ω (n log n/(p log (n/p))) communication steps for 1< p< n. We also provide an algorithm that sorts n words and uses (-)(n log n/p) computation time and (-)(n log n/p log (n/p))) communication steps. These bounds also apply for computing an n-point FFT graph. It is shown that computing any binary tree τ with n nodes and height h requires Ω (n …', 'Revue', '1990-03-13', '2024-05-17', 'Theoretical Computer Science', '3-28', 35),
(168, 'SP2 system architecture', 'Scalable parallel systems are increasingly being used today to address existing and emerging application areas that require performance levels significantly beyond what symmetric multiprocessors are capable of providing. These areas include traditional technical computing applications, commercial computing applications such as decision support and transaction processing, and emerging areas such as “grand challenge” applications, digital libraries, and video production and distribution. The IBM SP2™ is a general-purpose scalable parallel system designed to address a wide range of these applications. This paper gives an overview of the architecture and structure of SP2, discusses the rationale for the significant system design decisions that were made, indicates the extent to which key objectives were met, and identifies future system challenges and advanced technology development areas.', 'Revue', '1995-01-01', '2024-05-17', 'IBM Systems Journal', '414-446', 36),
(169, 'Computing on an anonymous ring', 'The computational capabilities of a system of n indistinguishable (anonymous) processors arranged on a ring in the synchronous and asynchronous models of distributed computation are analyzed. A precise characterization of the functions that can be computed in this setting is given. It is shown that any of these functions can be computed in O(n2) messages in the asynchronous model. This is also proved to be a lower bound for such elementary functions as AND, SUM, and Orientation. In the synchronous model any computable function can be computed in O(n log n) messages. A ring can be oriented and start synchronized within the same bounds. The main contribution of this paper is a new technique for proving lower bounds in the synchronous model. With this technique tight lower bounds of θ(n log n) (for particular n) are proved for XOR, SUM, Orientation, and Start Synchronization. The technique is based on …', 'Revue', '1988-10-01', '2024-05-17', 'Journal of the ACM (JACM)', '845-875', 14),
(170, 'MPI: The Complete Reference—The MPI Core, Vol. 1', '', '', '1998-01-01', '2024-05-17', '', '', 37),
(171, 'Generic topology mapping strategies for large-scale parallel architectures', 'The steadily increasing number of nodes in high-performance computing systems and the technology and power constraints lead to sparse network topologies. Efficient mapping of application communication patterns to the network topology gains importance as systems grow to petascale and beyond. Such mapping is supported in parallel programming frameworks such as MPI, but is often not well implemented. We show that the topology mapping problem is NP-complete and analyze and compare different practical topology mapping heuristics. We demonstrate an efficient and fast new heuristic which is based on graph similarity and show its utility with application communication patterns on real topologies. Our mapping strategies support heterogeneous networks and show significant reduction of congestion on torus, fat-tree, and the PERCS network topologies, for irregular communication patterns. We also …', 'Livre', '2011-05-31', '2024-05-17', 'Proceedings of the international conference on Supercomputing', '75-84', 5),
(172, 'Hierarchical memory with block transfer', 'In this paper we introduce a model of Hierarchical Memory with Block Transfer (BT for short). It is like a random access machine, except that access to location x takes time f(x), and a block of consecutive locations can be copied from memory to memory, taking one unit of time per element after the initial access time. We first study the model with f(x) = xα for 0 ≪ α ≪ 1. A tight bound of θ(n log log n) is shown for many simple problems: reading each input, dot product, shuffle exchange, and merging two sorted lists. The same bound holds for transposing a √n × √n matrix; we use this to compute an FFT graph in optimal θ(n log n) time. An optimal θ(n log n) sorting algorithm is also shown. Some additional issues considered are: maintaining data structures such as dictionaries, DAG simulation, and connections with PRAMs. Next we study the model f(x) = x. Using techniques similar to those developed for the previous …', 'Conférence', '1987-10-12', '2024-05-17', '28th Annual Symposium on Foundations of Computer Science (sfcs 1987)', '204-216', 15),
(173, 'Probabilities over rich languages, testing and randomness', 'The basic concept underlying probability theory and statistics is a function assigning numerical values (probabilities) to events. An “event” in this context is any conceivable state of affairs including the so-called “empty event”—an a priori impossible state. Informally, events are described in everyday language (e.g. “by playing this strategy I shall win $1000 before going broke”). But in the current mathematical framework (first proposed by Kolmogoroff [Ko 1]) they are identified with subsets of some all-inclusive set Q. The family of all events constitutes a field, or σ-field, and the logical connectives ‘and’, ‘or’ and ‘not’ are translated into the set-theoretical operations of intersection, union and complementation. The points of Q can be regarded as possible worlds and an event as the set of all worlds in which it takes place. The concept of a field of sets is wide enough to accommodate all cases and to allow for a general …', 'Revue', '1982-09-01', '2024-05-17', 'The journal of symbolic logic', '495-548', 38),
(174, 'Parallel programming must be deterministic by default', 'In today’s widely used parallel programming models, subtle programming errors can lead to unintended nondeterministic behavior and hard to catch bugs. In contrast, we argue for a parallel programming model that is deterministic by default: deterministic behavior is guaranteed unless the programmer explicitly uses nondeterministic constructs. This goal is particularly challenging for modern object-oriented languages with expressive use of reference aliasing and updates to shared mutable state. We propose a broad research agenda in support of this goal, and we describe some of our own work to further that agenda.', 'Revue', '2009-03-30', '2024-05-17', 'Usenix HotPar', '1', 5),
(175, 'MPI-2: Extending the message-passing interface', ' This paper describes current activities of the MPI-2 Forum. The MPI-2 Forum is a group of parallel computer vendors, library writers, and application specialists working together to define a set of extensions to MPI (Message Passing Interface). MPI was defined by the same process and now has many implementations, both vendor-proprietary and publicly available, for a wide variety of parallel computing environments. In this paper we present the salient aspects of the evolving MPI-2 document as it now stands. We discuss proposed extensions and enhancements to MPI in the areas of dynamic process management, one-sided operations, collective operations, new language binding, real-time computing, external interfaces, and miscellaneous topics.', 'Conférence', '1996-01-01', '2024-05-17', 'Euro-Par\'96 Parallel Processing: Second International Euro-Par Conference Lyon, France, August 26–29 1996 Proceedings, Volume I 2', '128-135', 16),
(176, 'On communication latency in PRAM computations', 'Multiprocessors typicMly have substantial amounts of hardware devoted to communicating between the processors. The reason is that communication delays can have a significant bearing on the performance of the machine. In shared memory machines such as the BBN Butterfly [RT86] or the IBM RP3 [Pf85] access to global memory takes tens of instruction cycles. Messag~ passing systems~ on the other hand, have communication latency from hundreds to thousands of instruction cycles [Ka87].The programmer attempts to minimize the effect of communication by judicious algorithm design. However, the success in doing so depends on the level of abstraction available. For instance, if the model of computation includes local as well as global memory (unlike a pure PRAM), then temporal locality of reference can be utilized to reduce communication [PU87, PY88, AC88].', 'Livre', '1989-03-01', '2024-05-17', 'Proceedings of the first annual ACM symposium on Parallel algorithms and architectures', '11-21', 5),
(177, 'MPI, The Complete Reference. Scientific and Engineering Computation', '', '', '1996-01-01', '2024-05-17', '', '', 29),
(178, 'Efficient synchronization of multiprocessors with shared memory', 'A new formalism is given for read-modify-write (RMW) synchronization operations. This formalism is used to extend the memory reference combining mechanism introduced in the NYU Ultracomputer, to arbitrary RMW operations. A formal correctness proof of this combining mechanism is given. General requirements for the practicality of combining are discussed. Combining is shown to be practical for many useful memory access operations. This includes memory updates of the form mem_val := mem_val op val, where op need not be associative, and a variety of synchronization primitives. The computation involved is shown to be closely related to parallel prefix evaluation.', 'Revue', '1988-10-01', '2024-05-17', 'ACM Transactions on Programming Languages and Systems (TOPLAS)', '579-601', 14),
(179, 'On parallel searching', 'We investigate the complexity of seaching by comparisons a table of n elements on a synchronous, shared memory parallel computer with p processors. We show that O(lgn) steps are required if concurrent access to the same memory cell is not allowed, whereas only O(lgn/lgp) steps are required if simultaneous reads are allowed. We next show that it is possible to search in O(lg(n)/p) steps if more general operations are used.', 'Livre', '1982-08-18', '2024-05-17', 'Proceedings of the first ACM SIGACT-SIGOPS symposium on Principles of distributed computing', '242-253', 5),
(180, 'A message passing standard for MPP and workstations', 'COMMUNICATIONS OF THE ACM July 1996/Vol. 39, No. 7 85 most useful features of several systems, rather than choosing a single system as the standard. MPI has roots in PVM [4, 5], Express [9], P4 [1], Zipcode [10], and PARMACS [2], and in systems sold by IBM, Intel, Meiko Scientific, Cray Research, and nCube. MPI is used to specify the communication among a set of processes forming a concurrent program. The message-passing paradigm is attractive because of its wide portability and scalability. It is easily compatible with both distributed-memory multicomputers and sharedmemory multiprocessors, with NOWs, and with combinations of these elements. Message passing will not be made obsolete by increased network speeds or by architectures combining shared and distributed-memory components. Though much of MPI standardizes the common practice of existing message-passing systems, MPI goes …', 'Revue', '1996-07-01', '2024-05-17', 'Communications of the ACM', '84-90', 14),
(181, 'Overview of the MPI-IO Parallel I/O Interface', '', 'Livre', '2002-01-01', '2024-05-17', 'High Performance Mass Storage and Parallel I/O: Technologies and Applications', '', 39),
(182, 'Random walks on weighted graphs and applications to on-line algorithms', 'The design and analysis of randomized on-line algorithms are studied. This problem is shown to be closely related to the synthesis of random wdlks on graphs with positive real costs on their edges. A theory is developed for the synthesis of such wdlks, and it is employed to design competitive on-line algorithms.', 'Revue', '1993-07-01', '2024-05-17', 'Journal of the ACM (JACM)', '421-453', 14),
(183, 'Big data, but are we ready?', 'We welcome the timely Review by Schadt et al.(Computational solutions to large-scale data management and analysis. Nature Rev. Genet. 11, 647–657 (2010)) 1, which presents cloud and heterogeneous computing as solutions for tackling large-scale and high-dimensional data sets. These technologies have been around for years, raising the question: why are they not used more often in bioinformatics? The answer is that, apart from introducing complexity, they quickly break down when a large amount of data is communicated between computing nodes.In their Review, Schadt and colleagues state that computational analysis in biology is high-dimensional, and predict that petabytes, even exabytes, of data will be soon stored and analysed. We agree with this predicted scenario and illustrate, through a simple calculation, how suitable current computational technologies really are for such large volumes of data.', '', '2011-03-01', '2024-05-17', '', '224-224', 41),
(184, 'Memory versus randomization in on-line algorithms', 'The amortized analysis of on-line algorithms is of interest in a variety of situations [1, 6, 7]. An application of great practical importance is the caching problem [4, 7]-the replacement algorithm for lines in a cache, or pages in a virtual memory. The standard algorithm suggested in the literature is Least Recently Used (LP~ U). The analysis of LRU [7] shows that it achieves optimal worst-case performance (this will be made precise in section 2).From a practical standpoint, an important requirement of an on-line caching algorithm is that it maintain very little state information (memory) from the past. Such memory is expensive and slow to update in hardware, as pointed out by [8]. Previous theoretical studies have not touched on this issue of the memory resources required by an on-line caching algorithm. For instance, the well-known LRU a~ gorithm has a substantial memory requirement (this will be made precise in …', 'Conférence', '1989-01-01', '2024-05-17', 'Automata, Languages and Programming: 16th International Colloquium Stresa, Italy, July 11–15, 1989 Proceedings 16', '687-703', 16),
(185, 'CCL: A portable and tunable collective communication library for scalable parallel computers', 'A collective communication library for parallel computers includes frequently used operations such as broadcast, reduce, scatter, gather, concatenate, synchronize, and shift. Such a library provides users with a convenient programming interface, efficient communication operations, and the advantage of portability. A library of this nature, the Collective Communication Library (CCL), intended for the line of scalable parallel computer products by IBM, has been designed. CCL is part of the parallel application programming interface of the recently announced IBM 9076 Scalable POWERparallel System 1 (SP1). In this paper, we examine several issues related to the functionality, correctness, and performance of a portable collective communication library while focusing on three novel aspects in the design and implementation of CCL: 1) the introduction of process groups, 2) the definition of semantics that ensures …', 'Revue', '1995-02-01', '2024-05-17', 'IEEE Transactions on Parallel and Distributed Systems', '154-164', 15),
(186, 'Fault prediction under the microscope: A closer look into HPC systems', 'A large percentage of computing capacity in today\'s large high-performance computing systems is wasted because of failures. Consequently current research is focusing on providing fault tolerance strategies that aim to minimize fault\'s effects on applications. By far the most popular technique is the checkpointrestart strategy. A complement to this classical approach is failure avoidance, by which the occurrence of a fault is predicted and preventive measures are taken. This requires a reliable prediction system to anticipate failures and their locations. Thus far, research in this field has used ideal predictors that were not implemented in real HPC systems. In this paper, we merge signal analysis concepts with data mining techniques to extend the ELSA (Event Log Signal Analyzer) toolkit and offer an adaptive and more efficient prediction module. Our goal is to provide models that characterize the normal behavior of a …', 'Conférence', '2012-11-10', '2024-05-17', 'SC\'12: Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis', '1-11', 15),
(187, 'An introduction to the MPI standard', 'The Message Passing Interface (MPI) is a portable message-passing standard that facilitates the development of parallel applications and libraries. The standard defines the syntax and semantics of a core of library routines useful to a wide range of users writing portable message-passing programs in Fortran 77 or C. MPI also forms a possible target for compilers of languages such as High Performance Fortran 8]. Commercial and free, publicdomain implementations of MPI already exist (see sidebar A). These run on both tightly-coupled, massively-parallel machines (MPPs), and on networks of workstations (NOWs).The MPI standard was developed over a year of intensive meetings and involved over 80 people from approximately 40 organizations, mainly from the United States and Europe. Meeting attendance was open to the technical community. The meets where announced on various bulletin boards and mailing lists. MPI operated on a very tight budget (in reality, it had no budget when the first meeting was announced). The Advanced Research Projects Agency (ARPA) through the National Science Foundation (NSF) have provided partial travel support for the US academic participants. Support for several European participants was provided by the European Commission through the ESPRIT project. Formal voting at the meetings was done by a single vote per organization. In order to vote, the organization must have had a representative at two of the last three meetings. In order to give guidance for preparation of formal proposals, informal votes where often taken involving everyone present. Many vendors of concurrent computers were …', 'Revue', '1995-01-17', '2024-05-17', 'Communications of the ACM', '', 5),
(188, 'A unified theory of interconnection network structure', 'The relationship between the topology of interconnection networks and their functional properties is examined. Graph-theoretical characterizations are derived for delta networks, which have a simple routing scheme, and for bidelta networks, which have the delta property in both directions. Delta networks are shown to have a recursive structure. Bidelta networks are shown to have a unique topology. The definition of bidelta network is used to derive in a uniform manner the labelling schemes that define the omega networks, indirect binary cube networks, flip networks, baseline networks, modified data manipulators and two new networks; these schemes are generalized to arbitrary radices.The labelling schemes are used to characterize networks with simple routing. In another paper (Kruskal/Snir, 1984), we characterize the networks with optimal performance/cost ratio. Only the multistage shuffle-exchange networks …', 'Revue', '1986-01-01', '2024-05-17', 'Theoretical Computer Science', '75-94', 35),
(189, 'Some exact complexity results for straight-line computations over semirings', 'The problem of computing polynomials in certain semmngs is considered. Precise bounds are obtained on the number of multiplications required by straight-hne algorithms which compute such functions as iterated matrix multiplication, iterated convolution, and permanent Usmg these bounds, tt is shown that the use of branching can exponentially speed up computations using the min,+ operations, and that subtraction can exponentially speed up arithmetic computations These results can be interpreted as denying the existence of fast\" universal\" algorithms for computing certain polynomials', 'Revue', '1982-07-01', '2024-05-17', 'Journal of the ACM (JACM)', '874-897', 14),
(190, 'The NYU Ultracomputer—designing a MIMD, shared-memory parallel machine', 'We present the design for the NYU Ultracomputer, a shared-memory MIMD parallel machine composed of thousands of autonomous processing elements. This machine uses an enhanced message switching network with the geometry of an Omega-network to approximate the ideal behavior of Schwartz\'s paracomputer model of computation and to implement efficiently the important fetch-and-add synchronization primitive. We outline the hardware that would be required to build a 4096 processor system using 1990\'s technology. We also discuss system software issues, and present analytic studies of the network performance. Finally, we include a sample of our effort to implement and simulate parallel variants of important scientific programs.', '', '1982-04-01', '2024-05-17', '', '27-42', 14),
(191, 'Java programming for high-performance numerical computing', 'First proposed as a mechanism for enhancing Web content, the Java™ language has taken off as a serious general-purpose programming language. Industry and academia alike have expressed great interest in using the Java language as a programming language for scientific and engineering computations. Applications in these domains are characterized by intensive numerical computing and often have very high performance requirements. In this paper we discuss programming techniques that lead to Java numerical codes with performance comparable to FORTRAN or C, the more traditional languages for this field. The techniques are centered around the use of a high-performance numerical library, written entirely in the Java language, and on compiler technology. The numerical library takes the form of the Array package for Java. Proper use of this package, and of other appropriate tools for compiling and …', 'Revue', '2000-01-01', '2024-05-17', 'IBM Systems Journal', '21-56', 36),
(192, 'Damaris: How to efficiently leverage multicore parallelism to achieve scalable, jitter-free I/O', 'With exascale computing on the horizon, the performance variability of I/O systems represents a key challenge in sustaining high performance. In many HPC applications, I/O is concurrently performed by all processes, which leads to I/O bursts. This causes resource contention and substantial variability of I/O performance, which significantly impacts the overall application performance and, most importantly, its predictability over time. In this paper, we propose a new approach to I/O, called Damaris, which leverages dedicated I/O cores on each multicore SMP node, along with the use of shared-memory, to efficiently perform asynchronous data processing and I/O in order to hide this variability. We evaluate our approach on three different platforms including the Kraken Cray XT5 supercomputer (ranked 11th in Top500), with the CM1 atmospheric model, one of the target HPC applications for the Blue Waters …', 'Conférence', '2012-09-24', '2024-05-17', '2012 IEEE International Conference on Cluster Computing', '155-163', 15),
(193, 'Gluon: A communication-optimizing substrate for distributed heterogeneous graph analytics', 'This paper introduces a new approach to building distributed-memory graph analytics systems that exploits heterogeneity in processor types (CPU and GPU), partitioning policies, and programming models. The key to this approach is Gluon, a communication-optimizing substrate.  Programmers write applications in a shared-memory programming system of their choice and interface these applications with Gluon using a lightweight API. Gluon enables these programs to run on heterogeneous clusters and optimizes communication in a novel way by exploiting structural and temporal invariants of graph partitioning policies.  To demonstrate Gluon’s ability to support different programming models, we interfaced Gluon with the Galois and Ligra shared-memory graph analytics systems to produce distributed-memory versions of these systems named D-Galois and D-Ligra, respectively. To demonstrate Gluon’s ability to …', 'Livre', '2018-06-11', '2024-05-17', 'Proceedings of the 39th ACM SIGPLAN conference on programming language design and implementation', '752-768', 5),
(194, 'Taming parallel I/O complexity with auto-tuning', 'We present an auto-tuning system for optimizing I/O performance of HDF5 applications and demonstrate its value across platforms, applications, and at scale. The system uses a genetic algorithm to search a large space of tunable parameters and to identify effective settings at all layers of the parallel I/O stack. The parameter settings are applied transparently by the auto-tuning system via dynamically intercepted HDF5 calls. To validate our auto-tuning system, we applied it to three I/O benchmarks (VPIC, VORPAL, and GCRM) that replicate the I/O activity of their respective applications. We tested the system with different weak-scaling configurations (128, 2048, and 4096 CPU cores) that generate 30 GB to 1 TB of data, and executed these configurations on diverse HPC platforms (Cray XE6, IBM BG/P, and Dell Cluster). In all cases, the auto-tuning framework identified tunable parameters that substantially improved …', 'Livre', '2013-11-17', '2024-05-17', 'Proceedings of the international conference on high performance computing, networking, storage and analysis', '1-12', 5),
(195, 'Argobots: A lightweight low-level threading and tasking framework', 'In the past few decades, a number of user-level threading and tasking models have been proposed in the literature to address the shortcomings of OS-level threads, primarily with respect to cost and flexibility. Current state-of-the-art user-level threading and tasking models, however, either are too specific to applications or architectures or are not as powerful or flexible. In this paper, we present Argobots, a lightweight, low-level threading and tasking framework that is designed as a portable and performant substrate for high-level programming models or runtime systems. Argobots offers a carefully designed execution model that balances generality of functionality with providing a rich set of controls to allow specialization by end users or high-level programming models. We describe the design, implementation, and performance characterization of Argobots and present integrations with three high-level models …', 'Revue', '2017-10-24', '2024-05-17', 'IEEE Transactions on Parallel and Distributed Systems', '512-526', 15),
(196, 'Depth-size trade-offs for parallel prefix computation', 'A prefix circuit has n inputs x 1,…, x n, and computes the n outputs x 1∘…∘ x i, i= 1,…, n, where∘ is an associative operation. It is shown that the depth t and the size s of parallel prefix circuits are related by the inequality t+ s≥ 2n− 2. This is true even if arbitrary binary operations can be performed at each node. For 2 lg n− 2< t< n− 1 optimal circuits with t+ s= 2n− 2 are built. The depth and size of carry-lookahead circuits with n outputs are related by the inequality t+ s≥ 4n. The depth of parallel prefix circuits of width w is shown to be 2n (w+ 1)+ O (1).', 'Revue', '1986-06-01', '2024-05-17', 'Journal of Algorithms', '185-201', 42),
(197, 'Efficient parallel algorithms for graph problems', ' We present an efficient technique for parallel manipulation of data structures that avoids memory access conflicts. That is, this technique works on the Exclusive Read/Exclusive Write (EREW) model of computation, which is the weakest shared memory, MIMD machine model. It is used in a new parallel radix sort algorithm that is optimal for keys whose values are over a small range. Using the radix sort and known results for parallel prefix on linked lists, we develop parallel algorithms that efficiently solve various computations on trees and “unicycular graphs.” Finally, we develop parallel algorithms for connected components, spanning trees, minimum spanning trees, and other graph problems. All of the graph algorithms achieve linear speedup for all but the sparsest graphs.', 'Revue', '1990-06-01', '2024-05-17', 'Algorithmica', '43-64', 24);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(198, 'Parallel file systems for the IBM SP computers', 'Parallel computer architectures require innovative software solutions to utilize their capabilities. This statement is true for system software no less than for application programs. File system development for the IBM SP product line of computers started with the Vesta research project, which introduced the ideas of parallel access to partitioned files. This technology was then integrated with a conventional Advanced Interactive Executive™ (AIX™) environment to create the IBM AIX Parallel I/O File System product. We describe the design and implementation of Vesta, including user interfaces and enhancements to the control environment needed to run the system. Changes to the basic design that were made as part of the AIX Parallel I/O File System are identified and justified.', 'Revue', '1995-01-01', '2024-05-17', 'IBM Systems Journal', '222-248', 36),
(199, 'Lower bounds on probabilistic linear decision trees', 'The power of probabilistic linear decision trees is examined. It is shown that the standard arguments used to prove lower bounds on deterministic linear decision trees apply to probabilistic linear decision trees as well. Examples are next given of problems which randomization helps solving.', 'Revue', '1985-01-01', '2024-05-17', 'Theoretical Computer Science', '69-82', 35),
(200, 'The communication software and parallel environment of the IBM SP2', 'This paper describes the software available on the IBM SP2™ for parallel program development and execution. It presents the rationale for the design of the Message-Passing Library used on the SP2, outlines its current implementation, and gives information on performance. In addition, the paper describes the programming environment and the program development tools available for developing and executing parallel codes.', 'Revue', '1995-01-01', '2024-05-17', 'IBM systems journal', '205-221', 36),
(201, 'Scheduling the I/O of HPC applications under congestion', 'A significant percentage of the computing capacity of large-scale platforms is wasted because of interferences incurred by multiple applications that access a shared parallel file system concurrently. One solution to handling I/O bursts enlarge-scale HPC systems is to absorb them at an intermediate storage layer consisting of burst buffers. However, our analysis of the Argonne\'s Mira system shows that burst buffers cannot prevent congestion at all times. Consequently, I/O performances dramatically degraded, showing in some cases a decrease in I/O throughput of 67%. In this paper, we analyze the effects of interference on application I/O bandwidth and propose several scheduling techniques to mitigate congestion. We show through extensive experiments that our global I/O scheduler is able to reduce the effects of congestion, even on systems where burst buffers are used, and can increase the overall system …', 'Conférence', '2015-05-25', '2024-05-17', '2015 IEEE International Parallel and Distributed Processing Symposium', '1013-1022', 15),
(202, 'Performance modeling for systematic performance tuning', 'The performance of parallel scientific applications depends on many factors which are determined by the execution environment and the parallel application. Especially on large parallel systems, it is too expensive to explore the solution space with series of experiments. Deriving analytical models for applications and platforms allow estimating and extrapolating their execution performance, bottlenecks, and the potential impact of optimization options. We propose to use such \"performance modeling\" techniques beginning from the application design process throughout the whole software development cycle and also during the lifetime of supercomputer systems. Such models help to guide supercomputer system design and re-engineering efforts to adopt applications to changing platforms and allow users to estimate costs to solve a particular problem. Models can often be built with the help of well-known …', 'Livre', '2011-11-12', '2024-05-17', 'State of the Practice Reports', '1-12', 5),
(203, 'From trace generation to visualization: A performance framework for distributed parallel systems', 'In this paper we describe a trace analysis framework, from trace generation to visualization. It includes a unified tracing facility on IBMâ SPä systems, a self-defining interval file format, an API for framework extensions, utilities for merging and statistics generation, and a visualization tool with preview and multiple time-space diagrams. The trace environment is extremely scalable, and combines MPI events with system activities in the same set of trace files, one for each SMP node. Since the amount of trace data may be very large, utilities are developed to convert and merge individual trace files into a self-defining interval trace file with multiple frame directories. The interval format allows the development of multiple time-space diagrams, such as thread-activity view, processor-activity view, etc., from the same interval file. A visualization tool, Jumpshot, is modified to visualize these views. A statistics utility is developed …', 'Conférence', '2000-11-04', '2024-05-17', 'SC\'00: Proceedings of the 2000 ACM/IEEE Conference on Supercomputing', '50-50', 15),
(204, 'NUMA-aware shared-memory collective communication for MPI', 'As the number of cores per node keeps increasing, it becomes increasingly important for MPI to leverage shared memory for intranode communication. This paper investigates the design and optimizations of MPI collectives for clusters of NUMA nodes. We develop performance models for collective communication using shared memory, and we develop several algorithms for various collectives. Experiments are conducted on both Xeon X5650 and Opteron 6100 InfiniBand clusters. The measurements agree with the model and indicate that different algorithms dominate for short vectors and long vectors. We compare our shared-memory allreduce with several traditional MPI implementations -- Open MPI, MPICH2, and MVAPICH2 -- that utilize system shared memory to facilitate interprocess communication. On a 16-node Xeon cluster and 8-node Opteron cluster, our implementation achieves on average 2.5X and 2 …', 'Livre', '2013-06-17', '2024-05-17', 'Proceedings of the 22nd international symposium on High-performance parallel and distributed computing', '85-96', 5),
(205, 'The distribution of waiting times in clocked multistage interconnection networks', 'Analyzes the random delay experienced by a message traversing a buffered, multistage packet-switching banyan network. The authors find the generating function for the distribution of waiting time at the first stage of the network for a very general class of traffic, assuming messages have discrete sizes. For example, traffic can be uniform or nonuniform, messages can have different sizes, and messages can arrive in batches. For light-to-moderate loads, the authors conjecture that delays experienced at the various stages of the network are nearly the same and are nearly independent. This allows us to approximate the total delay distribution. Better approximations for the distribution of waiting times at later stages of the network are attained by assuming that in the limit a sort of spatial steady state is achieved. Extensive simulations confirm the formulas and conjectures.< >', 'Revue', '1988-11-01', '2024-05-17', 'IEEE Transactions on Computers', '1337-1352', 15),
(206, 'MPI-a message-passing interface standard', '', 'Revue', '1994-09-01', '2024-05-17', 'International Journal of Supercomputer Applications and High Performance Computing', '165-&', 43),
(207, 'Issues related to MIMD shared-memory computers: the NYU Ultracomputer approach', 'We present an updated report on the NYU Ultracomputer design emphasizing recent results on programming, operating systems, caching, demand paging, and I/O. The user\'s view of the Ultracomputer is presented along with the hardware and software implementation. Freedom from serial bottlenecks in both hardware and software allows the Ultracomputer to obtain performance that scales nearly linearly in the size of the machine for a broad spectrum of problems.', 'Revue', '1985-06-01', '2024-05-17', 'ACM SIGARCH Computer Architecture News', '126-135', 14),
(208, 'Ghost cell pattern', 'Many problems consist of a structured grid of points that are updated repeatedly based on the values of a fixed set of neighboring points in the same grid. To parallelize these problems we can geometrically divide the grid into chunks that are processed by different processors. One challenge with this approach is that the update of points at the periphery of a chunk requires values from neighboring chunks. These are often located in remote memory belonging to different processes. The naive implementation results in a lot of time spent on communication leaving less time for useful computation. By using the Ghost Cell Pattern communication overhead can be reduced. This results in faster time to completion.', 'Livre', '2010-03-30', '2024-05-17', 'Proceedings of the 2010 Workshop on Parallel Programming Patterns', '1-9', 5),
(209, 'High performance FORTRAN language specification', '', 'Revue', '1993-01-01', '2024-05-17', 'Scientific Programming', '1-170', 5),
(210, 'A note on n-body computations with cutoffs', '  We provide a theoretical analysis of the communication requirements of  parallel algorithms for molecular dynamic simulations.  We describe two commonly used algorithms, space decomposition and force decomposition, and analyze their communication requirements; each is better in a distinct computation regime. We next introduce a new hybrid algorithm that further reduces communication.  We show that the new algorithm is optimal, by providing a matching lower bound.  ', 'Revue', '2004-03-01', '2024-05-17', 'Theory of Computing Systems', '295-318', 24),
(211, 'Method of maintaining data coherency in a computer system having a plurality of interconnected nodes', 'A method of providing coherent shared memory access among a plurality of shared memory multiprocessor nodes. For each line of data in each of the nodes, a list of those processors of the node that have copies of the line in their caches is maintained. If a memory command is issued from a processor of one node, and if the command is directed to a line of memory of another node, then the memory command is sent directly to an adapter of the one node. When the adapter receives the command, it forwards the command from the one adapter to another adapter of the other node. When the other adapter receives the command, the command is forwarded to the local memory of the other node. The list of processors is then updated in the local memory of the other node to include or exclude the other adapter depending on the command. If the memory command is issued from one of the processors of one of the nodes …', '', '2000-07-04', '2024-05-17', '', '', 5),
(212, 'Method and apparatus for efficient virtual memory management', 'A method and an apparatus that improves virtual memory management. The proposed method and apparatus provides an application with an efficient channel for communicating information about future behavior of an application with respect to the use of memory and other resources to the OS, a paging daemon, and other system software. The state of hint bits, which are integrated into page table entries and TLB entries and are used for communicating information to the OS, can be changed explicitly with a special instruction or implicitly as a result of referencing the associated page. The latter is useful for canceling hints. The method and apparatus enables memory allocators, garbage collectors, and compilers (such as those used by the Java platform) to use a page-aligned heap and a page-aligned stack to assist the OS in effective management of memory resources. This mechanism can also be used in other …', '', '2005-04-26', '2024-05-17', '', '', 5),
(213, 'Mpi-io: A parallel file i/o interface for mpi version 0.3', 'Thanks to MPI [9], writing portable message passing parallel programs is almost a reality. One of the remaining problems is file I/0. Although parallel file systems support similar interfaces, the lack of a standard makes developing a truly portable program impossible. Further, the closest thing to a standard, the UNIX file interface, is ill-suited to parallel computing. Working together, IBM Research and NASA Ames have drafted MPI-I0, a proposal to address the portable parallel I/0 problem. In a nutshell, this proposal is based on the idea that I/0 can be modeled as message passing: writing to a file is like sending a message, and reading from a file is like receiving a message. MPI-IO intends to leverage the relatively wide acceptance of the MPI interface in order to create a similar I/0 interface. The above approach can be materialized in different ways. The current proposal represents the result of extensive discussions (and arguments), but is by no means finished. Many changes can be expected as additional participants join the effort to define an interface for portable I/0. This document is organized as follows. The remainder of this section includes a discussion of some issues that have shaped the style of the interface. Section 2 presents an overview of MPI-IO as it is currently defined. It specifies what the interface currently supports and states what would need to be added to the current proposal to make the interface more complete and robust. The next seven sections contain the interface definition itself. Section 3 presents definitions and conventions. Section 4 contains functions for file control, most notably open. Section 5 includes functions for …', '', '1995-01-01', '2024-05-17', '', '', 5),
(214, 'Better computing on the anonymous ring', 'We consider a bidirectional ring of n processors, where processors are anonymous, ie, are indistinguishable. In this model it is known that “most” functions (in particular XOR and orientation) have worst case message complexity Θ (n 2) for asynchronous computations, and Θ (n log n) for synchronous computations. The average case behavior is different; an algorithm that computes XOR asynchronously with O (n n messages on the average is known. In this paper we give tight bounds on the average complexity of various problems. We show the following:•• An asynchronous deterministic algorithm that computes any computable function with O (n log n) messages, on the average (improving the O (n n algorithm). A matching lower bound is proven for functions such as XOR and orientation.•• An asynchronous probabilistic algorithm that computes any computable function with O (n log n) expected messages on any …', 'Revue', '1991-06-01', '2024-05-17', 'Journal of Algorithms', '204-238', 42),
(215, 'Optimizing array reference checking in Java programs', 'The Java™ language specification requires that all array references be checked for validity. If a reference is invalid, an exception must be thrown. Furthermore, the environment at the time of the exception must be preserved and made available to whatever code handles the exception. Performing the checks at run time incurs a large penalty in execution time. In this paper we describe a collection of transformations that can dramatically reduce this overhead in the common case (when the access is valid) while preserving the program state at the time of an exception. The transformations allow trade-offs to be made in the efficiency and size of the resulting code, and are fully compliant with the Java language semantics. Preliminary evaluation of the effectiveness of these transformations shows that performance improvements of 10 times and more can be achieved for array-intensive Java programs.', 'Revue', '1998-01-01', '2024-05-17', 'IBM Systems journal', '409-453', 36),
(216, 'A framework for measuring supercomputer productivity', 'We propose a framework for measuring the productivity of high performance computing                 (HPC) systems, based on common economic definitions of productivity and on utility                 theory. We discuss how these definitions can capture essential aspects of HPC                 systems, such as the importance of time-to-solution and the trade-off between                 programming time and execution time. Finally, we outline a research program that                 would lead to the definition of effective productivity metrics for HPC that fit                 within the proposed framework.', 'Revue', '2004-11-01', '2024-05-17', 'The International Journal of High Performance Computing Applications', '417-432', 25),
(217, 'Enabling communication concurrency through flexible MPI endpoints', 'MPI defines a one-to-one relationship between MPI processes and ranks. This model captures many use cases effectively; however, it also limits communication concurrency and interoperability between MPI and programming models that utilize threads. This paper describes the MPI endpoints extension, which relaxes the longstanding one-to-one relationship between MPI processes and ranks. Using endpoints, an MPI implementation can map separate communication contexts to threads, allowing them to drive communication independently. Endpoints also enable threads to be addressable in MPI operations, enhancing interoperability between MPI and other programming models. These characteristics are illustrated through several examples and an empirical study that contrasts current multithreaded communication performance with the need for high degrees of communication concurrency to achieve peak …', 'Revue', '2014-11-01', '2024-05-17', 'The International Journal of High Performance Computing Applications', '390-405', 25),
(218, 'FlipIt: An LLVM based fault injector for HPC', ' High performance computing (HPC) is increasingly subjected to faulty computations. The frequency of silent data corruptions (SDCs) in particular is expected to increase in emerging machines requiring HPC applications to handle SDCs. In this paper we, propose a robust fault injector structured through an LLVM compiler pass that allows simulation of SDCs in various applications. Although fault injection locations are enumerated at compile time, their activation is purely at runtime and based on a user-provided fault distribution. The robustness of our fault injector is in the ability to augment the runtime injection logic on a per application basis. This allows tighter control on the spacial, temporal, and probability of injected faults. The usability, scalability, and robustness of our fault injection is demonstrated with injecting faults into an algebraic multigird solver.', 'Conférence', '2014-01-01', '2024-05-17', 'Euro-Par 2014: Parallel Processing Workshops: Euro-Par 2014 International Workshops, Porto, Portugal, August 25-26, 2014, Revised Selected Papers, Part I 20', '547-558', 19),
(219, 'Automatic tuning matrix multiplication performance on graphics hardware', 'In order to utilize the tremendous computing power of graphics hardware and to automatically adapt to the fast and frequent changes in its architecture and performance characteristics, this paper implements an automatic tuning system to generate high-performance matrix-multiplication implementation on graphics hardware. The automatic tuning system uses a parameterized code generator to generate multiple versions of matrix multiplication, whose performances are empirically evaluated by actual execution on the target platform. An ad-hoc search engine is employed to search over the implementation space for the version that yields the best performance. In contrast to similar systems on CPUs, which utilize cache blocking, register tiling, instruction scheduling tuning strategies, this paper identifies and exploits several tuning strategies that are unique for graphics hardware. These tuning strategies include …', 'Conférence', '2005-09-17', '2024-05-17', '14th International Conference on Parallel Architectures and Compilation Techniques (PACT\'05)', '185-194', 15),
(220, 'Enabling MPI interoperability through flexible communication endpoints', 'The current MPI model defines a one-to-one relationship between MPI processes and MPI ranks. This model captures many use cases effectively, such as one MPI process per core and one MPI process per node. However, this semantic has limited interoperability between MPI and other programming models that use threads within a node. In this paper, we describe an extension to MPI that introduces communication endpoints as a means to relax the one-to-one relationship between processes and threads. Endpoints enable a greater degree interoperability between MPI and other programming models, and we illustrate their potential for additional performance and computation management benefits through the decoupling of ranks from processes.', 'Livre', '2013-09-15', '2024-05-17', 'Proceedings of the 20th European MPI Users\' Group Meeting', '13-18', 5),
(221, 'The IBM external user interface for scalable parallel systems', 'The IBM External User Interface (EUI) for scalable parallel systems is a parallel programming library designed for the IBM line of scalable parallel computers. The first computer in this line, the IBM 9076 SP1, was announced in February 1993. In essence, the EUI is a library of coordination and communication routines that can be invoked from within FORTRAN or C application programs. The EUI consists of four main components: task management routines, message passing routines, task group routines, and collective communication routines. This paper examines several aspects of the design and development of the EUI.', 'Revue', '1994-04-01', '2024-05-17', 'Parallel Computing', '445-462', 44),
(222, 'Using visualization tools to understand concurrency', 'A visualization tool that provides an aggregate view of execution through a graph of events called the causality graph, which is suitable for systems with hundreds or thousands of processors, coarse-grained parallelism, and for a language that makes communication and synchronization explicit, is discussed. The methods for computing causality graphs and stepping through an execution with causality graphs are described. The properties of the abstraction algorithms and super nodes, the subgraphs in causality graphs, are also discussed.< >', 'Revue', '1992-05-01', '2024-05-17', 'IEEE Software', '87-92', 15),
(223, 'Programming for exascale computers', 'Exascale systems will present programmers with many challenges. The authors review the parallel programming models that are appropriate for such systems and the challenges that implementations of those models face in an exascale system. They also discuss the feasibility of using existing programming systems, thus preserving the investment in legacy applications, as well as the benefits and likelihood of new programming models and systems.', 'Revue', '2013-10-18', '2024-05-17', 'Computing in Science & Engineering', '27-35', 15),
(224, 'Failure prediction for HPC systems and applications: Current situation and open issues', 'As large-scale systems evolve towards post-petascale computing, it is crucial to focus on providing fault-tolerance strategies that aim to minimize fault’s effects on applications. By far the most popular technique is the checkpoint–restart strategy. A complement to this classical approach is failure avoidance, by which the occurrence of a fault is predicted and proactive measures are taken. This requires a reliable prediction system to anticipate failures and their locations. One way of offering prediction is by the analysis of system logs generated during production by large-scale systems. Current research in this field presents a number of limitations that make them unusable for running on real production high-performance computing (HPC) systems. Based on our observations that different failures have different distributions and behaviours, we propose a novel hybrid approach that combines signal analysis with data …', '', '2013-08-01', '2024-05-17', '', '273-282', 25),
(225, 'Logaider: A tool for mining potential correlations of hpc log events', 'Today\'s large-scale supercomputers are producing a huge amount of log data. Exploring various potential correlations of fatal events is crucial for understanding their causality and improving the working efficiency for system administrators. To this end, we developed a toolkit, named LogAider, that can reveal three types of potential correlations: across-field, spatial, and temporal. Across-field correlation refers to the statistical correlation across fields within a log or across multiple logs based on probabilistic analysis. For analyzing the spatial correlation of events, we developed a generic, easy-to-use visualizer that can view any events queried by userson a system machine graph. LogAider can also mine spatial correlations by an optimized K-meaning clustering algorithm over a Torus network topology. It is also able to disclose the temporal correlations (or error propagations) over a certain period inside a log or …', 'Conférence', '2017-05-14', '2024-05-17', '2017 17th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing (CCGRID)', '442-451', 15),
(226, 'Esoftcheck: Removal of non-vital checks for fault tolerance', 'As semiconductor technology scales into the deep submicron regime the occurrence of transient or soft errors will increase. This will require new approaches to error detection. Software checking approaches are attractive because they require little hardware modification and can be easily adjusted to fit different reliability and performance requirements. Unfortunately, software checking adds a significant performance overhead. In this paper we present ESoftCheck, a set of compiler optimization techniques to determine which are the vital checks, that is, the minimum number of checks that are necessary to detect an error and roll back to a correct program state. ESoftCheck identifies the vital checks on platforms where registers are hardware-protected with parity or ECC, when there are redundant checks and when checks appear in loops. ESoftCheck also provides knobs to trade reliability for performance based on …', 'Conférence', '2009-03-22', '2024-05-17', '2009 International Symposium on Code Generation and Optimization', '35-46', 15),
(227, 'Improving parallel I/O autotuning with performance modeling', 'Various layers of the parallel I/O subsystem offer tunable parameters for improving I/O performance on large-scale computers. However, searching through a large parameter space is challenging. We are working towards an autotuning framework for determining the parallel I/O parameters that can achieve good I/O performance for different data write patterns. In this paper, we characterize parallel I/O and discuss the development of predictive models for use in effectively reducing the parameter space. Applying our technique on tuning an I/O kernel derived from a large-scale simulation code shows that the search time can be reduced from 12 hours to 2 hours, while achieving 54X I/O performance speedup.', 'Livre', '2014-06-23', '2024-05-17', 'Proceedings of the 23rd international symposium on High-performance parallel and distributed computing', '253-256', 5),
(228, 'Improving strong-scaling of CNN training by exploiting finer-grained parallelism', 'Scaling CNN training is necessary to keep up with growing datasets and reduce training time. We also see an emerging need to handle datasets with very large samples, where memory requirements for training are large. Existing training frameworks use a data-parallel approach that partitions samples within a mini-batch, but limits to scaling the minibatch size and memory consumption makes this untenable for large samples. We describe and implement new approaches to convolution, which parallelize using spatial decomposition or a combination of sample and spatial decomposition. This introduces many performance knobs for a network, so we develop a performance model for CNNs and present a method for using it to automatically determine efficient parallelization strategies. We evaluate our algorithms with microbenchmarks and image classification with ResNet-50. Our algorithms allow us to prototype a …', 'Conférence', '2019-05-20', '2024-05-17', '2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS)', '210-220', 15),
(229, 'Applications of Ramsey\'s theorem to decision tree complexity', 'Combinatorial techniques for extending lower bound results for decision trees to general types of queries are presented. Problems that are defined by simple inequalities between inputs, called order invariant problems, are considered. A decision tree is called k-bounded if each query depends on at most k variables. No further assumptions on the type of queries are made. It is proved that one can replace the queries of any k-bounded decision tree that solves an order-invariant problem over a large enough input domain with k-bounded queries whose outcome depends only on the relative order of the inputs. As a consequence, all existing lower bounds for comparison-based algorithms are valid for general k-bounded decision trees, where k is a constant. An Ω(n log n) lower bound for the element uniqueness problem and several other problems for any k-bounded decision tree, such that k = O(nc) and c < 1/2 is …', 'Revue', '1985-10-01', '2024-05-17', 'Journal of the ACM (JACM)', '938-949', 14),
(230, 'Damaris: Addressing performance variability in data management for post-petascale simulations', 'With exascale computing on the horizon, reducing performance variability in data management tasks (storage, visualization, analysis, etc.) is becoming a key challenge in sustaining high performance. This variability significantly impacts the overall application performance at scale and its predictability over time. In this article, we present Damaris, a system that leverages dedicated cores in multicore nodes to offload data management tasks, including I/O, data compression, scheduling of data movements, in situ analysis, and visualization. We evaluate Damaris with the CM1 atmospheric simulation and the Nek5000 computational fluid dynamic simulation on four platforms, including NICS’s Kraken and NCSA’s Blue Waters. Our results show that (1) Damaris fully hides the I/O variability as well as all I/O-related costs, thus making simulation performance predictable; (2) it increases the sustained write throughput by a …', 'Revue', '2016-10-25', '2024-05-17', 'ACM Transactions on Parallel Computing (TOPC)', '1-43', 14),
(231, 'Exploring the feasibility of lossy compression for pde simulations', 'Checkpoint restart plays an important role in high-performance computing (HPC) applications, allowing simulation runtime to extend beyond a single job allocation and facilitating recovery from hardware failure. Yet, as machines grow in size and in complexity, traditional approaches to checkpoint restart are becoming prohibitive. Current methods store a subset of the application’s state and exploit the memory hierarchy in the machine. However, as the energy cost of data movement continues to dominate, further reductions in checkpoint size are needed. Lossy compression, which can significantly reduce checkpoint sizes, offers a potential to reduce computational cost in checkpoint restart. This article investigates the use of numerical properties of partial differential equation (PDE) simulations, such as bounds on the truncation error, to evaluate the feasibility of using lossy compression in checkpointing PDE …', 'Revue', '2019-03-01', '2024-05-17', 'The International Journal of High Performance Computing Applications', '397-410', 25),
(232, 'Parallel computing research at Illinois: The UPCRC agenda', '', 'Revue', '2008-11-01', '2024-05-17', 'Urbana, IL: Univ. Illinois Urbana-Champaign', '', 5),
(233, 'MPI-2: Extensions to the Message-Passing Interface', 'MPI-2: Extending the Message- Passing Interface Page 1 1 MPI-2: Extending the MessagePassing \nInterface Rusty Lusk Argonne National Laboratory Page 2 2 Outline ● Background ● Review \nof strict message-passing model ● Dynamic Process Management – Dynamic process \nstartup – Dynamic establishment of connections ● One-sided communication – Put/get – \nOther operations ● Miscellaneous MPI-2 features – Generalized requests – Bindings for C++/ \nFortran-90; interlanguage issues ● Parallel I/O Page 3 3 Reaction to MPI-1 ● Initial public \nreaction: – It’s too big! – It’s too small! ● Implementations appeared quickly – Freely available \n(MPICH, LAM, CHIMP) helped expand the user base – MPP vendors (IBM, Intel, Meiko, \nHP-Convex, SGI, Cray) found they could get high performance from their machines with \nMPI. ● MPP users: – quickly added MPI to the set of message-passing libraries they used; – …', 'Revue', '1997-01-01', '2024-05-17', 'MPI Standard', '', 5),
(234, 'Adaptive switching apparatus for multi-stage networks', 'Disclosed is a method and apparatus for improving the performance and connection establishing capability of multi-stage switching networks by providing additional intelligent features in the individual switching apparatus devices at each stage of the network. The invention method is particularly effective in asynchronous circuit-switched networks. The most important feature to be added is adaptivity of the switching apparatus; where adaptivity means the ability of each switching element to determine for itself which of several optional alternate paths to try at each stage of the network based on availability. This is a better approach because it brings the decision directly to the switching apparatus involved, which has the data required to make an intelligent path selection decision to circumvent blocking in the multi-stage network.', '', '1994-09-06', '2024-05-17', '', '', 5),
(235, 'Optimizing i/o performance of hpc applications with autotuning', 'Parallel Input output is an essential component of modern high-performance computing (HPC). Obtaining good I/O performance for a broad range of applications on diverse HPC platforms is a major challenge, in part, because of complex inter dependencies between I/O middleware and hardware. The parallel file system and I/O middleware layers all offer optimization parameters that can, in theory, result in better I/O performance. Unfortunately, the right combination of parameters is highly dependent on the application, HPC platform, problem size, and concurrency. Scientific application developers do not have the time or expertise to take on the substantial burden of identifying good parameters for each problem configuration. They resort to using system defaults, a choice that frequently results in poor I/O performance. We expect this problem to be compounded on exascale-class machines, which will likely have a …', 'Revue', '2019-03-08', '2024-05-17', 'ACM Transactions on Parallel Computing (TOPC)', '1-27', 14),
(236, 'Channel and filter parallelism for large-scale CNN training', 'Accelerating large-scale CNN training is needed to keep training times reasonable as datasets grow larger and models become more complex. Existing frameworks primarily scale using data-parallelism, but this is limited by the mini-batch size, which cannot grow arbitrarily. We introduce three algorithms that partition channel or filter data to exploit parallelism beyond the sample dimension. Further, they partition the parameters of convolutional layers, replacing global all reduces with segmented allreduces---smaller, concurrent allreduces among disjoint processor sets. These algorithms enable strong scaling, reduced communication overhead, and reduced memory pressure, enabling training of very wide CNNs. We demonstrate improved strong and weak scaling, including up to 4.1x reductions in training time for residual networks and 4x reductions in allreduce overhead. We also show that wider models provide …', 'Livre', '2019-11-17', '2024-05-17', 'Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis', '1-20', 5),
(237, 'Mpi programming environment for ibm sp1/sp2', 'In this paper we discuss an implementation of the message passing interface standard (MPI) for the IBM Scalable Power PARALLEL 1 and 2 (SP1, SP2). Key to a reliable and efficient implementation of a message passing library on these machines is the careful design of a UNIX-Socket like layer in the user space with controlled access to the communication adapters and with adequate recovery and flow control. The performance of this implementation is at the same level as the IBM-proprietary message passing library (MPL). We also show that in the IBM SP1 and SP2 we achieve integrated tracing ability, where both system events, such as context switches and page fault etc., and MPI related activities are traced, with minimal overhead to the application program, thus presenting application programmers the trace of all the events that ultimately affect efficiency of a parallel program.', 'Conférence', '1995-05-30', '2024-05-17', 'Proceedings of 15th International Conference on Distributed Computing Systems', '127-135', 15),
(238, 'On the depth complexity of formulas', ' The problem of minimizing the depth of formulas by equivalence preserving transformations is formalized in a general algebraic setting. For a particular algebraic system ∑0 specific methods of a dynamic programming nature are developed for proving lower bounds on depth. Such lower bounds for ∑0 automatically imply the same results for the systems of (i) arithmetic computations with addition and multiplication only, and (ii) computations over finite languages using union and concatenation. The specific lower bounds obtained are (i) depth 2n−o(n) for the permanent, (ii) depth (0.25+o(1))log2 n for the symmetric polynomials and (iii) depth 1.16logn for a problem of formula sizen. ', 'Revue', '1979-12-01', '2024-05-17', 'Mathematical Systems Theory', '301-322', 24),
(239, 'Transformation for class immutability', 'It is common for object-oriented programs to have both mutable and immutable classes. Immutable classes simplify programing because the programmer does not have to reason about side-effects. Sometimes programmers write immutable classes from scratch, other times they transform mutable into immutable classes. To transform a mutable class, programmers must find all methods that mutate its transitive state and all objects that can enter or escape the state of the class. The analyses are non-trivial and the rewriting is tedious. Fortunately, this can be automated. We present an algorithm and a tool, Immutator, that enables the programmer to safely transform a mutable class into an immutable class. Two case studies and one controlled experiment show that Immutator is useful. It (i) reduces the burden of making classes immutable, (ii) is fast enough to be used interactively, and (iii) is much safer than manual …', 'Livre', '2011-05-21', '2024-05-17', 'Proceedings of the 33rd International Conference on Software Engineering', '61-70', 5),
(240, 'Ubiquitous parallel computing from Berkeley, Illinois, and Stanford', 'The ParLab at Berkeley, UPCRC-Illinois, and the Pervasive Parallel Laboratory at Stanford are studying how to make parallel programming succeed given industry\'s recent shift to multicore computing. All three centers assume that future microprocessors will have hundreds of cores and are working on applications, programming environments, and architectures that will meet this challenge. This article briefly surveys the similarities and difference in their research.', 'Revue', '2010-04-12', '2024-05-17', 'IEEE micro', '41-55', 15),
(241, 'Towards millions of communicating threads', 'We explore in this paper the advantages that accrue from avoiding the use of wildcards in MPI. We show that, with this change, one can efficiently support millions of concurrently communicating light-weight threads using send-receive communication.', 'Livre', '2016-09-25', '2024-05-17', 'Proceedings of the 23rd European MPI Users\' Group Meeting', '1-14', 5),
(242, 'Reducing waste in extreme scale systems through introspective analysis', 'Resilience is an important challenge for extreme-scale supercomputers. Today, failures in supercomputers are assumed to be uniformly distributed in time. However, recent studies show that failures in high-performance computing systems are partially correlated in time, generating periods of higher failure density. Our study of the failure logs of multiple supercomputers show that periods of higher failure density occur with up to three times more than the average. We design a monitoring system that listens to hardware events and forwards important events to the runtime to detect those regime changes. We implement a runtime capable of receiving notifications and adapt dynamically. In addition, we build an analytical model to predict the gains that such dynamic approach could achieve. We demonstrate that in some systems, our approach can reduce the wasted time by over 30%.', 'Conférence', '2016-05-23', '2024-05-17', '2016 IEEE International Parallel and Distributed Processing Symposium (IPDPS)', '212-221', 15),
(243, 'Optimizing the Barnes-Hut algorithm in UPC', 'PGAS languages\' support of a global name space facilitates the expression of parallel algorithms, since communication is implicit. This is especially convenient when writing irregular applications with data-dependent, dynamically changing communication patterns. However, programming in a shared memory style, with no explicit control of communication, may result in poor performance. The problem may be due to weaknesses of current implementations of PGAS languages or limitations inherent in these languages. To clarify which is the case, we discuss an implementation in UPC of the Barnes-Hut algorithm. A literal port of a good quality shared-memory implementation (merely replacing shared arrays with partitioned global arrays) achieves abysmal performance -- more than 1000 times worse than a message-passing implementation. We achieve in UPC a performance comparable to message-passing with a …', 'Livre', '2011-11-12', '2024-05-17', 'Proceedings of 2011 International Conference for High Performance Computing, Networking, Storage and Analysis', '1-11', 5),
(244, 'Aluminum: An asynchronous, GPU-aware communication library optimized for large-scale training of deep neural networks on HPC systems', 'We identify communication as a major bottleneck for training deep neural networks on large-scale GPU clusters, taking over 10x as long as computation. To reduce this overhead, we discuss techniques to overlap communication and computation as much as possible. This leads to much of the communication being latency-bound instead of bandwidth-bound, and we find that using a combination of latency-and bandwidth-optimized allreduce algorithms significantly reduces communication costs. We also discuss a semantic mismatch between MPI and CUDA that increases overheads and limits asynchrony, and propose a solution that enables communication to be aware of CUDA streams. We implement these optimizations in the open-source Aluminum communication library, enabling optimized, asynchronous, GPU-aware communication. Aluminum demonstrates improved performance in benchmarks and end-to-end training of deep networks, for both strong and weak scaling.', '', '2018-09-06', '2024-05-17', '', '', 45),
(245, 'Inter-agency workshop on hpc resilience at extreme scale', '', 'Revue', '2012-02-01', '2024-05-17', 'National Security Agency Advanced Computing Systems', '', 5),
(246, 'Task assignment in heterogeneous computing systems', 'The problem of task assignment in heterogeneous computing systems has been studied for many years with many variations. We consider the version in which communicating tasks are to be assigned to heterogeneous processors with identical communication links to minimize the sum of the total execution and communication costs. Our contributions are three fold: a task clustering method which takes the execution times of the tasks into account; two metrics to determine the order in which tasks are assigned to the processors; a refinement heuristic which improves a given assignment. We use these three methods to obtain a family of task assignment algorithms including multilevel ones that apply clustering and refinement heuristics repeatedly. We have implemented eight existing algorithms to test the proposed methods. Our refinement algorithm improves the solutions of the existing algorithms by up to 15% and …', 'Revue', '2006-01-31', '2024-05-17', 'Journal of parallel and Distributed Computing', '32-46', 42),
(247, 'On two-dimensional sparse matrix partitioning: Models, methods, and a recipe', 'We consider two-dimensional partitioning of general sparse matrices for parallel sparse matrix-vector multiply operation. We present three hypergraph-partitioning-based methods, each having unique advantages. The first one treats the nonzeros of the matrix individually and hence produces fine-grain partitions. The other two produce coarser partitions, where one of them imposes a limit on the number of messages sent and received by a single processor, and the other trades that limit for a lower communication volume. We also present a thorough experimental evaluation of the proposed two-dimensional partitioning methods together with the hypergraph-based one-dimensional partitioning methods, using an extensive set of public domain matrices. Furthermore, for the users of these partitioning methods, we present a partitioning recipe that chooses one of the partitioning methods according to some matrix …', 'Revue', '2010-03-01', '2024-05-17', 'SIAM Journal on Scientific Computing', '656-683', 46),
(248, 'Scalable sparse tensor decompositions in distributed memory systems', 'We investigate an efficient parallelization of the most common iterative sparse tensor decomposition algorithms on distributed memory systems. A key operation in each iteration of these algorithms is the matricized tensor times Khatri-Rao product (MTTKRP). This operation amounts to element-wise vector multiplication and reduction depending on the sparsity of the tensor. We investigate a fine and a coarse-grain task definition for this operation, and propose hypergraph partitioning-based methods for these task definitions to achieve the load balance as well as reduce the communication requirements. We also design a distributed memory sparse tensor library, HyperTensor, which implements a well-known algorithm for the CANDECOMP-/PARAFAC (CP) tensor decomposition using the task definitions and the associated partitioning methods. We use this library to test the proposed implementation of MTTKRP in …', 'Livre', '2015-11-15', '2024-05-17', 'Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis', '1-11', 5),
(249, 'Multi-level direct k-way hypergraph partitioning with multiple constraints and fixed vertices', 'K-way hypergraph partitioning has an ever-growing use in parallelization of scientific computing applications. We claim that hypergraph partitioning with multiple constraints and fixed vertices should be implemented using direct K-way refinement, instead of the widely adopted recursive bisection paradigm. Our arguments are based on the fact that recursive-bisection-based partitioning algorithms perform considerably worse when used in the multiple constraint and fixed vertex formulations. We discuss possible reasons for this performance degradation. We describe a careful implementation of a multi-level direct K-way hypergraph partitioning algorithm, which performs better than a well-known recursive-bisection-based partitioning algorithm in hypergraph partitioning with multiple constraints and fixed vertices. We also experimentally show that the proposed algorithm is effective in standard hypergraph partitioning.', 'Revue', '2008-05-31', '2024-05-17', 'Journal of Parallel and Distributed Computing', '609-625', 42),
(250, 'Encapsulating multiple communication-cost metrics in partitioning sparse rectangular matrices for parallel matrix-vector multiplies', 'This paper addresses the problem of one-dimensional partitioning of structurally unsymmetric square and rectangular sparse matrices for parallel matrix-vector and matrix-transpose-vector multiplies. The objectiveis to minimize the communication cost while maintaining the balance on computational loads of processors. Most of the existing partitioning models consider only the total message volume hoping that minimizing this communication-cost metric is likely to reduce other metrics. However, the total message latency (start-up time) may be more important than the total message volume. Furthermore, the maximum message volume and latency handled by a single processor are also important metrics. We propose a two-phase approach that encapsulates all these four communication-cost metrics. The objective in the first phase is to minimize the total message volume while maintaining the computational-load …', 'Revue', '2004-06-01', '2024-05-17', 'SIAM Journal on Scientific Computing', '1837--1859', 47);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(251, 'A symmetry preserving algorithm for matrix scaling', 'We present an iterative algorithm which asymptotically scales the -norm of each row and each column of a matrix to one. This scaling algorithm preserves symmetry of the original matrix and shows fast linear convergence with an asymptotic rate of 1/2. We discuss extensions of the algorithm to the 1-norm, and by inference to other norms. For the 1-norm case, we show again that convergence is linear, with the rate dependent on the spectrum of the scaled matrix.  We demonstrate experimentally that the scaling algorithm improves the conditioning of the matrix and that it helps direct solvers by reducing the need for pivoting. In particular, for symmetric matrices the theoretical and experimental results highlight the potential of the proposed algorithm over existing alternatives.', 'Revue', '2014-01-01', '2024-05-17', 'SIAM journal on Matrix Analysis and Applications', '931-955', 46),
(252, 'Integrated data placement and task assignment for scientific workflows in clouds', 'We consider the problem of optimizing the execution of data-intensive scientific workflows in the Cloud. We address the problem under the following scenario. The tasks of the workflows communicate through files; the output of a task is used by another task as an input file and if these tasks are assigned on different execution sites, a file transfer is necessary. The output files are to be stored at a site. Each execution site is to be assigned a certain percentage of the files and tasks. These percentages, called target weights, are pre-determined and reflect either user preferences or the storage capacity and computing power of the sites. The aim is to place the data files into and assign the tasks to the execution sites so as to reduce the cost associated with the file transfers, while complying with the target weights. To do this, we model the workflow as a hypergraph and with a hypergraph-partitioning-based formulation, we …', 'Conférence', '2011-06-08', '2024-05-17', 'Proceedings of the fourth international workshop on Data-intensive distributed computing', '45-54', 14),
(253, 'Notes on Birkhoff–von Neumann decomposition of doubly stochastic matrices', 'Birkhoff–von Neumann (BvN) decomposition of doubly stochastic matrices expresses a double stochastic matrix as a convex combination of a number of permutation matrices. There are known upper and lower bounds for the number of permutation matrices that take part in the BvN decomposition of a given doubly stochastic matrix. We investigate the problem of computing a decomposition with the minimum number of permutation matrices and show that the associated decision problem is strongly NP-complete. We propose a heuristic and investigate it theoretically and experimentally on a set of real world sparse matrices and random matrices.', 'Revue', '2016-05-15', '2024-05-17', 'Linear Algebra and its Applications', '108-115', 44),
(254, 'Parallel candecomp/parafac decomposition of sparse tensors using dimension trees', 'CANDECOMP/PARAFAC (CP) decomposition of sparse tensors has been successfully applied to many problems in web search, graph analytics, recommender systems, health care data analytics, and many other domains. In these applications, efficiently computing the CP decomposition of sparse tensors is essential in order to be able to process and analyze data of massive scale. For this purpose, we investigate an efficient computation of the CP decomposition of sparse tensors and its parallelization. We propose a novel computational scheme for reducing the cost of a core operation in computing the CP decomposition with the traditional alternating least squares (CP-ALS) based algorithm. We then effectively parallelize this computational scheme in the context of CP-ALS in shared and distributed memory environments and propose data and task distribution models for better scalability. We implement parallel …', 'Revue', '2018-01-01', '2024-05-17', 'SIAM Journal on Scientific Computing', 'C99-C130', 46),
(255, 'High Performance Parallel Algorithms for the Tucker Decomposition of Sparse Tensors', 'We investigate an efficient parallelization of a class of algorithms for the well-known Tucker decomposition of general N-dimensional sparse tensors. The targeted algorithms are iterative and use the alternating least squares method. At each iteration, for each dimension of an N-dimensional input tensor, the following operations are performed: (i) the tensor is multiplied with (N - 1) matrices (TTMc step), (ii) the product is then converted to a matrix, and (iii) a few leading left singular vectors of the resulting matrix are computed (TRSVD step) to update one of the matrices for the next TTMc step. We propose an efficient parallelization of these algorithms for the current parallel platforms with multicore nodes. We discuss a set of preprocessing steps which takes all computational decisions out of the main iteration of the algorithm and provides an intuitive shared-memory parallelism for the TTM and TRSVD steps. We …', 'Conférence', '2016-08-01', '2024-05-17', 'Parallel Processing (ICPP), 2016 45th International Conference on', '103-112', 15),
(256, 'On computing inverse entries of a sparse matrix in an out-of-core environment', 'The inverse of an irreducible sparse matrix is structurally full, so that it is impractical to think of computing or storing it. However, there are several applications where a subset of the entries of the inverse is required. Given a factorization of the sparse matrix held in out-of-core storage, we show how to compute such a subset efficiently, by accessing only parts of the factors. When there are many inverse entries to compute, we need to guarantee that the overall computation scheme has reasonable memory requirements, while minimizing the volume of communication (data transferred) between disk and main memory. This leads to a partitioning problem that we prove is NP-complete. We also show that we cannot get a close approximation to the optimal solution in polynomial time. We thus need to develop heuristic algorithms, and we propose (i) a lower bound on the cost of an optimum solution; (ii) an exact algorithm …', 'Revue', '2012-01-01', '2024-05-17', 'SIAM journal on Scientific Computing', 'A1975-A1999', 46),
(257, 'Hypergraph partitioning for multiple communication cost metrics: Model and methods', 'We investigate hypergraph partitioning-based methods for efficient parallelization of communicating tasks. A good partitioning method should divide the load among the processors as evenly as possible and minimize the inter-processor communication overhead. The total communication volume is the most popular communication overhead metric which is reduced by the existing state-of-the-art hypergraph partitioners. However, other metrics such as the total number of messages, the maximum amount of data transferred by a processor, or a combination of them are equally, if not more, important. Existing hypergraph-based solutions use a two phase approach to minimize such metrics where in each phase, they minimize a different metric, sometimes at the expense of others. We propose a one-phase approach where all the communication cost metrics can be effectively minimized in a multi-objective setting and …', 'Revue', '2015-03-01', '2024-05-17', 'Journal of Parallel and Distributed Computing', '69-83', 42),
(258, 'Design, implementation, and analysis of maximum transversal algorithms', 'We report on careful implementations of seven algorithms for solving the problem of finding a maximum transversal of a sparse matrix. We analyze the algorithms and discuss the design choices. To the best of our knowledge, this is the most comprehensive comparison of maximum transversal algorithms based on augmenting paths. Previous papers with the same objective either do not have all the algorithms discussed in this article or they used nonuniform implementations from different researchers. We use a common base to implement all of the algorithms and compare their relative performance on a wide range of graphs and matrices. We systematize, develop, and use several ideas for enhancing performance. One of these ideas improves the performance of one of the existing algorithms in most cases, sometimes significantly. So much so that we use this as the eighth algorithm in comparisons.', 'Revue', '2011-12-01', '2024-05-17', 'ACM Transactions on Mathematical Software (TOMS)', '13', 14),
(259, 'Heuristics for scheduling file-sharing tasks on heterogeneous systems with distributed repositories', 'We consider the problem of scheduling an application on a computing system consisting of heterogeneous processors and data repositories. The application consists of a large number of file-sharing otherwise independent tasks. The files initially reside on the repositories. The processors and the repositories are connected through a heterogeneous interconnection network. Our aim is to assign the tasks to the processors, to schedule the file transfers from the repositories, and to schedule the executions of tasks on each processor in such a way that the turnaround time is minimized. We propose a heuristic composed of three phases: initial task assignment, task assignment refinement, and execution ordering. We experimentally compare the proposed heuristics with three well-known heuristics on a large number of problem instances. The proposed heuristic runs considerably faster than the existing heuristics and …', 'Revue', '2007-03-31', '2024-05-17', 'Journal of Parallel and Distributed Computing', '271-285', 42),
(260, 'Revisiting hypergraph models for sparse matrix partitioning', 'We provide an exposition of hypergraph models for parallelizing sparse matrix-vector multiplies. Our aim is to emphasize the expressive power of hypergraph models. First, we set forth an elementary hypergraph model for the parallel matrix-vector multiply based on one-dimensional (1D) matrix partitioning. In the elementary model, the vertices represent the data of a matrix-vector multiply, and the nets encode dependencies among the data. We then apply a recently proposed hypergraph transformation operation to devise models for 1D sparse matrix partitioning. The resulting 1D partitioning models are equivalent to the previously proposed computational hypergraph models and are not meant to be replacements for them. Nevertheless, the new models give us insights into the previous ones and help us explain a subtle requirement, known as the consistency condition, of hypergraph partitioning models. Later, we …', 'Revue', '2007-11-01', '2024-05-17', 'SIAM review', '595', 48),
(261, 'On optimal tree traversals for sparse matrix factorization', 'We study the complexity of traversing tree-shaped workflows whose tasks require large I/O files. Such workflows typically arise in the multifrontal method of sparse matrix factorization. We target a classical two-level memory system, where the main memory is faster but smaller than the secondary memory. A task in the workflow can be processed if all its predecessors have been processed, and if its input and output files fit in the currently available main memory. The amount of available memory at a given time depends upon the ordering in which the tasks are executed. What is the minimum amount of main memory, over all post order schemes, or over all possible traversals, that is needed for an in-core execution? We establish several complexity results that answer these questions. We propose a new, polynomial time, exact algorithm which runs faster than a reference algorithm. Next, we address the setting where …', 'Conférence', '2011-05-16', '2024-05-17', 'Parallel & Distributed Processing Symposium (IPDPS), 2011 IEEE International', '556-567', 15),
(262, 'UMPa: A multi-Objective, multi-level partitioner for communication minimization', 'We propose a directed hypergraph model and a reﬁnement heuristic to distribute communicating tasks among the processing units in a distributed memory setting. The aim is to achieve load balance and minimize the maximum data sent by a processing unit. We also take two other communication metrics into account with a tie-breaking scheme. With this approach, task distributions causing an excessive use of network or a bottleneck processor which participates in almost all of the communication are avoided. We show on a large number of problem instances that our model improves the maximum data sent by a processor up to 34% for parallel environments with 4, 16, 64 and 256 processing units compared to the state of the art which only minimizes the total communication volume.', 'Revue', '2013-03-18', '2024-05-17', 'Graph Partitioning and Graph Clustering', '53', 49),
(263, 'Mumps', 'ENS-LYON UNIV-TLSE2 CNRS INRIA UNIV-LYON1 IRISA UT1-CAPITOLE INRIA2 UR1-MATH-STIC UR1-UFR-ISTIC UDL IRIT IRIT-APO UR1-MATH-NUM IRIT-CISO IRIT-CNRS TOULOUSE-INP UNIV-UT3 UT3-TOULOUSEINP', 'Revue', '2011-01-01', '2024-05-17', 'Encyclopedia of parallel computing', '1232-1238', 50),
(264, 'Fast and high quality topology-aware task mapping', 'Considering the large number of processors and the size of the interconnection networks on exactable-capable supercomputers, mapping concurrently executable and communicating tasks of an application is complex problem that needs to be dealt with care. For parallel applications, the communication overhead can be a significant bottleneck on scalability. Topology-aware task-mapping methods that map the tasks tithe processors~(i.e., cores) by exploiting the underlying network information are very effective to avoid, or at worst bend, this limitation. We propose novel, efficient, and effective task mapping algorithms employing a graph model. The experiments show that the methods are faster than the existing approaches proposed for the same task, and on 4096 processors, the algorithms improve the communication hops and link contentions by 16% and 32%, respectively, on the average. In addition, they …', 'Conférence', '2015-05-25', '2024-05-17', '2015 IEEE International Parallel and Distributed Processing Symposium', '197-206', 15),
(265, 'Multilevel algorithms for acyclic partitioning of directed acyclic graphs', 'We investigate the problem of partitioning the vertices of a directed acyclic graph into a given number of parts. The objective function is to minimize the number or the total weight of the edges having end points in different parts, which is also known as the edge cut. The standard load balancing constraint of having an equitable partition of the vertices among the parts should be met. Furthermore, the partition is required to be acyclic; i.e., the interpart edges between the vertices from different parts should preserve an acyclic dependency structure among the parts. In this work, we adopt the multilevel approach with coarsening, initial partitioning, and refinement phases for acyclic partitioning of directed acyclic graphs. We focus on two-way partitioning (sometimes called bisection), as this scheme can be used in a recursive way for multiway partitioning. To ensure the acyclicity of the partition at all times, we propose novel …', 'Revue', '2019-01-01', '2024-05-17', 'SIAM Journal on Scientific Computing', 'A2117-A2145', 46),
(266, 'Push-relabel based algorithms for the maximum transversal problem', 'We investigate the push-relabel algorithm for solving the problem of finding a maximum cardinality matching in a bipartite graph in the context of the maximum transversal problem. We describe in detail an optimized yet easy-to-implement version of the algorithm and fine-tune its parameters. We also introduce new performance-enhancing techniques. On a wide range of real-world instances, we compare the push-relabel algorithm with state-of-the-art algorithms based on augmenting paths and pseudoflows. We conclude that a carefully tuned push-relabel algorithm is competitive with all known augmenting path-based algorithms, and superior to the pseudoflow-based ones.', 'Revue', '2013-05-01', '2024-05-17', 'Computers & Operations Research', '1266-1275', 51),
(267, 'Partitioning sparse matrices for parallel preconditioned iterative methods', 'This paper addresses the parallelization of the preconditioned iterative methods that use explicit preconditioners such as approximate inverses. Parallelizing a full step of these methods requires the coefficient and preconditioner matrices to be well partitioned. We first show that different methods impose different partitioning requirements for the matrices. Then we develop hypergraph models to meet those requirements. In particular, we develop models that enable us to obtain partitionings on the coefficient and preconditioner matrices simultaneously. Experiments on a set of unsymmetric sparse matrices show that the proposed models yield effective partitioning results. A parallel implementation of the right preconditioned BiCGStab method on a PC cluster verifies that the theoretical gains obtained by the models hold in practice.', 'Revue', '2008-01-01', '2024-05-17', 'SIAM Journal on Scientific Computing', '1683', 46),
(268, 'Efficient and effective sparse tensor reordering', 'This paper formalizes the problem of reordering a sparse tensor to improve the spatial and temporal locality of operations with it, and proposes two reordering algorithms for this problem, which we call BFS-MCS and Lexi-Order. The BFS-MCS method is a Breadth First Search (BFS)-like heuristic approach based on the maximum cardinality search family; Lexi-Order is an extension of doubly lexical ordering of matrices to tensors. We show the effects of these schemes within the context of a widely used tensor computation, the CANDECOMP/PARAFAC decomposition (CPD), when storing the tensor in three previously proposed sparse tensor formats: coordinate (COO), compressed sparse fiber (CSF), and hierarchical coordinate (HiCOO). A new partition-based superblock scheduling is also proposed for HiCOO format to improve load balance. On modern multicore CPUs, we show Lexi-Order obtains up to 4.14× …', 'Livre', '2019-06-26', '2024-05-17', 'Proceedings of the ACM International Conference on Supercomputing', '227-237', 5),
(269, 'Parallel Frequent Item Set Mining with Selective Item Replication', 'We introduce a transaction database distribution scheme that divides the frequent item set mining task in a top-down fashion. Our method operates on a graph where vertices correspond to frequent items and edges correspond to frequent item sets of size two. We show that partitioning this graph by a vertex separator is sufficient to decide a distribution of the items such that the subdatabases determined by the item distribution can be mined independently. This distribution entails an amount of data replication, which may be reduced by setting appropriate weights to vertices. The data distribution scheme is used in the design of two new parallel frequent item set mining algorithms. Both algorithms replicate the items that correspond to the separator. NoClique replicates the work induced by the separator and NoClique2 computes the same work collectively. Computational load balancing and minimization of redundant …', 'Revue', '2011-10-01', '2024-05-17', 'Parallel and Distributed Systems, IEEE Transactions on', '1632-1640', 15),
(270, 'A scalable clustering-based task scheduler for homogeneous processors using DAG partitioning', 'When scheduling a directed acyclic graph (DAG) of tasks with communication costs on computational platforms, a good trade-off between load balance and data locality is necessary. List-based scheduling techniques are commonly-used greedy approaches for this problem. The downside of list-scheduling heuristics is that they are incapable of making short term sacrifices for the global efficiency of the schedule. In this work, we describe new list-based scheduling heuristics based on clustering for homogeneous platforms, under the realistic duplex single-port communication model. Our approach uses an acyclic partitioner for DAGs for clustering. The clustering enhances the data locality of the scheduler with a global view of the graph. Furthermore, since the partition is acyclic, we can schedule each part completely once its input tasks are ready to be executed. We present an extensive experimental evaluation …', 'Conférence', '2019-05-20', '2024-05-17', '2019 IEEE International Parallel and Distributed Processing Symposium (IPDPS)', '155-165', 15),
(271, 'Multithreaded clustering for multi-level hypergraph partitioning', 'Requirements for efficient parallelization of many complex and irregular applications can be cast as a hyper graph partitioning problem. The current-state-of-the art software libraries that provide tool support for the hyper graph partitioning problem are designed and implemented before the game-changing advancements in multi-core computing. Hence, analyzing the structure of those tools for designing multithreaded versions of the algorithms is a crucial tasks. The most successful partitioning tools are based on the multi-level approach. In this approach, a given hyper graph is coarsened to a much smaller one, a partition is obtained on the the smallest hyper graph, and that partition is projected to the original hyper graph while refining it on the intermediate hyper graphs. The coarsening operation corresponds to clustering the vertices of a hyper graph and is the most time consuming task in a multi-level partitioning …', 'Conférence', '2012-05-21', '2024-05-17', '2012 IEEE 26th International Parallel and Distributed Processing Symposium', '848-859', 15),
(272, 'A parallel matrix scaling algorithm', '', '', '0000-00-00', '2024-05-17', '', '', 5),
(273, 'Load-Balanced Local Time Stepping for Large-Scale Wave Propagation', 'In complex acoustic or elastic media, finite element meshes often require regions of refinement to honour external or internal topography, or small-scale features. These localized smaller elements create a bottleneck for explicit time-stepping schemes due to the Courant-Friedrichs-Lewy stability condition. Recently developed local time stepping (LTS) algorithms reduce the impact of these small elements by locally adapting the time-step size to the size of the element. The recursive, multi-level nature of our LTS scheme introduces an additional challenge, as standard partitioning schemes create a strong load imbalance across processors. We examine the use of multi-constraint graph and hypergraph partitioning tools to achieve effective, load-balanced parallelization. We implement LTS-Newmark in the seismology code SPECFEM3D and compare performance and scalability between different partitioning tools on …', 'Conférence', '2015-01-01', '2024-05-17', '29th IEEE International Parallel & Distributed Processing Symposium (IPDPS)', '925--935', 5),
(274, 'Acyclic partitioning of large directed acyclic graphs', 'Finding a good partition of a computational directed acyclic graph associated with an algorithm can help find an execution pattern improving data locality, conduct an analysis of data movement, and expose parallel steps. The partition is required to be acyclic, i.e., the inter-part edges between the vertices from different parts should preserve an acyclic dependency structure among the parts. In this work, we adopt the multilevel approach with coarsening, initial partitioning, and refinement phases for acyclic partitioning of directed acyclic graphs and develop a direct k-way partitioning scheme. To the best of our knowledge, no such scheme exists in the literature. To ensure the acyclicity of the partition at all times, we propose novel and efficient coarsening and refinement heuristics. The quality of the computed acyclic partitions is assessed by computing the edge cut, the total volume of communication between the parts …', 'Conférence', '2017-05-14', '2024-05-17', '2017 17th IEEE/ACM international symposium on cluster, cloud and grid computing (CCGRID)', '371-380', 15),
(275, 'Minimizing communication cost in fine-grain partitioning of sparse matrices', ' We show a two-phase approach for minimizing various communication-cost metrics in fine-grain partitioning of sparse matrices for parallel processing. In the first phase, we obtain a partitioning with the existing tools on the matrix to determine computational loads of the processor. In the second phase, we try to minimize the communication-cost metrics. For this purpose, we develop communication-hypergraph and partitioning models. We experimentally evaluate the contributions on a PC cluster.', 'Revue', '2003-01-01', '2024-05-17', 'Computer and Information Sciences-ISCIS 2003', '926-933', 52),
(276, 'Block triangular preconditioners for M-matrices and Markov chains', 'We consider preconditioned Krylov subspace methods for solving large sparse linear systems under the assumption that the coefficient matrix is a (possibly singular)¤-matrix. The matrices are partitioned into¥ § ¦¥ block form using graph partitioning. Approximations to the Schur complement are used to produce various preconditioners of block triangular and block diagonal type. A few properties of the preconditioners are established, and extensive numerical experiments are used to illustrate the performance of the various preconditioners on singular linear systems arising from Markov modeling.', 'Revue', '2007-01-01', '2024-05-17', 'Electronic Transactions on Numerical Analysis', '209-227', 5),
(277, 'Combinatorial problems in solving linear systems', 'In this short review paper, we examine the interplay between the solution of sparse linear systems and combinatorics. Most of this strong association comes from the identification of sparse matrices with graphs so that most algorithms dealing with sparse matrices have a close or exact analogue to an algorithm on a graph. We examine these analogues both in the case of', '', '2009-08-28', '2024-05-17', '', '', 5),
(278, 'Further notes on Birkhoff–von Neumann decomposition of doubly stochastic matrices', 'The well-known Birkhoff–von Neumann (BvN) decomposition expresses a doubly stochastic matrix as a convex combination of a number of permutation matrices. For a given doubly stochastic matrix, there are many BvN decompositions, and finding the one with the minimum number of permutation matrices is NP-hard. There are heuristics to obtain BvN decompositions for a given doubly stochastic matrix. A family of heuristics is based on the original proof of Birkhoff and proceeds step by step by subtracting a scalar multiple of a permutation matrix at each step from the current matrix, starting from the given matrix. At every step, the subtracted matrix contains nonzeros at the positions of some nonzero entries of the current matrix and annihilates at least one entry, while keeping the current matrix nonnegative. Our first result, which supports a claim of Brualdi (1982) [3], shows that this family of heuristics can miss …', 'Revue', '2018-10-01', '2024-05-17', 'Linear Algebra and its Applications', '68-78', 44),
(279, 'MUMPS: a multifrontal massively parallel sparse direct solver', '', 'Revue', '2013-01-01', '2024-05-17', 'URL: http://mumps. enseeiht. fr/index. php', '', 5),
(280, 'A matrix partitioning interface to PaToH in MATLAB', 'We present the PaToH MATLAB Matrix Partitioning Interface. The interface provides support for hypergraph-based sparse matrix partitioning methods which are used for efficient parallelization of sparse matrix–vector multiplication operations. The interface also offers tools for visualizing and measuring the quality of a given matrix partition. We propose a novel, multilevel, 2D coarsening-based 2D matrix partitioning method and implement it using the interface. We have performed extensive comparison of the proposed method against our implementation of orthogonal recursive bisection and fine-grain methods on a large set of publicly available test matrices. The conclusion of the experiments is that the new method can compete with the fine-grain method while also suggesting new research directions.', 'Revue', '2010-06-30', '2024-05-17', 'Parallel Computing', '254-272', 44),
(281, 'A library for parallel sparse matrix-vector multiplies', 'We provide parallel matrix-vector multiply routines for 1D and 2D partitioned sparse square and rectangular matrices. We clearly give pseudocodes that perform necessary initializations for parallel execution. We show how to maximize overlapping between communication and computation through the proper usage of compressed sparse row and compressed sparse column formats of the sparse matrices. We give pseudocodes for multiplication routines which benefit from such overlaps.Technical Report: No: BU-CE-0506 Department of Computer Engineering, Bilkent University, 06800 Ankara, Turkey. Available at http://www. cs. bilkent. edu. tr/publications/Date: August 31, 2005.', '', '2005-08-31', '2024-05-17', '', '', 53),
(282, 'Parallel image restoration using surrogate constraint methods', 'When formulated as a system of linear inequalities, the image restoration problem yields huge, unstructured, sparse matrices even for images of small size. To solve the image restoration problem, we use the surrogate constraint methods that can work efficiently for large problems. Among variants of the surrogate constraint method, we consider a basic method performing a single block projection in each step and a coarse-grain parallel version making simultaneous block projections. Using several state-of-the-art partitioning strategies and adopting different communication models, we develop competing parallel implementations of the two methods. The implementations are evaluated based on the per iteration performance and on the overall performance. The experimental results on a PC cluster reveal that the proposed parallelization schemes are quite beneficial.', 'Revue', '2007-02-28', '2024-05-17', 'Journal of Parallel and Distributed Computing', '186-204', 42),
(283, 'A backward/forward recovery approach for the preconditioned conjugate gradient method', 'Several recent papers have introduced a periodic verification mechanism to detect silent errors in iterative solvers. Chen (2013, pp. 167–176) has shown how to combine such a verification mechanism (a stability test checking the orthogonality of two vectors and recomputing the residual) with checkpointing: the idea is to verify every d iterations, and to checkpoint every c × d iterations. When a silent error is detected by the verification mechanism, one can rollback to and re-execute from the last checkpoint. In this paper, we also propose to combine checkpointing and verification, but we use algorithm-based fault tolerance (ABFT) rather than stability tests. ABFT can be used for error detection, but also for error detection and correction, allowing a forward recovery (and no rollback nor re-execution) when a single error is detected. We introduce an abstract performance model to compute the performance of all schemes …', 'Revue', '2016-11-01', '2024-05-17', 'Journal of computational science', '522-534', 35),
(284, 'High-performance parallel algorithms for the Tucker decomposition of higher order sparse tensors', 'We investigate an efficient parallelization of a class of algorithms for the well-known Tucker  decomposition of general -dimensional sparse tensors. The targeted algorithms are iterative and use the alternating least squares method. At each iteration, for each dimension of an -dimensional input tensor,  the following operations are performed: (i) the tensor is multiplied with  matrices (TTM step);  (ii) the product is then converted to a matrix; and  (iii) a few leading left singular vectors of the resulting matrix  are computed (SVD step) to update one of the matrices for the next TTM step.  We propose an efficient parallelization of these algorithms for current supercomputers  comprised of compute nodes, where each node is a multi-core system. We reformulate the computation of  successive TTM-steps to increase the reuse of intermediate computation,  which is of interest on its own. We discuss a set of preprocessing steps which takes all computational decisions out of the main iteration of the algorithm  and provide an intuitive row-wise shared-memory parallelism for the TTM and SVD steps. We consider a coarse and a fine grain computational scheme, investigate their data dependencies, and identify efficient communication schemes. We demonstrate how the computation of singular vectors in the SVD step can be carried out efficiently following the TTM step. Finally, we develop a hybrid MPI-OpenMP based implementation of the overall algorithm and report speedup results on up to 2048 cores.', '', '2015-10-01', '2024-05-17', '', '', 5),
(285, 'GPU accelerated maximum cardinality matching algorithms for bipartite graphs', ' We design, implement, and evaluate GPU-based algorithms for the maximum cardinality matching problem in bipartite graphs. Such algorithms have a variety of applications in computer science, scientific computing, bioinformatics, and other areas. To the best of our knowledge, ours is the first study which focuses on the GPU implementation of the maximum cardinality matching algorithms. We compare the proposed algorithms with serial and multicore implementations from the literature on a large set of real-life problems where in majority of the cases one of our GPU-accelerated algorithms is demonstrated to be faster than both the sequential and multicore implementations.', 'Conférence', '2013-01-01', '2024-05-17', 'Euro-Par 2013 Parallel Processing: 19th International Conference, Aachen, Germany, August 26-30, 2013. Proceedings 19', '850-861', 16),
(286, 'Programming strategies for irregular algorithms on the emu chick', 'The Emu Chick prototype implements migratory memory-side processing in a novel hardware system. Rather than transferring large amounts of data across the system interconnect, the Emu Chick moves lightweight thread contexts to near-memory cores before the beginning of each remote memory read. Previous work has characterized the performance of the Chick prototype in terms of memory bandwidth and programming differences from more typical, non-migratory platforms, but there has not yet been an analysis of algorithms on this system. This work evaluates irregular algorithms that could benefit from the lightweight, memory-side processing of the Chick and demonstrates techniques and optimization strategies for achieving performance in sparse matrix-vector multiply operation (SpMV), breadth-first search (BFS), and graph alignment across up to eight distributed nodes encompassing 64 nodelets in the …', 'Revue', '2020-10-21', '2024-05-17', 'ACM Transactions on Parallel Computing (TOPC)', '1-25', 14),
(287, 'Analysis of partitioning models and metrics in parallel sparse matrix-vector multiplication', ' Graph/hypergraph partitioning models and methods have been successfully used to minimize the communication among processors in several parallel computing applications. Parallel sparse matrix-vector multiplication (SpMxV) is one of the representative applications that renders these models and methods indispensable in many scientific computing contexts. We investigate the interplay of the partitioning metrics and execution times of SpMxV implementations in three libraries: Trilinos, PETSc, and an in-house one. We carry out experiments with up to 512 processors and investigate the results with regression analysis. Our experiments show that the partitioning metrics influence the performance greatly in a distributed memory setting. The regression analyses demonstrate which metric is the most influential for the execution time of the libraries.', 'Conférence', '2014-01-01', '2024-05-17', 'Parallel Processing and Applied Mathematics: 10th International Conference, PPAM 2013, Warsaw, Poland, September 8-11, 2013, Revised Selected Papers, Part II 10', '174-184', 16),
(288, 'Scheduling series-parallel task graphs to minimize peak memory', 'We consider a variant of the well-known, NP-complete problem of minimum cut linear arrangement for directed acyclic graphs. In this variant, we are given a directed acyclic graph and we are asked to find a topological ordering such that the maximum number of cut edges at any point in this ordering is minimum. In our variant, the vertices and edges have weights, and the aim is to minimize the maximum weight of cut edges in addition to the weight of the last vertex before the cut. There is a known, polynomial time algorithm (Liu, 1987 [17]) for the cases where the input graph is a rooted tree. We focus on the instances where the input graph is a directed series-parallel graph, and propose a polynomial time algorithm, thus expanding the class of graphs for which a polynomial time algorithm is known. Directed acyclic graphs are used to model scientific applications where the vertices correspond to the tasks of a given …', 'Revue', '2018-01-10', '2024-05-17', 'Theoretical Computer Science', '1-23', 35),
(289, 'On the block triangular form of symmetric matrices', 'We present some observations on the block triangular form (btf) of structurally symmetric, square, sparse matrices. If the matrix is structurally rank deficient, its canonical btf has at least one underdetermined and one overdetermined block. We prove that these blocks are transposes of each other. We further prove that the square block of the canonical btf, if present, has a special fine structure. These findings help us recover symmetry around the antidiagonal in the block triangular matrix. The uncovered symmetry helps us to permute the matrix in a special form which is symmetric along the main diagonal while exhibiting the blocks of the original btf. As the square block of the canonical btf has full structural rank, the observation relating to the square block applies to structurally nonsingular, square symmetric matrices as well.', 'Revue', '2010-01-01', '2024-05-17', 'SIAM Review', '455-470', 47),
(290, 'Product preconditioning for Markov chain problems', 'We consider preconditioned Krylov subspace methods for computing the stationary probability distribution vector of irreducible Markov chains. We propose preconditioners constructed as the product of two fairly simple preconditioners. Theoretical properties of the proposed product preconditioners are briefly discussed. We use graph partitioning tools to partition the coefficient matrix in order to build the preconditioner matrices, and we investigate the effect of the partitioning on the proposed preconditioners. Numerical experiments with GMRES on various Markov chain problems generated with the MARCA software package demonstrate that the proposed preconditioners are effective in reducing the number of iterations to convergence. Furthermore, the experimental results show that the number of partitions does not severely affect the number of iterations.', 'Revue', '2006-01-01', '2024-05-17', 'Proceedings of the 2006 Markov Anniversary Meeting, AN Langville and WJ Stewart, eds., Raleigh, NC', '239-256', 5),
(291, 'Two approximation algorithms for bipartite matching on multicore architectures', 'We propose two heuristics for the bipartite matching problem that are amenable to shared-memory parallelization. The first heuristic is very intriguing from a parallelization perspective. It has no significant algorithmic synchronization overhead and no conflict resolution is needed across threads. We show that this heuristic has an approximation ratio of around 0.632 under some common conditions. The second heuristic is designed to obtain a larger matching by employing the well-known Karp–Sipser heuristic on a judiciously chosen subgraph of the original graph. We show that the Karp–Sipser heuristic always finds a maximum cardinality matching in the chosen subgraph. Although the Karp–Sipser heuristic is hard to parallelize for general graphs, we exploit the structure of the selected subgraphs to propose a specialized implementation which demonstrates very good scalability. We prove that this second heuristic …', 'Revue', '2015-11-01', '2024-05-17', 'Journal of Parallel and Distributed Computing', '62-78', 42),
(292, 'Exact algorithms for a task assignment problem', 'We consider the following task assignment problem. Communicating tasks are to be assigned to heterogeneous processors interconnected with a heterogeneous network. The objective is to minimize the total sum of the execution and communication costs. The problem is NP-hard. We present an exact algorithm based on the well-known A* search. We report simulation results over a wide range of parameters where the largest solved instance contains about three hundred tasks to be assigned to eight processors.', 'Revue', '2009-01-01', '2024-05-17', 'Parallel Processing Letters', '451-465', 5),
(293, 'Semi-two-dimensional partitioning for parallel sparse matrix-vector multiplication', 'We propose a novel sparse matrix partitioning scheme, called semi-two-dimensional (s2D), for efficient parallelization of sparse matrix-vector multiply (SpMV) operations on distributed memory systems. In s2D, matrix nonzeros are more flexibly distributed among processors than one dimensional (row wise or column wise) partitioning schemes. Yet, there is a constraint which renders s2D less flexible than two-dimensional (nonzero based) partitioning schemes. The constraint is enforced to confine all communication operations in a single phase, as in 1D partition, in a parallel SpMV operation. In a positive view, s2D thus can be seen as being close to 2D partitions in terms of flexibility, and being close 1D partitions in terms of computation/communication organization. We describe two methods that take partitions on the input and output vectors of SpMV and produce s2D partitions while reducing the total …', 'Conférence', '2015-01-01', '2024-05-17', 'PCO2015 (IPDPSW)', '1125--1134', 5),
(294, 'Combining algorithm-based fault tolerance and checkpointing for iterative solvers', 'Several recent papers have introduced a periodic verification mechanism to detect silent errors in iterative solvers. Chen [PPoPP\'13,  pp. 167--176] has shown how to combine such a verification mechanism (a stability test checking the orthogonality of two vectors and recomputing the residual) with checkpointing: the idea is to verify every  iterations, and to checkpoint every  iterations. When a silent error is detected by the verification mechanism, one can rollback to and re-execute from the last checkpoint. In this paper, we also propose to combine checkpointing and verification, but we use ABFT rather than stability tests. ABFT can be used for error detection, but also for error detection and correction, allowing a forward recovery (and no rollback nor re-execution) when a single error is detected. We present a performance model to compute the performance of all schemes, and we instantiate it using the Conjugate Gradient algorithm. Finally, we validate our new approach through a set of simulations.', '', '2015-01-01', '2024-05-17', '', '', 5),
(295, 'On partitioning and reordering problems in a hierarchically parallel hybrid linear solver', 'PDSLin is a general-purpose algebraic parallel hybrid (direct/iterative) linear solver based on the Schur complement method. The most challenging step of the solver is the computation of a preconditioner based on the global Schur complement. Efficient parallel computation of the preconditioner gives rise to partitioning problems with sophisticated constraints and objectives. In this paper, we identify two such problems and propose hyper graph partitioning methods to address them. The first problem is to balance the work loads associated with different sub domains to compute the preconditioner. We first formulate an objective function and a set of constraints to model the preconditioner computation time. Then, to address these complex constraints, we propose a recursive hyper graph bisection method. The second problem is to improve the data locality during the parallel solution of a sparse triangular system with …', 'Conférence', '2013-05-20', '2024-05-17', '2013 IEEE International Symposium on Parallel & Distributed Processing, Workshops and Phd Forum', '1391-1400', 15),
(296, 'On partitioning problems with complex objectives', ' Hypergraph and graph partitioning tools are used to partition work for efficient parallelization of many sparse matrix computations. Most of the time, the objective function that is reduced by these tools relates to reducing the communication requirements, and the balancing constraints satisfied by these tools relate to balancing the work or memory requirements. Sometimes, the objective sought for having balance is a complex function of a partition. We mention some important class of parallel sparse matrix computations that have such balance objectives. For these cases, the current state of the art partitioning tools fall short of being adequate. To the best of our knowledge, there is only a single algorithmic framework in the literature to address such balance objectives. We propose another algorithmic framework to tackle complex objectives and experimentally investigate the proposed framework.', '', '2011-02-18', '2024-05-17', '', '', 5),
(297, 'Approximation algorithms for maximum matchings in undirected graphs', ' We propose heuristics for approximating the maximum cardinality matching on undirected graphs. Our heuristics are based on the theoretical body of a certain type of random graphs, and are made practical for real-life ones. The idea is based on judiciously selecting a subgraph of a given graph and obtaining a maximum cardinality matching on this subgraph. We show that the heuristics have an approximation guarantee of around 0.866 — log(n)/n for a graph with n vertices. Experiments for verifying the theoretical results in practice are provided.', 'Livre', '2018-01-01', '2024-05-17', '2018 Proceedings of the Seventh SIAM Workshop on Combinatorial Scientific Computing', '56-65', 46),
(298, 'The multifrontal method', 'Definition : The multifrontal method is a direct method for solving systems of linear equations Ax = b, when A is a sparse matrix and x and b are vectors or matrices. The multifrontal method organizes the operations that take place during the factorization of sparse matrices in such a way that the entire factorization is performed through partial factorizations of a sequence of dense and small submatrices. It is guided by a tree that represents the dependencies between those partial factorizations. In the following, the multifrontal method is formulated first for finite-element analysis and later generalized to assembled sparse matrices.', 'Revue', '2011-01-01', '2024-05-17', 'Encyclopedia of Parallel Computing', '1209-1216', 50),
(299, 'A multi-dimensional Morton-ordered block storage for mode-oblivious tensor computations', 'Computation on tensors, treated as multidimensional arrays, revolve around generalized basic linear algebra subroutines (BLAS). We propose a novel data structure in which tensors are blocked and blocks are stored in an order determined by Morton order. This is not only proposed for efficiency reasons, but also to induce efficient performance regardless of which mode a generalized BLAS call is invoked for; we coin the term mode-oblivious to describe data structures and algorithms that induce such behavior. Experiments on one of the most bandwidth-bound generalized BLAS kernel, the tensor–vector multiplication, not only demonstrate superior performance over two state-of-the-art variants by up to 18%, but additionally show that the proposed data structure induces a 71% less sample standard deviation for tensor–vector multiplication across d modes, where d varies from 2 to 10. Finally, we show our data …', 'Revue', '2019-04-01', '2024-05-17', 'Journal of computational science', '34-44', 35),
(300, 'A partitioning-based divisive clustering technique for maximizing the modularity', 'We present a new graph clustering algorithm aimed at Obtaining clusterings of high modularity. The algorithm pursues a divisive clustering approach and uses established graph partitioning algorithms and techniques to compute recursive bipartitions Of the input as well as to reﬁne clusters. Experimental evaluation shows that the modularity scores Obtained compare favorably to many previous approaches. In the majority of test cases, the algorithm outperformed the best known alternatives. In particular, among 13 problem instances common in the literature, the proposed algorithm improves the best known modularity in 9 cases.', 'Revue', '2013-03-18', '2024-05-17', 'Graph Partitioning and Graph Clustering', '171', 49),
(301, '1.5 D parallel sparse matrix-vector multiply', 'There are three common parallel sparse matrix-vector multiply algorithms: 1D row-parallel, 1D column-parallel, and 2D row-column-parallel. The 1D parallel algorithms offer the advantage of having only one communication phase. On the other hand, the 2D parallel algorithm is more scalable, but it suffers from two communication phases. Here, we introduce a novel concept of heterogeneous messages where a heterogeneous message may contain both input-vector entries and partially computed output-vector entries. This concept not only leads to a decreased number of messages but also enables fusing the input- and output-communication phases into a single phase. These findings are exploited to propose a 1.5D parallel sparse matrix-vector multiply algorithm which is called local row-column-parallel. This proposed algorithm requires a constrained fine-grain partitioning in which each fine-grain task is …', 'Revue', '2018-01-01', '2024-05-17', 'SIAM Journal on Scientific Computing', 'C25-C46', 46);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(302, 'A push-relabel-based maximum cardinality bipartite matching algorithm on gpus', 'We design, develop, and evaluate an atomic- and lock-free GPU implementation of the push-relabel algorithm in the context of finding maximum cardinality matchings in bipartite graphs. The problem has applications on computer science, scientific computing, bioinformatics, and other areas. Although the GPU parallelization of the push-relabel technique has been investigated in the context of flow algorithms, to the best of our knowledge, ours is the first study which focuses on the maximum cardinality matching. We compare the proposed algorithms with serial, multicore, and many core bipartite graph matching implementations from the literature on a large set of real-life problems. Our experiments show that the proposed pushrelabel-based GPU algorithm is faster than the existing parallel and sequential implementations.', 'Conférence', '2013-10-01', '2024-05-17', '2013 42nd International Conference on Parallel Processing', '21-29', 15),
(303, 'A scalable hybrid linear solver based on combinatorial algorithms', 'The availability of large-scale computing platforms comprising of tens of thousands of multicore processors motivates the need for the next generation of highly scalable sparse linear system solvers. These solvers must optimize parallel performance, processor (serial) performance, as well as memory requirements, while being robust across broad classes of applications and systems. In this chapter, we present a hybrid parallel solver that combines the desirable characteristics of direct methods (robustness) and effective iterative solvers (low computational cost), while alleviating their drawbacks (memory requirements, lack of robustness). The hybrid solver is based on the general sparse direct solver PARDISO [1], and a class of Spike factorization [2, 3, 4, 5, 6, 7, 8, 9, 10, 11] solvers. The resulting algorithm, called PSPIKE, is as robust as direct solvers, more reliable than classical preconditioned Krylov-subspace …', 'Revue', '2012-01-25', '2024-05-17', 'Combinatorial Scientific Computing', '95-127', 54),
(304, 'Hypergraph partitioning', 'Hypergraphs are generalization of graphs where each edge (hyperedge) can connect more than two vertices. In simple terms, the hypergraph partitioning problem can be defined as the task of dividing the vertices of hypergraph into two or more roughly equal sized parts such that a cost function on the hyperedges connecting vertices in different parts is minimized.', 'Revue', '2011-01-01', '2024-05-17', 'Encyclopedia of Parallel Computing', '871--881', 50),
(305, 'Karp-Sipser based kernels for bipartite graph matching', 'We consider Karp-Sipser, a well known matching heuristic in the context of data reduction for the maximum cardinality matching problem. We describe an efficient implementation as well as modifications to reduce its time complexity in worst case instances, both in theory and in practical cases. We compare experimentally against its widely used simpler variant and show cases for which the full algorithm yields better performance.', 'Livre', '2020-01-01', '2024-05-17', '2020 Proceedings of the Twenty-Second Workshop on Algorithm Engineering and Experiments (ALENEX)', '134-145', 46),
(306, 'Combining backward and forward recovery to cope with silent errors in iterative solvers', 'Several recent papers have introduced a periodic verification mechanism to detect silent errors in iterative solvers. Chen [PPoPP\'13, pp. 167 -- 176] has shown how to combine such a verification mechanism (a stability test checking the orthogonality of two vectors and recomputing the residual) with check pointing: the idea is to verify every d iterations, and to checkpoint every c × d iterations. When a silent error is detected by the verification mechanism, one can rollback to, and re-execute from, the last checkpoint. In this paper, we also propose to combine check pointing and verification, but we use ABFT rather than stability tests. ABFT can be used for error detection, but also for error detection and correction, allowing a forward recovery (and no rollback nor re-execution) when a single error is detected. We introduce an abstract performance model to compute the performance of all schemes, and we instantiate it …', 'Conférence', '2015-01-01', '2024-05-17', 'PDSEC2015 (IPDPSW)', '980--989', 5),
(307, 'Fill-in reduction in sparse matrix factorizations using hypergraphs', 'We discuss the use of hypergraph partitioning based methods in fill-reducing orderings of sparse matrices for Cholesky, LU and QR factorizations. For the Cholesky factorization, we investigate a recent result on pattern-wise decomposition of sparse matrices, generalize the result, and develop algorithmic tools to obtain more effective ordering methods. The generalized results help us formulate the fill-reducing ordering problem for LU factorization as we do for the Cholesky case, without ever symmetrizing the given matrix  as  or . For the QR factorization, we adopt a recently proposed technique to use hypergraph models in a fairly standard manner. The method again does not form the possibly much denser matrix . We also discuss alternatives for LU and QR factorization cases where the symmetrized matrix can be used. We provide comparisons with the most common alternatives in all three cases.', '', '2014-01-01', '2024-05-17', '', '', 5),
(308, 'On the scalability of hypergraph models for sparse matrix partitioning', 'We investigate the scalability of the hypergraph-based sparse matrix partitioning methods with respect to the increasing sizes of matrices and number of nonzeros. We propose a method to rowwise partition the matrices that correspond to the discretization of two-dimensional domains with the five-point stencil. The proposed method obtains perfect load balance and achieves very good total communication volume. We investigate the behaviour of the hypergraph-based rowwise partitioning method with respect to the proposed method, in an attempt to understand how scalable the former method is. In another set of experiments, we work on general sparse matrices under different scenarios to understand the scalability of various hypergraph-based one- and two-dimensional matrix partitioning methods.', 'Conférence', '2010-02-17', '2024-05-17', 'Parallel, Distributed and Network-Based Processing (PDP), 2010 18th Euromicro International Conference on', '593-600', 15),
(309, 'Streaming hypergraph partitioning algorithms on limited memory environments', 'Many well-known, real-world problems involve dynamic data which describe the relationship among the entities. Hypergraphs are powerful combinatorial structures that are frequently used to model such data. For many of today\'s data-centric applications, this data is streaming; new items arrive continuously, and the data grows with time. With paradigms such as Internet of Things and Edge Computing, such applications become more natural and more practical. In this work, we assume a streaming model where the data is modeled as a hypergraph, which is generated at the edge. This data then partitioned and sent to remote nodes via an algorithm running on a memory-restricted device such as a single board computer. Such a partitioning is usually performed by taking a connectivity metric into account to minimize the communication cost of later analyses that will be performed in a distributed fashion. Although there are many offline tools that can partition static hypergraphs excellently, algorithms for the streaming settings are rare. We analyze a well-known algorithm from the literature and significantly improve its running time by altering its inner data structure. For instance, on a medium-scale hypergraph, the new algorithm reduces the runtime from 17800 seconds to 10 seconds. We then propose sketch- and hash-based algorithms, as well as ones that can leverage extra memory to store a small portion of the data to enable the refinement of partitioning when possible. We experimentally analyze the performance of these algorithms and report their run times, connectivity metric scores, and memory uses on a high-end server and four different …', 'Revue', '2021-03-09', '2024-05-17', 'arXiv preprint arXiv:2103.05394', '', 5),
(310, 'Coping with silent errors in HPC applications', ' This chapter describes a unified framework for the detection and correction of silent errors, which constitute a major threat for scientific applications at extreme-scale. We first motivate the problem and explain why checkpointing must be combined with some verification mechanism. Then we introduce a general-purpose technique based upon computational patterns that periodically repeat over time. These patterns interleave verifications and checkpoints, and we show how to determine the pattern minimizing expected execution time. Then we move to application-specific techniques and review dynamic programming algorithms for linear chains of tasks, as well as ABFT-oriented algorithms for iterative methods in sparse linear algebra. Thanks to Selim Akl, by Yves Robert—I have a vivid souvenir of Selim’s visit to Lyon in the early 90s. Selim had obtained a Louis Néel fellowship devoted to promote exchanges …', 'Revue', '2017-01-01', '2024-05-17', 'Emergent Computation: A Festschrift for Selim G. Akl', '269-292', 19),
(311, 'On optimal and balanced sparse matrix partitioning problems', 'We investigate one dimensional partitioning of sparse matrices under a given ordering of the rows/columns. The partitioning constraint is to have load balance across processors when different parts are assigned to different processors. The load is defined as the number of rows, or columns, or the nonzeros assigned to a processor. The partitioning objective is to optimize different functions, including the well-known total communication volume arising in a distributed memory implementation of parallel sparse matrix-vector multiplication operations. The difference between our problem in this work and the general sparse matrix partitioning problem is that the parts should correspond to disjoint intervals of the given order. Whereas the partitioning problem without the interval constraint corresponds to the NP-complete hyper graph partitioning problem, the restricted problem corresponds to a polynomial-time solvable …', 'Conférence', '2012-09-24', '2024-05-17', '2012 IEEE International Conference on Cluster Computing', '257-265', 15),
(312, 'Multifrontal massively parallel solver (MUMPS)', '', 'Revue', '2003-01-01', '2024-05-17', 'User’s guide. Version', '', 5),
(313, 'Multifrontal massively parallel solver (mumps 5.3. 0) user’s guide', '', '', '2020-01-01', '2024-05-17', '', '', 55),
(314, 'Preconditioning techniques based on the Birkhoff–von Neumann decomposition', 'We introduce a class of preconditioners for general sparse matrices based on the Birkhoff–von Neumann decomposition of doubly stochastic matrices. These preconditioners are aimed primarily at solving challenging linear systems with highly unstructured and indefinite coefficient matrices. We present some theoretical results and numerical experiments on linear systems from a variety of applications.', '', '2016-05-01', '2024-05-17', '', '', 5),
(315, 'MUMPS Web page', '', '', '2016-01-01', '2024-05-17', '', '', 5),
(316, 'Partitioning, ordering, and load balancing in a hierarchically parallel hybrid linear solver', 'PDSLin is a general-purpose algebraic parallel hybrid (direct/iterative) linear solver based on the Schur complement method. The most challenging step of the solver is the computation of a preconditioner based on an approximate global Schur complement. We investigate two combinatorial problems to enhance PDSLin\'s performance at this step. The first is a multi-constraint partitioning problem to balance the workload while computing the preconditioner in parallel. For this, we describe and evaluate a number of graph and hypergraph partitioning algorithms to satisfy our particular objective and constraints. The second problem is to reorder the sparse right-hand side vectors to improve the data access locality during the parallel solution of a sparse triangular system with multiple right-hand sides. This is to speed up the process of eliminating the unknowns associated with the interface. We study two reordering techniques: one based on a postordering of the elimination tree and the other based on a hypergraph partitioning. To demonstrate the effect of these techniques on the performance of PDSLin, we present the numerical results of solving large-scale linear systems arising from two applications of our interest: numerical simulations of modeling accelerator cavities and of modeling fusion devices.', '', '2011-01-01', '2024-05-17', '', '22', 5),
(317, 'Combinatorial problems in a Parallel Hybrid Linear Solver', 'Introduction. A hybrid linear solver based on the Schur complement method has great potential to be a general purpose solver scalable on tens of thousands of processors. In this method, the original linear system is first partitioned into k subdomain problems using a parallel graph partitioning algorithm. This results in a linear system of the following block structure:', '', '2011-01-01', '2024-05-17', '', '', 5),
(318, 'Heuristics for a matrix symmetrization problem', ' We consider the following problem: given a square, nonsymmetric, (0,1)-matrix, find a permutation of its columns that yields a zero-free diagonal and maximizes the symmetry. The problem is known to be NP-hard. We propose a fast iterative-improvement based heuristic and evaluate the performance of the heuristic on a large set of matrices.', 'Revue', '2008-01-01', '2024-05-17', 'Parallel Processing and Applied Mathematics', '718-727', 52),
(319, 'PARALLEL SPARSE MATRIX-VECTOR MULTIPLIES AND ITERATIVE SOLVERS', 'Sparse matrix-vector multiply (SpMxV) operations are in the kernel of many scientific computing applications. Therefore, efficient parallelization of SpMxV operations is of prime importance to scientific computing community. Previous works on parallelizing SpMxV operations consider maintaining the load balance among processors and minimizing the total message volume. We show that the total message latency (start-up time) may be more important than the total message volume. We also stress that the maximum message volume and latency handled by a single processor are important communication cost metrics that should be minimized. We propose hypergraph models and hypergraph partitioning methods to minimize these four communication cost metrics in one dimensional and two dimensional partitioning of sparse matrices. Iterative methods used for solving linear systems appear to be the most common …', '', '2005-08-01', '2024-05-17', '', '', 5),
(320, 'Effective heuristics for matchings in hypergraphs', '  The problem of finding a maximum cardinality matching in a d-partite, d-uniform hypergraph is an important problem in combinatorial optimization and has been theoretically analyzed. We first generalize some graph matching heuristics for this problem. We then propose a novel heuristic based on tensor scaling to extend the matching via judicious hyperedge selections. Experiments on random, synthetic and real-life hypergraphs show that this new heuristic is highly practical and superior to the others on finding a matching with large cardinality. ', 'Livre', '2019-06-24', '2024-05-17', 'International Symposium on Experimental Algorithms', '248-264', 19),
(321, 'Constructing elimination trees for sparse unsymmetric matrices', 'The elimination tree model for sparse unsymmetric matrices and an algorithm for constructing it have been recently proposed by Eisenstat and Liu [SIAM J. Matrix Anal. Appl., 26 (2005), pp. 686--705] and [SIAM J. Matrix Anal. Appl., 29 (2008), pp. 1363--1381]. The construction algorithm has a worst-case time complexity of  for an  unsymmetric matrix having  off-diagonal nonzeros. We propose another algorithm that has a worst-case time complexity of . We compare the two algorithms experimentally and show that both algorithms are efficient in general. The algorithm of Eisenstat and Liu is faster in many practical cases, yet there are instances in which there is a significant difference between the running time of the two algorithms in favor of the one proposed here.', 'Revue', '2013-01-01', '2024-05-17', 'SIAM Journal on Matrix Analysis and Applications', '345-354', 46),
(322, 'On shared-memory parallelization of a sparse matrix scaling algorithm', 'We discuss efficient shared memory parallelization of sparse matrix computations whose main traits resemble to those of the sparse matrix-vector multiply operation. Such computations are difficult to parallelize because of the relatively small computational granularity characterized by small number of operations per each data access. Our main application is a sparse matrix scaling algorithm which is more memory bound than the sparse matrix vector multiplication operation. We take the application and parallelize it using the standard OpenMP programming principles. Apart from the common race condition avoiding constructs, we do not reorganize the algorithm. Rather, we identify associated performance metrics and describe models to optimize them. By using these models, we implement parallel matrix scaling algorithms for two well-known sparse matrix storage formats. Experimental results show that simple …', 'Conférence', '2012-09-10', '2024-05-17', '2012 41st International Conference on Parallel Processing', '68-77', 15),
(323, 'A novel aggregation method based on graph matching for algebraic multigrid preconditioning of sparse linear systems', 'Multilevel techniques are very effective tools for preconditioning iterative Krylov methods in the solution of sparse linear systems; among them, Algebraic MultiGrid (AMG) are widely employed variants. In [2, 4] it is shown how parallel smoothed aggregation techniques can be used in combination with domain decomposition Schwarz preconditioners to obtain AMG preconditioners; the effectiveness of such a combination results from the fact that the use of coarse grids induces a higher coupling between the subdomains defined in the Schwarz framework.Basically, in aggregation algorithms, the nodes of the graph associated with the matrix of the problem are coalesced to form supernodes, which in turn are the nodes of a coarser problem. By using these supernodes, AMG methods are provided with “ladders” to move from the fine level to the coarser ones and backward, ie with restriction and prolongation operators. Once we have these ingredients, we can use different “recipes” to combine the solution at the coarser levels with the solution and residual at the fine level, for computing corrections and improve the solution to the original linear system. The aggregation technique thus has a great impact on the effectiveness of an AMG-based preconditioner.', 'Conférence', '2011-05-16', '2024-05-17', 'International Conference On Preconditioning Techniques For Scientific And Industrial Applications (PRECONDITIONING 2011)', '', 5),
(324, 'Scaling matrices and counting the perfect matchings in graphs', 'We investigate efficient randomized methods for approximating the number of perfect matchings in bipartite graphs and general undirected graphs. Our approach is based on assigning probabilities to edges, randomly selecting an edge to be in a perfect matching, and discarding edges that cannot be put in a perfect matching. The probabilities are set according to the entries in the doubly stochastically scaled version of the adjacency matrix of the given graph. The experimental analysis on random and real-life graphs shows improvements in the approximation over previous and similar methods from the literature.', 'Revue', '2022-02-15', '2024-05-17', 'Discrete Applied Mathematics', '130-146', 44),
(325, 'Combinatorial Tiling for Sparse Neural Networks', 'Sparse deep neural networks (DNNs) emerged as the result of search for networks with less storage and lower computational complexity. The sparse DNN inference is the task of using such trained DNN networks to classify a batch of input data. We propose an efficient, hybrid model- and data-parallel DNN inference using hypergraph models and partitioners. We exploit tiling and weak synchronization to increase cache reuse, hide load imbalance, and hide synchronization costs. Finally, a blocking approach allows application of this new hybrid inference procedure for deep neural networks. We initially experiment using the hybrid tiled inference approach only, using the first five layers of networks from the IEEE HPEC 2019 Graph Challenge, and attain up to 2 x speedup versus a data-parallel baseline.', 'Conférence', '2020-09-22', '2024-05-17', '2020 IEEE High Performance Extreme Computing Conference (HPEC)', '1-7', 15),
(326, 'High performance tensor-vector multiplies on shared memory systems', 'Tensor–vector multiplication is one of the core components in tensor computations. We have recently investigated high performance, single core implementation of this bandwidth-bound operation. In this work, we investigate efficient, shared memory algorithms to carry out this operation. Upon carefully analyzing the design space, we implement a number of alternatives using OpenMP and compare them experimentally. Experimental results on up to 8 socket systems show near peak performance for the proposed algorithms.', '', '2019-05-01', '2024-05-17', '', '', 5),
(327, 'Reducing elimination tree height for parallel LU factorization of sparse unsymmetric matrices', 'The elimination tree for unsymmetric matrices is a recent model playing important roles in sparse LU factorization. This tree captures the dependencies between the tasks of some well-known variants of sparse LU factorization. Therefore, the height of the elimination tree corresponds to the critical path length of the task dependency graph in the corresponding parallel LU factorization methods. We investigate the problem of finding minimum height elimination trees to expose a maximum degree of parallelism by minimizing the critical path length. This problem has recently been shown to be NP-complete. Therefore, we propose heuristics, which generalize the most successful approaches used for symmetric matrices to unsymmetric ones. We test the proposed heuristics on a large set of real world matrices and report 28% reduction in the elimination tree heights with respect to a common method, which exploits the …', 'Conférence', '2015-01-01', '2024-05-17', 'HiPC 2014', '', 15),
(328, 'Bipartite matching heuristics with quality guarantees on shared memory parallel computers', 'We propose two heuristics for the bipartite matching problem that are amenable to shared-memory parallelization. The first heuristic is very intriguing from parallelization perspective. It has no significant algorithmic synchronization overhead and no conflict resolution is needed across threads. We show that this heuristic has an approximation ratio of around 0.632. The second heuristic is designed to obtain a larger matching by employing the well-known Karp-Sipser heuristic on a judiciously chosen subgraph of the original graph. We show that the Karp-Sipser heuristic always finds a maximum cardinality matching in the chosen subgraph. Although the Karp-Sipser heuristic is hard to parallelize for general graphs, we exploit the structure of the selected sub graphs to propose a specialized implementation which demonstrates a very good scalability. Based on our experiments and theoretical evidence, we conjecture …', 'Conférence', '2014-05-19', '2024-05-17', '2014 IEEE 28th International Parallel and Distributed Processing Symposium', '540-549', 15),
(329, 'Algorithms and data structures for hyperedge queries', 'We consider the problem of querying the existence of hyperedges in hypergraphs. More formally, given a hypergraph, we need to answer queries of the form: “Does the following set of vertices form a hyperedge in the given hypergraph?” Our aim is to set up data structures based on hashing to answer these queries as fast as possible. We propose an adaptation of a well-known perfect hashing approach for the problem at hand. We analyze the space and runtime complexity of the proposed approach and experimentally compare it with the state-of-the-art hashing-based solutions. Experiments demonstrate the efficiency of the proposed approach with respect to the state-of-the-art.', '', '2021-02-01', '2024-05-17', '', '25', 5),
(330, 'Fully-dynamic weighted matching approximation in practice', ' Finding large or heavy matchings in graphs is a ubiquitous combinatorial optimization problem. In this paper, we engineer the first non-trivial implementations for approximating the dynamic weighted matching problem. Our first algorithm is based on random walks/paths combined with dynamic programming. The second algorithm has been introduced by Stubbs and Williams without an implementation. Roughly speaking, their algorithm uses dynamic unweighted matching algorithms as a subroutine (within a multilevel approach); this allows us to use previous work on dynamic unweighted matching algorithms as a black box in order to obtain a fully-dynamic weighted matching algorithm. We empirically study the algorithms on an extensive set of dynamic instances and compare them with optimal weighted matchings. Our experiments show that the random walk algorithm typically fares much better than Stubbs …', 'Livre', '2021-01-01', '2024-05-17', 'SIAM Conference on Applied and Computational Discrete Algorithms (ACDA21)', '32-44', 46),
(331, 'Partitioning, matching, and ordering: Combinatorial scientific computing with matrices and tensors', 'This HDR investigates three classes of problems at the interplay of discrete algorithms, combinatorial optimization, and numerical methods. The three problem classes are that of partitioning, matching, and ordering.  Partitioning problems arise in task decomposition for parallel computing, where load balance and low communication cost are two objectives. We discuss acyclic partitioning of directed acyclic graphs and hypergraphs. While our contributions for the former problem concern combinatorial tools for the desired partitioning objectives and constraints, those for the second problem concern the use of hypergraph partitioning tools for efficient tensor decomposition in distributed memory systems.  Matching problems arise in settings where agents compete for exclusive access to resources. We present approximation algorithms for matchings in graphs and effective heuristics for finding matchings in hypergraphs. We also investigate the problem of finding Birkhoff--von Neumann decompositions with a small number of permutation matrices and present complexity results and theoretical insights into this problem.   Ordering problems arise when one wants to permute sparse matrices and tensors into desirable forms. We propose heuristics to permute sparse matrices into special forms to reduce the height of the resulting elimination tree. We also propose heuristics to cluster nonzeros of a given sparse tensor around the diagonal in order to improve the performance of certain tensor operations.  The general research area is called combinatorial scientific computing (CSC). In CSC, the contributions have practical and theoretical flavor. For all …', '', '2019-09-19', '2024-05-17', '', '', 5),
(332, 'Comments on the hierarchically structured bin packing problem', 'We study the hierarchically structured bin packing problem. In this problem, the items to be packed into bins are at the leaves of a tree. The objective of the packing is to minimize the total number of bins into which the descendants of an internal node are packed, summed over all internal nodes. We investigate an existing algorithm and make a correction to the analysis of its approximation ratio. Further results regarding the structure of an optimal solution and a strengthened inapproximability result are given.', 'Revue', '2015-02-01', '2024-05-17', 'Information Processing Letters', '306-309', 35),
(333, 'On partitioning two dimensional finite difference meshes for distributed memory parallel computers', 'We investigate the problem of partitioning finite difference meshes in two dimensions among the processors of a parallel computer. The objective is to achieve a perfect load balance while minimizing the communication cost. There are well-known graph, hypergraph, and geometry-based partitioning algorithms for this problem. The known geometric algorithms have linear running time and obtain the best results for very special mesh sizes and processor numbers. We propose another geometric algorithm. The proposed algorithm is linear, is applicable to much more cases than some well-known alternatives, obtains better results than the graph partitioning algorithms, obtains better results than the hypergraph partitioning algorithms almost always. Our algorithm also obtains better results than a known asymptotically-optimal algorithm for some small number of processors. We also catalog related theoretical results.', 'Conférence', '2014-02-12', '2024-05-17', '2014 22nd Euromicro International Conference on Parallel, Distributed, and Network-Based Processing', '9-16', 15),
(334, 'PaToH MATLAB interface', 'The aim of the PaToH Matrix Partitioning Interface is to provide sparse matrix partitioning routines in Matlab. The partitioning routines are based on hypergraph models [1, 3, 4, 5] and use PaToH hypergraph partitioning tool [2] within a mex function. Apart from the mex function routine that builds a hypergraph and calls PaToH, everything else is based on matrices and vectors. Therefore, we refer the reader to the papers cited above for the details of the hypergraph models and the algorithms to partition the hypergraphs. We refer the reader to [6] for a sample use of this interface for developing partitioning algorithms. This document covers only matrix partitioning routines and some other utility functions concerning matrix partitioning. The most common use of hypergraph partitioning-based sparse matrix partitions is to efficiently parallelize sparse matrix-vector multiply (SpMxV) operation y← Ax. Here, A is a sparse matrix, x is the input-vector and y is the output-vector of the multiply operation (it is understood that the vectors are of appropriate sizes). As is clear, a parallelization of this computation requires partitioning of the input-and output-vectors as well. Symmetric vector partitioning (for short symmetric partitioning) refers to the case in which the input-and output-vectors have the same partitions. In a similar vein, unsymmetric vector partitioning refers to the case in which the inputand output-vectors have different partitions. The parallelization is achieved by partitioning the matrix, and the input and output-vectors among K processors. That is, a processor holds a set of nonzeros of the matrix, a portion of the input-vector x, and is set to be responsible for …', '', '2009-06-01', '2024-05-17', '', '', 5),
(335, 'An efficient parallel implementation of a perfect hashing method for hypergraphs', 'Querying the existence of an edge in a given graph or hypergraph is a building block in several algorithms. Hashing-based methods can be used for this purpose, where the given edges are stored in a hash table in a preprocessing step, and then the queries are answered using the lookup operations. While the general hashing methods have fast lookup times in the average case, the worst case run time is much higher. Perfect hashing methods take advantage of the fact that the items to be stored are all available and construct a collision free hash function for the given input, resulting in an optimal lookup time even in the worst case. We investigate an efficient shared-memory parallel implementation of a recently proposed perfect hashing method for hypergraphs. We experimentally compare the resulting parallel algorithms with the state-of-the-art and demonstrate better run time and scalability on a set of …', 'Conférence', '2022-05-30', '2024-05-17', '2022 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)', '265-274', 15),
(336, 'Engineering fast almost optimal algorithms for bipartite graph matching: Extended version', 'We consider the maximum cardinality matching problem in bipartite graphs. There are a number of exact, deterministic algorithms for this purpose, whose complexities are high in practice. There are randomized approaches for special classes of bipartite graphs. Random 2-out bipartite graphs, where each vertex chooses two neighbors at random from the other side, form one class for which there is an O (m+ nlog n)-time Monte Carlo algorithm. Regular bipartite graphs, where all vertices have the same degree, form another class for which there is an expected O (m+ nlog n)-time Las Vegas algorithm. We investigate these two randomized algorithms and turn them into practical heuristics. We compare the performance of the resulting heuristics and show that they obtain near optimal results in practice and are comparable with the standard approaches.', '', '2020-02-01', '2024-05-17', '', '', 56),
(337, 'Matrix symmetrization and sparse direct solvers', ' We investigate algorithms for finding column permutations of sparse matrices in order to have large diagonal entries and to have many entries symmetrically positioned around the diagonal. The aim is to improve the memory and running time requirements of a certain class of sparse direct solvers. We propose efficient algorithms for this purpose by combining two existing approaches and demonstrate the effect of our findings in practice using a direct solver. We show improvements in a number of components of the running time of a sparse direct solver with respect to the state of the art on a diverse set of matrices.', 'Livre', '2020-01-01', '2024-05-17', '2020 Proceedings of the SIAM Workshop on Combinatorial Scientific Computing', '128-137', 46),
(338, 'Direct methods for sparse matrix solution', 'where is a given vector, is the vector of unknowns and is a given sparse matrix representing the coefficients of unknowns in each equation. In contrast to iterative methods, direct methods obtain the solution to the above system in a finite and fixed number of steps.', 'Revue', '2013-10-05', '2024-05-17', 'Scholarpedia', '9700', 5),
(339, 'On the minimum edge cover and vertex partition by quasi-cliques problems', 'A -quasi-clique in a simple undirected graph is a set of vertices which induces a subgraph with the edge density of at least  for . A cover of a graph by -quasi-cliques is a set of -quasi-cliques where each edge of the graph is contained in at least one quasi-clique. The minimum cover by -quasi-cliques problem asks for a -quasi-clique cover with the minimum number of quasi-cliques. A partition of a graph by -quasi-cliques is a set of -quasi-cliques where each vertex of the graph belongs to exactly one quasi-clique. The minimum partition by -quasi-cliques problem asks for a vertex partition by -quasi-cliques with the minimum number of quasi-cliques. We show that the decision versions of the minimum cover and partition by -quasi-cliques problems are NP-complete for any fixed  satisfying .', '', '2013-02-01', '2024-05-17', '', '', 5),
(340, 'Topic 10: Parallel numerical algorithms', ' The solution of large-scale problems in Computational Science and Engineering relies on the availability of accurate, robust and efficient numerical algorithms and software that are able to exploit the power offered by modern computer architectures. Such algorithms and software provide building blocks for prototyping and developing novel applications, and for improving existing ones, by relieving the developers from details concerning numerical methods as well as their implementation in new computing environments.', 'Conférence', '2012-01-01', '2024-05-17', 'Euro-Par 2012 Parallel Processing: 18th International Conference, Euro-Par 2012, Rhodes Island, Greece, August 27-31, 2012. Proceedings 18', '550-550', 16),
(341, 'Towards parallel bipartite matching algorithms', 'Towards parallel bipartite matching algorithms - Archive ouverte HAL Accéder directement au \ncontenu Documentation FR Français (FR) Anglais (EN) Se connecter Portail HAL Inria \nRecherche Loading... Recherche avancée Information de documents Titres Titres Sous-titre \nTitre de l\'ouvrage Titre du volume (Série) Champ de recherche par défaut (multicritères) + \ntexte intégral des PDF Résumé Texte intégral indexé des documents PDF Mots-clés Type de \ndocument Sous-type de document Tous les identifiants du document Identifiant HAL du dépôt \nLangue du document (texte) Pays (Texte) Ville À paraître (true ou false) Ajouter Auteur Auteur \n(multicritères) Auteur (multicritères) Auteur : Nom complet Auteur : Nom de famille Auteur : \nPrénom Auteur : Complément de nom, deuxième prénom Auteur : Organisme payeur Auteur : \nIdHal (chaîne de caractères) Auteur : Fonction Auteur : personID (entier) hal_authId_i Auteur : …', 'Conférence', '2009-01-01', '2024-05-17', 'Scheduling for large-scale systems', '', 5),
(342, 'Experiments on Hypergraph Models for Parallelizing Preconditioned Iterative Methods', 'We have developed hypergraph models to efficiently parallelize the preconditioned iterative methods that use explicit preconditioners. The models are discussed elsewhere. Here, we report our experiments.', '', '2004-10-12', '2024-05-17', '', '', 57),
(343, 'A message ordering problem in parallel programs', ' We consider a certain class of parallel program segments in which the order of messages sent affects the completion time. We give characterization of these parallel program segments and propose a solution to minimize the completion time. With a sample parallel program, we experimentally evaluate the effect of the solution on a PC cluster.', 'Revue', '2004-01-01', '2024-05-17', 'Recent Advances in Parallel Virtual Machine and Message Passing Interface', '232-256', 52),
(344, 'Engineering fast algorithms for the bottleneck matching problem', 'We investigate the maximum bottleneck matching problem in bipartite graphs. Given a bipartite graph with nonnegative edge weights, the problem is to determine a maximum cardinality matching in which the minimum weight of an edge is the maximum. To the best of our knowledge, there are two widely used solvers for this problem based on two different approaches. There exists a third known approach in the literature, which seems inferior to those two which is presumably why there is no implementation of it. We take this third approach, make theoretical observations to improve its behavior, and implement the improved method. Experiments with the existing two solvers show that their run time can be too high to be useful in many interesting cases. Furthermore, their performance is not predictable, and slight perturbations of the input graph lead to considerable changes in the run time. On the other hand, the proposed solver\'s performance is much more stable; it is almost always faster than or comparable to the two existing solvers, and its run time always remains low.', 'Conférence', '2023-09-04', '2024-05-17', 'ESA 2023-The 31st Annual European Symposium on Algorithms', '', 5),
(345, 'ACR: Automatic checkpoint/restart for soft and hard error protection', 'As machines increase in scale, many researchers have predicted that failure rates will correspondingly increase. Soft errors do not inhibit execution, but may silently generate incorrect results. Recent trends have shown that soft error rates are increasing, and hence they must be detected and handled to maintain correctness. We present a holistic methodology for automatically detecting and recovering from soft or hard faults with minimal application intervention. This is demonstrated by ACR: an automatic checkpoint/restart framework that performs application replication and automatically adapts the checkpoint period using online information about the current failure rate. ACR performs an application- and user-oblivious recovery. We empirically test ACR by injecting failures that follow different distributions for five applications and show low overhead when scaled to 131,072 cores. We also analyze the interaction …', 'Livre', '2013-11-17', '2024-05-17', 'Proceedings of the international conference on high performance computing, networking, storage and analysis', '1-12', 5),
(346, 'Periodic hierarchical load balancing for large supercomputers', 'Large parallel machines with hundreds of thousands of processors are becoming more prevalent. Ensuring good load balance is critical for scaling certain classes of parallel applications on even thousands of processors. Centralized load balancing algorithms suffer from scalability problems, especially on machines with a relatively small amount of memory. Fully distributed load balancing algorithms, on the other hand, tend to take longer to arrive at good solutions. In this paper, we present an automatic dynamic hierarchical load balancing method that overcomes the scalability challenges of centralized schemes and longer running times of traditional distributed schemes. Our solution overcomes these issues by creating multiple levels of load balancing domains which form a tree. This hierarchical method is demonstrated within a measurement-based load balancing framework in Charm++. We discuss techniques to …', '', '2011-11-01', '2024-05-17', '', '371-385', 25),
(347, 'Hierarchical load balancing for charm++ applications on large supercomputers', 'Large parallel machines with hundreds of thousands of processors are being built. Recent studies have shown that ensuring good load balance is critical for scaling certain classes of parallel applications on even thousands of processors. Centralized load balancing algorithms suffer from scalability problems, especially on machines with relatively small amount of memory. Fully distributed load balancing algorithms, on the other hand, tend to yield poor load balance on very large machines. In this paper, we present an automatic dynamic hierarchical load balancing method that overcomes the scalability challenges of centralized schemes and poor solutions of traditional distributed schemes. This is done by creating multiple levels of aggressive load balancing domains which form a tree. This hierarchical method is demonstrated within a measurement-based load balancing framework in Charm++. We present …', 'Conférence', '2010-09-13', '2024-05-17', '2010 39th International Conference on Parallel Processing Workshops', '436-444', 15),
(348, 'Team-based message logging: Preliminary results', 'Fault tolerance will be a fundamental imperative in the next decade as machines containing hundreds of thousands of cores will be installed at various locations. In this context, the traditional checkpoint/restart model does not seem to be a suitable option, since it makes all the processors roll back to their latest checkpoint in case of a single failure in one of the processors. In-memory message logging is an alternative that avoids this global restoration process and instead replays the messages to the failed processor. However, there is a large memory overhead associated with message logging because each message must be logged so it can be played back if a failure occurs. In this paper, we introduce a technique to alleviate the demand of memory in message logging by grouping processors into teams. These teams act as a failure unit: if one team member fails, all the other members in that team roll back to their …', 'Conférence', '2010-05-17', '2024-05-17', '2010 10th IEEE/ACM International Conference on Cluster, Cloud and Grid Computing', '697-702', 15),
(349, 'Assessing energy efficiency of fault tolerance protocols for HPC systems', 'An exascale machine is expected to be delivered in the time frame 2018-2020. Such a machine will be able to tackle some of the hardest computational problems and to extend our understanding of Nature and the universe. However, to make that a reality, the HPC community has to solve a few important challenges. Resilience will become a prominent problem because an exascale machine will experience frequent failures due to the large amount of components it will encompass. Some form of fault tolerance has to be incorporated in the system to maintain the progress rate of applications as high as possible. In parallel, the system will have to be more careful about power management. There are two dimensions of power. First, in a power-limited environment, all the layers of the system have to adhere to that limitation (including the fault tolerance layer). Second, power will be relevant due to energy consumption …', 'Conférence', '2012-10-24', '2024-05-17', '2012 IEEE 24th International Symposium on Computer Architecture and High Performance Computing', '35-42', 15),
(350, 'Hiding checkpoint overhead in HPC applications with a semi-blocking algorithm', 'The HPC community has seen a steady increase in the number of components in every generation of supercomputers. Assembling a large number of components into a single cluster makes a machine more powerful, but also much more prone to failures. Therefore, fault tolerance has become a major concern in HPC. To deal with node crashes in large systems, checkpoint/restart is by far the preferred method. A typical way to implement checkpoints is by using a blocking algorithm, which suspends the execution of the application while the checkpoint is safely stored. One limitation of the blocking algorithm is that it saturates the network bandwidth at the time of checkpoint. This problem will become even more critical because the projected network bandwidth increase will not match the increase in memory per node. To alleviate this problem, we have developed a semi-blocking checkpoint algorithm that overlaps …', 'Conférence', '2012-09-24', '2024-05-17', '2012 IEEE International Conference on Cluster Computing', '364-372', 15),
(351, 'Using migratable objects to enhance fault tolerance schemes in supercomputers', 'Supercomputers have seen an exponential increase in their size in the last two decades. Such a high growth rate is expected to take us to exascale in the timeframe 2018-2022. But, to bring a productive exascale environment about, it is necessary to focus on several key challenges. One of those challenges is fault tolerance. Machines at extreme scale will experience frequent failures and will require the system to avoid or overcome those failures. Various techniques have recently been developed to tolerate failures. The impact of these techniques and their scalability can be substantially enhanced by a parallel programming model called migratable objects. In this paper, we demonstrate how the migratable-objects model facilitates and improves several fault tolerance approaches. Our experimental results on thousands of cores suggest fault tolerance schemes based on migratable objects have low performance …', 'Revue', '2014-07-23', '2024-05-17', 'IEEE transactions on parallel and distributed systems', '2061-2074', 15),
(352, 'A\'cool\'way of improving the reliability of hpc machines', 'Soaring energy consumption, accompanied by declining reliability, together loom as the biggest hurdles for the next generation of supercomputers. Recent reports have expressed concern that reliability at exascale level could degrade to the point where failures become a norm rather than an exception. HPC researchers are focusing on improving existing fault tolerance protocols to address these concerns. Research on improving hardware reliability, i.e., machine component reliability, has also been making progress independently. In this paper, we try to bridge this gap and explore the potential of combining both software and hardware aspects towards improving reliability of HPC machines. Fault rates are known to double for every 10°C rise in core temperature. We leverage this notion to experimentally demonstrate the potential of restraining core temperatures and load balancing to achieve two-fold benefits …', 'Livre', '2013-11-17', '2024-05-17', 'Proceedings of the International Conference on High Performance Computing, Networking, Storage and Analysis', '1-12', 5),
(353, 'Energy profile of rollback-recovery strategies in high performance computing', 'Extreme-scale computing is set to provide the infrastructure for the advances and breakthroughs that will solve some of the hardest problems in science and engineering. However, resilience and energy concerns loom as two of the major challenges for machines at that scale. The number of components that will be assembled in the supercomputers plays a fundamental role in these challenges. First, a large number of parts will substantially increase the failure rate of the system compared to the failure frequency of current machines. Second, those components have to fit within the power envelope of the installation and keep the energy consumption within operational margins. Extreme-scale machines will have to incorporate fault tolerance mechanisms and honor the energy and power restrictions. Therefore, it is essential to understand how fault tolerance and energy consumption interplay. This paper presents a …', 'Revue', '2014-10-01', '2024-05-17', 'Parallel Computing', '536-547', 44);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(354, 'Power, reliability, and performance: One system to rule them all', 'In a design based on the Charm++ parallel programming framework, an adaptive runtime system dynamically interacts with a datacenter\'s resource manager to control power by intelligently scheduling jobs, reallocating resources, and reconfiguring hardware. It simultaneously manages reliability by cooling the system to the running application\'s optimal level and maintains performance through load balancing.', 'Revue', '2016-10-19', '2024-05-17', 'Computer', '30-37', 15),
(355, 'Communication and topology-aware load balancing in charm++ with treematch', 'Programming multicore or manycore architectures is a hard challenge particularly if one wants to fully take advantage of their computing power. Moreover, a hierarchical topology implies that communication performance is heterogeneous and this characteristic should also be exploited. We developed two load balancers for Charm++ that take into account both aspects, depending on the fact that the application is compute-bound or communication-bound. This work is based on our TREEMATCH library that computes process placement in order to reduce an application communication costs based on the hardware topology. We show that the proposed load-balancing schemes manage to improve the execution times for the two aforementioned classes of parallel applications.', 'Conférence', '2013-09-23', '2024-05-17', '2013 IEEE International Conference on Cluster Computing (CLUSTER)', '1-8', 15),
(356, 'Evaluation of simple causal message logging for large-scale fault tolerant HPC systems', 'The era of petascale computing brought machines with hundreds of thousands of processors. The next generation of exascale supercomputers will make available clusters with millions of processors. In those machines, mean time between failures will range from a few minutes to few tens of minutes, making the crash of a processor the common case, instead of a rarity. Parallel applications running on those large machines will need to simultaneously survive crashes and maintain high productivity. To achieve that, fault tolerance techniques will have to go beyond checkpoint/restart, which requires all processors to roll back in case of a failure. Incorporating some form of message logging will provide a framework where only a subset of processors are rolled back after a crash. In this paper, we discuss why a simple causal message logging protocol seems a promising alternative to provide fault tolerance in large …', 'Conférence', '2011-05-16', '2024-05-17', '2011 IEEE International Symposium on Parallel and Distributed Processing Workshops and Phd Forum', '1533-1540', 15),
(357, 'A study of checkpointing in large scale training of deep neural networks', 'Deep learning (DL) applications are increasingly being deployed on HPC systems, to leverage the massive parallelism and computing power of those systems for DL model training. While significant effort has been put to facilitate distributed training by DL frameworks, fault tolerance has been largely ignored. In this work, we evaluate checkpoint-restart, a common fault tolerance technique in HPC workloads. We perform experiments with three state-of-the-art DL frameworks common in HPC Chainer, PyTorch, and TensorFlow). We evaluate the computational cost of checkpointing, file formats and file sizes, the impact of scale, and deterministic checkpointing. Our evaluation shows some critical differences in checkpoint mechanisms and exposes several bottlenecks in existing checkpointing implementations. We provide discussion points that can aid users in selecting a fault-tolerant framework to use in HPC. We also provide takeaway points that framework developers can use to facilitate better checkpointing of DL workloads in HPC.', 'Revue', '2020-12-01', '2024-05-17', 'arXiv preprint arXiv:2012.00825', '', 5),
(358, 'Scalable replay with partial-order dependencies for message-logging fault tolerance', 'Deterministic replay of a parallel application is commonly used for discovering bugs or to recover from a hard fault with message-logging fault tolerance. For message passing programs, a major source of overhead during forward execution is recording the order in which messages are sent and received. During replay, this ordering must be used to deterministically reproduce the execution. Previous work in replay algorithms often makes minimal assumptions about the programming model and application to maintain generality. However, in many applications, only a partial order must be recorded due to determinism intrinsic in the program, ordering constraints imposed by the execution model, and events that are commutative (their relative execution order during replay does not need to be reproduced exactly). In this paper, we present a novel algebraic framework for reasoning about the minimum dependencies …', 'Conférence', '2014-09-22', '2024-05-17', '2014 IEEE International Conference on Cluster Computing (CLUSTER)', '19-28', 15),
(359, 'A message-logging protocol for multicore systems', 'Although many details of an eventual Exascale machine remain unknown, we can safely make a couple of assumptions. Exascale machines will be composed of multicore nodes and will experience frequent failures. The latter means that effective resilience support is imperative to make Exascale machines usable. The former opens up opportunities for exploring new alternatives to provide resilience support. This paper examines a new fault tolerance protocol for multicore systems. The paper contains three major parts. In the first part, we start by showing evidence that a node (and not a core) is the appropriate unit of failure. When a crash hits a machine, it usually renders unusable a whole node. Rarely, the crash brings down more than one node. The second part describes a message logging protocol that tolerates the failure of whole nodes and uses an efficient shared memory scheme to minimize overhead. We …', 'Conférence', '2012-06-25', '2024-05-17', 'IEEE/IFIP International Conference on Dependable Systems and Networks Workshops (DSN 2012)', '1-6', 15),
(360, 'Analyzing the interplay of failures and workload on a leadership-class supercomputer', 'The unprecedented computational power of current supercomputers now makes possible the exploration of complex problems in many scientific fields, from genomic analysis to computational fluid dynamics. Modern machines are powerful because they are massive: they assemble millions of cores and a huge quantity of disks, cards, routers, and other components. But it is precisely the size of these machines that glooms the future of supercomputing. A system that comprises many components has a high chance to fail, and fail often. In order to make the next generation of supercomputers usable, it is imperative to use some type of fault tolerance platform to run applications on large machines. Most fault tolerance strategies can be optimized for the peculiarities of each system and boost efficacy by keeping the system productive. In this paper, we aim to understand how failure characterization can improve resilience in several layers of the software stack: applications, runtime systems, and job schedulers. We examine the Titan supercomputer, one of the fastest systems in the world. We analyze a full year of Titan in production and distill the failure patterns of the machine. By looking into Titan’s log files and using the criteria of experts, we provide a detailed description of the types of failures. In addition, we inspect the job submission files and describe how the system is used. Using those two sources, we cross correlate failures in the machine to executing jobs and provide a picture of how failures affect the user experience. We believe such characterization is fundamental in developing appropriate fault tolerance solutions for Cray systems similar to …', 'Revue', '2015-01-01', '2024-05-17', 'computing', '4', 5),
(361, 'Dynamic load balance for optimized message logging in fault tolerant hpc applications', 'Computing systems will grow significantly larger in the near future to satisfy the needs of computational scientists in areas like climate modeling, biophysics and cosmology. Supercomputers being installed in the next few years will comprise millions of cores, hundreds of thousands of processor chips and millions of physical components. However, it is expected that failures become more prevalent in those machines to the point where 10% of an Exascale system will be wasted just recovering from failures. Further, with such large numbers of cores, fine-grained and dynamic load balance will become increasingly critical for maintaining good system utilization. This paper addresses both fault tolerance and load balancing by presenting a novel extension of traditional message logging protocols based on team check pointing. Message logging makes it possible to recover from localized failures by rolling back just the …', 'Conférence', '2011-09-26', '2024-05-17', '2011 IEEE International Conference on Cluster Computing', '281-289', 15),
(362, 'Analyzing a five-year failure record of a leadership-class supercomputer', 'Extreme-scale computing systems are required to solve some of the grand challenges in science and technology. From astrophysics to molecular biology, supercomputers are an essential tool to accelerate scientific discovery. However, large computing systems are prone to failures due to their complexity. It is crucial to develop an understanding of how these systems fail to design reliable supercomputing platforms for the future. This paper examines a five-year failure and workload record of a leadership-class supercomputer. To the best of our knowledge, five years represents the vast majority of the lifespan of a supercomputer. This is the first time such analysis is performed on a top 10 modern supercomputer. We performed a failure categorization and found out that: i) most errors are GPU-related, with roughly 37% of them being double-bit errors on the cards; ii) failures are not evenly spread across the physical …', 'Conférence', '2019-10-15', '2024-05-17', '2019 31st International Symposium on Computer Architecture and High Performance Computing (SBAC-PAD)', '196-203', 15),
(363, 'Simulation-based evaluation of school reopening strategies during COVID-19: A case study of São Paulo, Brazil', 'During the coronavirus disease 2019 (COVID-19) pandemic, many countries opted for strict public health measures, including closing schools. After some time, they have started relaxing some of those restrictions. To avoid overwhelming health systems, predictions for the number of new COVID-19 cases need to be considered when choosing a school reopening strategy. Using a computer simulation based on a stochastic compartmental model that includes a heterogeneous and dynamic network, we analyse different strategies to reopen schools in the São Paulo Metropolitan Area, including one similar to the official reopening plan. Our model allows us to describe different types of relations between people, each type with a different infectiousness. Based on our simulations and model assumptions, our results indicate that reopening schools with all students at once has a big impact on the number of new COVID …', 'Revue', '2021-01-01', '2024-05-17', 'Epidemiology & Infection', 'e118', 38),
(364, 'Scalable message-logging techniques for effective fault tolerance in HPC applications', 'An important set of challenges emerge as the High Performance Computing (HPC) community aims to reach extreme scale. Resilience and energy consumption are two of those challenges. Extreme-scale machines are expected to have a high failure frequency. This is an inevitable consequence of the mismatch between two trends. The number of components assembled in supercomputers grows exponentially. However, the improvement on the reliability of each individual component is much slower. At the same time, the vast number of components in a single machine will consume a non-trivial amount of energy. To keep a supercomputer within operational margins, HPC systems have to be both reliable and energy-aware. For an application to be able to run and make progress in spite of constant interruptions, it has to incorporate some fashion of fault tolerance. Rollback-recovery techniques provide a framework …', '', '2013-01-01', '2024-05-17', '', '', 5),
(365, 'Vectors and graphs: Two representations to cluster web sites using hyperstructure', 'Web site clustering consists in finding meaningful groups of related Web sites. How related is some Web site to another is a question that depends on how we represent Web sites. Traditionally, vectors and graphs have been two important structures to represent individuals in a population. Both representations can play an important role in the Web area if hyper structure is considered. By analyzing the way Web sites are linked, we can build vectors or graphs to understand how a Web site collection is partitioned. In this paper, we analyze these two models and four associated algorithms: k-means and self-organizing maps (SOM) with vectors, simulated annealing and genetic algorithms with graphs. For testing these ideas we clustered some Web sites in the Central American Web. We compare the results for clustering this Web site collection using both models and show what kind of clusters each one produces', 'Conférence', '2006-10-25', '2024-05-17', '2006 Fourth Latin American Web Congress', '172-178', 15),
(366, 'Using symbolic objects to cluster web documents', 'Web Clustering is useful for several activities in the WWW, from automatically building web directories to improve retrieval performance. Nevertheless, due to the huge size of the web, a linear mechanism must be employed to cluster web documents. The k-means is one classic algorithm used in this problem. We present a variant of the vector model to be used with the k-means algorithm. Our representation uses symbolic objects for clustering web documents. Some experiments were done with positive results and future work is optimistic.', 'Livre', '2006-05-23', '2024-05-17', 'Proceedings of the 15th international conference on World Wide Web', '967-968', 5),
(367, 'A symbolic representation for distributed web document clustering', 'Web clustering is an important activity to improve many other tasks in the Web, from automatically building web directories to web searching and indexing. However, due to the huge size of the Web, a platform for high performance computing must be used to cluster a really big collection of web documents. In this paper, we propose a new representation to model web documents for distributed clustering. Symbolic objects can address the clustering problem for a distributed environment in a better way. After running a couple of experiments, we show how symbolic objects can outperform a classic representation when comparing the clustering accuracy.', 'Revue', '2006-01-01', '2024-05-17', 'the Proceedings of Fourth Latin American Web Congress, Cholula, Mexico', '', 5),
(368, 'Convergence through a weak consistency model: Timed causal consistency', 'Given a distributed system with several shared objects and many processes concurrently updating and reading them, it is convenient that the system achieves convergence on the value of these objects. Such property can be guaranteed depending on the consistency model being employed. Causal Consistency is a weak consistency model that is easy and cheap to implement. However, due to the lack of real-time considerations, this model cannot offer convergence. A solution for overcoming that problem is to include time aspects within the framework of the model. This is the aim of Timed Causal Consistency.', 'Revue', '2005-12-02', '2024-05-17', 'CLEI electronic journal', '108', 5),
(369, 'The Charm++ parallel programming system', '', '', '2019-08-01', '2024-05-17', '', '35-71', 58),
(370, 'BS-SOLCTRA: Towards a parallel magnetic plasma confinement simulation framework for modular stellarator devices', ' Hand in hand, computer simulations and High Performance Computing are catalyzing advances in experimental and theoretical fusion physics and the design and construction of new confinement devices that are spearheading the quest for alternative energy sources. This paper presents the Biot-Savart Solver for Computing and Tracing Magnetic Field Lines (BS-SOLCTRA), a field line tracing code developed during the first Stellarator of Costa Rica (SCR-1) campaign. We present the process towards turning BS-SOLCTRA into a full parallel simulation framework for stellarator devices. Message passing, shared-memory programming, and vectorization form the underlying parallel infrastructure and provide scalable execution. The implemented parallel simulator led to a 1, 550X speedup when compared to the original sequential version. We also present the new powerful scientific visualization capabilities …', 'Conférence', '2020-01-01', '2024-05-17', 'High Performance Computing: 6th Latin American Conference, CARLA 2019, Turrialba, Costa Rica, September 25–27, 2019, Revised Selected Papers 6', '33-48', 19),
(371, 'Camel: collective-aware message logging', ' The continuous progress in the performance of supercomputers has made possible the understanding of many fundamental problems in science. Simulation, the third scientific pillar, constantly demands more powerful machines to use algorithms that would otherwise be unviable. That will inevitably lead to the deployment of an exascale machine during the next decade. However, fault tolerance is a major challenge that has to be overcome to make such a machine usable. With an unprecedented number of parts, machines at extreme scale will have a small mean-time-between-failures. The popular checkpoint/restart mechanism used in today’s machines may not be effective at that scale. One promising way to revamp checkpoint/restart is to use message-logging techniques. By storing messages during execution and replaying them in case of a failure, message logging is able to shorten recovery time and …', 'Revue', '2015-07-01', '2024-05-17', 'The Journal of Supercomputing', '2516-2538', 18),
(372, 'Parallel computing for processing data from intelligent transportation systems', ' This article describes the application of parallel computing techniques for efficiently processing large volumes of data from ITS. This is a relevant problem in nowadays societies, especially when working under the novel paradigm of smart cities. The proposed approach applies parallel multithreading computing for processing Global Positioning System records for a case study on the Intelligent Transportation System in Montevideo, Uruguay. The experimental analysis is performed on a high performance computing platform, considering a large volume of data and different computing resources. The main results indicate that the proposed approach allows achieving good speedup values, thus reducing the execution time to process more than 120 GB of data from 921 to 77 min, when using 32 threads. In addition, a web application to illustrate the results of the proposed approach for computing the average speed of …', 'Conférence', '2019-01-01', '2024-05-17', 'Supercomputing: 10th International Conference on Supercomputing in Mexico, ISUM 2019, Monterrey, Mexico, March 25–29, 2019, Revised Selected Papers 10', '266-281', 19),
(373, 'Comparative analysis of de bruijn graph parallel genome assemblers', 'Finding the genome of new species remains as one of the most crucial tasks in molecular biology. To achieve that end,  de novo  sequence assembly feeds from the vast amount of data provided by Next-Generation Sequencing technology. Therefore, genome assemblers demand a high amount of computational resources, and parallel implementations of those assemblers are readily available. This paper presents a comparison of three well-known de novo genome assemblers: Velvet, ABySS and SOAPdenovo, all of them using de Bruijn graphs and having a parallel implementation. We based our analysis on parallel execution time, scalability, quality of assembly, and sensitivity to the choice of a critical parameter ( k -mer size). We found one of the tools clearly stands out for providing faster execution time and better quality in the output. Also, all assemblers are mildly sensitive to the choice of k-mer size and they …', 'Conférence', '2018-07-18', '2024-05-17', '2018 IEEE International Work Conference on Bioinspired Intelligence (IWOBI)', '1-8', 15),
(374, 'Programaçao paralela em charm++', '', 'Revue', '2015-01-01', '2024-05-17', 'ERAD/RS, Gramado, RS, Brasil', '', 5),
(375, 'Design and analysis of a message logging protocol for fault tolerant multicore systems', 'A look at Exascale reveals a future with multicore supercomputers that will inexorably experience frequent failures. Providing scalable and efficient fault tolerance support is one of the major concerns to pave the road for the next generation of machines. Checkpoint/restart remains as the standard de facto approach to provide fault tolerance in supercomputers. However, its high recovery cost has brought the attention of the community to an alternative mechanism, message logging. In this paper we present the design of a message logging protocol that targets multicore machines based on two fundamental assumptions. First, a multicore node is the minimum unit of failure and very frequently only one node goes down per failure. Second, the shared memory is a key resource to bring down the overhead of message logging. This paper also presents an analysis of failure data from recent supercomputers that show that most of the time a failure involves one single computational node. We offer two different distributions to model the data. Using those distributions we build a model for the survivability of the message logging protocol to multiple concurrent failures. We demonstrate our technique has a low overhead. The results of an experiment with a stencil program show the execution time penalty is below 5% when the program scales up to 1024 cores. Moreover, even when the protocol was designed to tolerate one single failure at a time, it provides a high probability of survival to a failure involving any number of nodes. Using real-world data from recent supercomputers we demonstrate the chances of survive any failure are higher than 99%.', 'Revue', '2011-07-01', '2024-05-17', 'Parallel Programming Laboratory, Department of Computer Science, University of Illinois at Urbana-Champaign, Tech. Rep', '11-30', 5),
(376, 'Clustering Parallel Applications to Enhance Message Logging Protocols', 'Esteban Meneses Page 1 Clustering Parallel Applications to Enhance Message Logging \nProtocols Esteban Meneses Monday, November 22, 2010 Page 2 4th Workshop INRIA-Illinois \nJoint Laboratory on Petascale Computing Jaguar is the top 2 supercomputer in the world with \n224,162 cores... During 537 days (Aug-22-2008 to Feb-10-2010) 2.33 failures per day \nSequoia will have 1.6 million cores and an exascale machine around 100 million cores... We \nwill see failures all the time Monday, November 22, 2010 Page 3 4th Workshop INRIA-Illinois \nJoint Laboratory on Petascale Computing Agenda ✦ Clusters and Message Logging. ✦ Static \nClustering (MPI). ✦ Dynamic Clustering (Charm++). ✦ Future Work. Monday, November 22, \n2010 Page 4 4th Workshop INRIA-Illinois Joint Laboratory on Petascale Computing Message \nLogging ✦ Every message sent may be logged. ✦ Advantage: only the failed rank is rolled back…', '', '0000-00-00', '2024-05-17', '', '', 5),
(377, 'Understanding soft error sensitivity of deep learning models and frameworks through checkpoint alteration', 'The convergence of artificial intelligence, high-performance computing (HPC), and data science brings unique opportunities for marked advance discoveries and that leverage synergies across scientific domains. Recently, deep learning (DL) models have been successfully applied to a wide spectrum of fields, from social network analysis to climate modeling. Such advances greatly benefit from already available HPC infrastructure, mainly GPU-enabled supercomputers. However, those powerful computing systems are exposed to failures, particularly silent data corruption (SDC) in which bit-flips occur without the program crashing. Consequently, exploring the impact of SDCs in DL models is vital for maintaining progress in many scientific domains. This paper uses a distinctive methodology to inject faults into training phases of DL models. We use checkpoint file alteration to study the effect of having bit-flips in …', 'Conférence', '2021-09-07', '2024-05-17', '2021 IEEE International Conference on Cluster Computing (CLUSTER)', '492-503', 15),
(378, 'Hierarchical load balancing for large scale supercomputers', '', 'Revue', '2010-09-01', '2024-05-17', 'Third International Workshop on Parallel Programming Models and Systems Software for High-End Computing (P2S2)', '', 5),
(379, 'Seismicity during the recent activity (2009–2020) of Turrialba volcano, Costa Rica', 'Turrialba is a stratovolcano located at the easternmost part of the Costa Rican volcanic front. After remaining quiescent for more than a century, in 1996 it started to show signs of unrest, until a first phreatomagmatic explosion occurred on January, 2010. Since then, the activity evolved from phreatic to magmatic, in a series of distinct eruptive phases. In this paper, we investigate the seismic records that span the whole eruptive process (2010-present), in order to identify precursory signals and characterize the volcanic evolution. A long-term analysis was carried out based on the continuous records, as well as seismic catalogs (volcano-tectonic seismicity, harmonic tremor, etc.). In addition, the gradual character of the evolution of this eruption allowed for the analysis of independent precursory stages. Thus, we inspected in detail the most important of those periods, particularly, prior to the first 2010 phreatomagmatic …', 'Revue', '2022-11-01', '2024-05-17', 'Journal of Volcanology and Geothermal Research', '107651', 35),
(380, 'Parallelization of a denoising algorithm for tonal bioacoustic signals using openacc directives', 'Automatic segmentation and classification methods for bioacoustic signals enable real-time monitoring, population estimation, as well as other important tasks for the conservation, management, and study of wildlife. These methods normally require a filter or a denoising strategy to enhance relevant information in the input signal and avoid false positive detections. This denoising stage is usually the performance bottleneck of such methods. In this paper, we parallelize a denoising algorithm for tonal bioacoustic signals using mainly OpenACC directives. The implemented program was executed in both multicore and GPU architectures. The proposed parallelized algorithm achieves a higher speedup on GPU than CPU, leading to a 10.67 speedup compared to the original sequential algorithm in C++.', 'Conférence', '2018-07-18', '2024-05-17', '2018 IEEE International Work Conference on Bioinspired Intelligence (IWOBI)', '1-8', 15),
(381, 'A draft genome assembly of “Cas” (Psidium friedrichsthalianum (O. Berg) Nied.): an indigenous crop of Costa Rica untapped', ' Psidium friedrichsthalianum (O. Berg) Nied. is a tropical tree species in the Myrtaceae family, natively distributed from southern Mexico to eastern Venezuela and Ecuador and commonly known as \"Cas\'\', \"Costa Rican guava\" or “Sour Guava”. The “Cas” produces a fruit with a rather distinctive acidic flavor and has bioactive compounds with biological potential equal or greater than common Guava; is considered an indigenous crop in Costa Rica with characteristics as a functional food untapped. This species has not been completely domesticated, and can be found in home gardens, paddocks, small groups, and, more recently, in small and medium sized plantations. Also, the plantations of this species do not have technical and scientific support or agronomic promotion from industry, nor are there genetic resources or germplasm readily available to farmers. This limits its commercial development and the …', 'Revue', '2022-01-01', '2024-05-17', 'Genetic Resources and Crop Evolution', '39-47', 59),
(382, 'Using Parallel Computing for Seismo-Volcanic Event Location based on Seismic Amplitudes', 'Volcanoes are very complex geophysical systems where fluids of different nature interact with porous rock at different physical conditions and within a complex matrix of conduits. Two types of seismicity are generated by this complex interactions. The first type is characterized by fracture of the elastic media, in which we have the volcano-tectonic events (VT) that produce two distinctive phases: a compressional phase (P wave) and a shear wave (S wave) that travels with different velocities within solid media. The second type is characterized by low frequencies, in which we have a wide variety of long period events (LP) and volcanic tremors. These signals are produced by fluid motion within restricted paths and have normally emergent onsets and no distinctive P or S wave phases. Classical earthquake source location procedures take advantage of the distinctive phases and their different propagation velocity …', 'Conférence', '2018-11-07', '2024-05-17', '2018 IEEE 38th Central America and Panama Convention (CONCAPAN XXXVIII)', '1-6', 15),
(383, 'Algunas Propiedades Interesantes de los Relojes Vectoriales', 'RESUMEN Los Relojes Vectoriales logran capturar con precisión las relaciones causales en un Sistema Distribuido con N sitios. Sin embargo, muchas otras conclusiones pueden obtenerse al estudiar estas etiquetas de tiempo asociadas a diversos eventos. Este artículo muestra algunas propiedades interesantes de estos vectores. Por ejemplo, mediante el análisis del máximo entre dos relojes vectoriales asociados a eventos en una historia distribuida, se puede determinar que ciertos valores vectoriales nunca serán etiquetas de tiempo en esa misma historia distribuida. El producto punto permite establecer una separación en la red de sitios de dos conjuntos que no tuvieron comunicación por un lapso de tiempo. La longitud y otras propiedades geométricas pueden interpretarse para ser utilizadas en algunas aplicaciones.', 'Revue', '2003-01-01', '2024-05-17', 'Proceedings of Jornadas Chilenas de Computación', '', 5),
(384, 'Large-scale distributed deep learning: A study of mechanisms and trade-offs with pytorch', 'Artificial intelligence is a transforming technology for creating new scientific discoveries, services, and products. Its full potential is achieved when massive data repositories and large-scale computing systems are available. Both factors are becoming easier to obtain daily as sensor networks constantly create open-data archives, and Moore’s law still makes supercomputing power more accessible. However, as deep learning models become larger to tackle data complexity, researchers must determine how to speed up training in those models. This paper uses an experimental approach to try to understand the algorithms and trade-offs associated with distributed deep learning. This study used the Summit supercomputer at Oak Ridge National Laboratory to determine that existing distributed deep learning mechanisms scale in execution time. However, as more nodes are used, accuracy degrades significantly. To …', 'Livre', '2021-10-06', '2024-05-17', 'Latin American High Performance Computing Conference', '177-192', 19),
(385, 'Progress on the small modular stellarator SCR-1: new diagnostics and heating scenarios', 'This work presents updates in the diagnostics systems, magnetohydrodynamics (MHD) calculations and simulations of microwave heating scenarios of the small modular Stellarator of Costa Rica 1 (SCR-1). Similarly, the design of a flexible bolometer and magnetic diagnostics (a set of Mirnov coils, Rogowski coils and two diamagnetic loops) are introduced. Furthermore, new MHD equilibrium calculations for the plasma of the SCR-1 device were performed using the VMEC code including the poloidal cross-section of the magnetic flux surfaces at different toroidal positions, profiles of the rotational transform, magnetic well, magnetic shear and total magnetic field norm. Charged particle orbits in vacuum magnetic field were computed by the magnetic field solver BS-SOLCTRA (Vargas et al. In 27th IAEA Fusion Energy Conference (FEC 2018), 2018. IAEA). A visualization framework was implemented using Paraview …', 'Revue', '2020-08-01', '2024-05-17', 'Journal of Plasma Physics', '815860401', 38),
(386, 'Analyzing convergence in consistency models for distributed objects', ' At instant t, two or more sites could perceive different values for the same distributed object X. However, depending on the consistency protocol used, it might be expected that, after a while, every site in the system should see the same value for this object. In this paper, we present a formalization of the concept of convergence and analyze its relationships with several consistency models. Among other things, we claim that, by itself, sequential consistency is not a convergent protocol.', 'Conférence', '2005-01-01', '2024-05-17', 'Principles of Distributed Systems: 8th International Conference, OPODIS 2004, Grenoble, France, December 15-17, 2004, Revised Selected Papers 8', '346-356', 16),
(387, 'Possible and Impossible Vector Clock Sets.', 'It is well known that vector clocks capture perfectly the causality relationship among events in a distributed system. However, there are some interesting properties of vector clocks that are still to be explored. In particular, we are interested in discovering whether there is an efficient procedure for deciding if a given set of vector clocks is contained in some distributed history. We call this the possible vector clock set problem.', 'Conférence', '2004-06-01', '2024-05-17', 'PDPTA', '1416-1422', 5),
(388, 'Survey of Large-scale Database Systems', '', 'Revue', '0000-00-00', '2024-05-17', 'Online] https://wiki. engr. illinois. edu/download/attach ments/197298696/survey. pdf', '', 5),
(389, 'OKSP: a novel deep learning automatic event detection pipeline for seismic monitoring in Costa Rica', 'Small magnitude earthquakes are the most abundant but the most difficult to locate robustly and well due to their low amplitudes and high frequencies usually obscured by heterogeneous noise sources. They highlight crucial information about the stress state and the spatio-temporal behavior of fault systems during the earthquake cycle, therefore, its full characterization is then crucial for improving earthquake hazard assessment. Modern deep learning algorithms along with the increasing computational power and efficiency are exploiting the continuously growing seismological databases, worldwide, allowing scientists to improve the completeness for earthquake catalogs, systematically detecting and locating smaller magnitude earthquakes and reducing the errors introduced mainly by human intervention through traditional approaches in seismological observatories. In this work, we introduce OKSP, a novel deep …', 'Conférence', '2021-11-04', '2024-05-17', '2021 IEEE 3rd International Conference on BioInspired Processing (BIP)', '1-6', 15),
(390, 'Predictive Power Consumption Model for Compute Intensive Applications in Clustered ARM A53 Embedded Systems', 'High power consumption has been a concern in x86 architectures. In this same line, alternatives to x86 have been explored in order to have similar or higher ratio of computing capabilities with less power consumption. In order to find a power and cost efficient alternative for supercomputer architectures this paper explores the implementation of a low power ARM cluster based on embedded systems and analyses the cluster power consumption while running MiniMD, a compute intensive molecular dynamics workload. Based on MiniMD data, it is presented a predictive power consumption model for compute intensive applications with a 5% correlation error from real power measurements. The model also correlates within 3% error against Linpack measurements. Linpack is the compute intensive benchmark responsible for the \"Top 500 supercomputers\" ranking. Finally, by using the created model, power …', 'Conférence', '2020-02-25', '2024-05-17', '2020 IEEE 11th Latin American Symposium on Circuits & Systems (LASCAS)', '1-4', 15),
(391, 'Evaluando la resiliencia de modelos de deep learning', 'Los modelos de Aprendizaje Profundo se han convertido en una valiosa herramienta para resolver problemas complejos en muchas áreas críticas. Es importante proveer confiabilidad en las salidas de la ejecución de estos modelos, aún si se producen fallos durante la ejecución. En este artículo presentamos la evaluación de la confiabilidad de tres modelos de aprendizaje profundo. Usamos un conjunto de datos de ImageNet y desarrollamos un inyector de fallos para realizar las pruebas. Los resultados muestran que entre los modelos hay una diferencia en la sensibilidad a los fallos. Además, hay modelos que a pesar del incremento en la tasa de fallos pueden mantener bajos los valores de error.', 'Revue', '2020-01-01', '2024-05-17', 'Tecnología en Marcha', '25-30', 60),
(392, 'Modelling road saturation dynamics on a complex transportation network based on GPS navigation software data', ' High traffic concentration during weekdays in the Great Metropolitan Area of Costa Rica causes severe traffic congestion and high costs for the population. It is crucial to deeply understand the dynamics of traffic congestion to design and implement long term solutions. Given the lack of official data to study traffic congestion, we model it using a transportation network based on data captured throughout the year 2018 by a GPS navigation software application (Waze), provided by the Ministry of Public Works and Transportation (MOPT in Spanish). In this paper, we focus on the data transformation procedure to create the transportation network and propose a traffic congestion classification with the available data. We developed a practical methodology which consists of four main stages: data preparation, road network modelling, road saturation estimation, and saturation dynamics analysis. The results show it is …', 'Conférence', '2020-01-01', '2024-05-17', 'High Performance Computing: 6th Latin American Conference, CARLA 2019, Turrialba, Costa Rica, September 25–27, 2019, Revised Selected Papers 6', '136-149', 19),
(393, 'Analyzing Communication Features and Community Structure of HPC Applications', ' A few exascale machines are scheduled to become operational in the next couple of years. Reaching such achievement required the HPC community to overcome obstacles in programmability, power management, memory hierarchy, and reliability. Similar challenges are to be faced in the pursuit of greater performance gains. In particular, design of interconnects stands out as a major hurdle. Computer networks for extreme-scale system will need a deeper understanding of the communication characteristics of applications that will run on those systems. We analyzed a set of nine representative HPC applications and created a catalog of well-defined communication patterns that constitute building blocks for modern scientific codes. Furthermore, we found little difference between popular community-detection algorithms, which tend to form few but relatively big communities.', 'Conférence', '2019-01-01', '2024-05-17', 'High Performance Computing: 5th Latin American Conference, CARLA 2018, Bucaramanga, Colombia, September 26–28, 2018, Revised Selected Papers 5', '239-254', 19),
(394, 'Conversion of electrostatic Bernstein waves in the SCR-1 stellarator using a full wave code', 'The small modular SCR-1 Stellarator (R= 247.7 mm, R/a= 6.2, ιa= 0.264) has an ECRH system of 2.45 GHz (5 kW) with an average magnetic field of 41.99 mT. This work presents the results of converting electrostatic Bernstein waves in the SCR-1 Stellarator using the full wave code IPF-FDMC, taking the 3D magnetic field obtained by VMEC code as input. New microwave heating scenarios that take the SCR-1\'s vacuum vessel into account in order to improve the OX conversion due to reflection of the incoming radiation from the ECRH system are presented. The percentage of single pass OX mode conversion is nearly 10% to 12%. Other important aspects of the work are focused on the BS-SOLCTRA (Biot-Savart Solver for Compute and Trace Magnetic Fields) code, developed by our research group, and its way to convert it into a parallel and high-performance computing platform. This code allows calculations of the 3D vacuum magnetic field and the visualization of the magnetic flux surfaces at SCR-1. Similarly, the results of the comparison of the flux surfaces measured with an electron beam and different kinds of fluorescent rods with computed flux surfaces by means of the BS-SOLCTRA code are shown. Finally, magnetic and energy diagnostics have been developed with special requirements based on the SCR-1 geometry so the design, data analysis tools and measurement technique are introduced.', 'Revue', '2018-01-01', '2024-05-17', '27th IAEA Fusion Energy Conference (FEC 2018). IAEA', '', 5),
(395, 'From knights corner to landing: A case study based on a hodgkin-huxley neuron simulator', ' Brain modeling has been presenting significant challenges to the world of high-performance computing (HPC) over the years. The field of computational neuroscience has been developing a demand for physiologically plausible neuron models, that feature increased complexity and thus, require greater computational power. We explore Intel’s newest generation of Xeon Phi computing platforms, named Knights Landing (KNL), as a way to match the need for processing power and as an upgrade over the previous generation of Xeon Phi models, the Knights Corner (KNC). Our neuron simulator of choice features a Hodgkin-Huxley-based (HH) model which has been ported on both generations of Xeon Phi platforms and aggressively draws on both platforms’ computational assets. The application uses the OpenMP interface for efficient parallelization and the Xeon Phi’s vectorization buffers for Single-Instruction …', 'Livre', '2017-06-18', '2024-05-17', 'International Conference on High Performance Computing', '363-375', 19),
(396, 'A fault-tolerance protocol for parallel applications with communication imbalance', 'The predicted failure rates of future supercomputers loom the groundbreaking research large machines are expected to foster. Therefore, resilient extreme-scale applications are an absolute necessity to effectively use the new generation of supercomputers. Rollback-recovery techniques have been traditionally used in HPC to provide resilience. Among those techniques, message logging provides the appealing features of saving energy, accelerating recovery, and having low performance penalty. Its increased memory consumption is, however, an important downside. This paper introduces memory-constrained message logging (MCML), a general framework for decreasing the memory footprint of message-logging protocols. In particular, we demonstrate the effectiveness of MCML in maintaining message logging feasible for applications with substantial communication imbalance. This type of applications appear …', 'Conférence', '2015-10-17', '2024-05-17', '2015 27th International Symposium on Computer Architecture and High Performance Computing (SBAC-PAD)', '162-169', 15),
(397, 'Measuring contribution of HTML features in web document clustering', 'Documents in HTML format have many features to analyze, from the terms in special sections to the phrases that appear in the whole document. However, it is important to decide which feature contributes the most to separate documents according to classes. Given this information, it is possible not to include certain feature in the representation for the document, given that it is expensive to compute and doesn’t contribute enough in the clustering process. By using a novel representation model and the standard k-means algorithm, we discovered that terms in the body of document contributes the most, followed by terms in other sections. Suffix tree provides poor contribution in that scenario, while term order graphs influence a little the partition. We used 4 known datasets to support the conclusions.', 'Revue', '2008-01-01', '2024-05-17', 'CLEI Electronic Journal', '7', 5),
(398, 'Effective representations for web document clustering', 'No problem is too small or too trivial if we can really do something about it.', 'Revue', '2007-01-01', '2024-05-17', 'Master\'s thesis, Instituto Tecnologico de Costa Rica', '', 5),
(399, 'Time and Order Considerations in Consistency Models for Web Caching.', 'Consistency is a necessary consideration when dealing with web caching. Although this technique accelerates the web experience for the user, it must provide consistency, ie, the objects in the cache must be fresh and all the relationships among them must be valid. Both problems have been addressed by several web caching strategies ([4],[5],[7],[9],[12],[18],[23],[25],[26]). However, their formal properties are not completely understood, because practical issues frequently overcome theoretical ones in the web community. In order to offer an environment where formal characteristics can be proved, it is necessary to consider two dimensions in consistency: time and order [2]. These two facets permit an understanding of how fast the changes made in some object are updated in its copies, and what order relationships exist in the events of the system. This paper aims to present both consistency dimensions in order to clarify, analyze and prove, in a formal fashion, properties of web caching consistency models.', 'Conférence', '2005-01-01', '2024-05-17', 'PDPTA', '761-767', 5),
(400, 'A Large-Scale Epidemic Simulation Framework for Realistic Social Contact Networks', 'Global pandemics can wreak havoc and lead to significant social, economic, and personal losses. Preventing the spread of infectious diseases requires implementing interventions at different levels of government, and evaluating the potential impact and efficacy of those preemptive measures. Agent-based modeling can be used for detailed studies of epidemic diffusion and possible interventions. We present Loimos, a highly parallel simulation of epidemic diffusion written on top of Charm++, an asynchronous task-based parallel runtime. Loimos uses a hybrid of time-stepping and discrete-event simulation to model disease spread. We demonstrate that our implementation of Loimos is able to scale to large core counts on an HPC system. In particular, Loimos is able to simulate a US-scale synthetic interaction network in an average of 1.497 seconds per simulation day when executed on 16 nodes on Rivanna at the University of Virginia, processing around 428 billion interactions (person-person edges) in under five minutes for an average of 1.4 billion traversed edges per second (TEPS).', 'Revue', '2024-01-16', '2024-05-17', 'arXiv preprint arXiv:2401.08124', '', 5),
(401, 'Exploring the effects of silent data corruption in distributed deep learning training', 'The profound impact of recent developments in artificial intelligence is unquestionable. The applications of deep learning models are everywhere, from advanced natural language processing to highly accurate prediction of extreme weather. Those models have been continuously increasing in complexity, becoming much more powerful than their original versions. In addition, data to train the models is becoming more available as technological infrastructures sense and collect more readings. Consequently, distributed deep learning training is often times necessary to handle intricate models and massive datasets. Running a distributed training strategy on a supercomputer exposes the models to all the considerations of a large-scale machine; reliability is one of them. As supercomputers integrate a colossal number of components, each fabricated on an ever decreasing feature-size, faults are common during …', 'Conférence', '2022-11-02', '2024-05-17', '2022 IEEE 34th International Symposium on Computer Architecture and High Performance Computing (SBAC-PAD)', '21-30', 15),
(402, 'Implementing a GPU-Portable Field Line Tracing Application with OpenMP Offload', 'Accelerated computing is becoming more diverse as new vendors and architectures come into play. Although platform-specific programming models promise ease of development and better control over performance, they still restrict the portability of scientific applications. As the OpenMP offloading specification becomes adopted by more compilers, this programming model stands out as a vendor-neutral portable approach to heterogeneous programming. In this study, we port a plasma physics oriented field line tracing code from a CPU-based MPI+OpenMP approach to a GPU accelerated version, using OpenMP’s offloading capabilities. We analyze GPU performance across different vendors with respect to the original CPU version and test both prescriptive and descriptive approaches to accelerator programming. A maximum \\documentclass[12pt]{minimal}     \\usepackage{amsmath}     \\usepackage{wasysym …', 'Livre', '2022-09-26', '2024-05-17', 'Latin American High Performance Computing Conference', '31-46', 19);
INSERT INTO `2025_publications` (`id`, `title`, `description`, `type`, `publication_date`, `update_date`, `title_type`, `pages`, `id_editor`) VALUES
(403, 'A Comparative Evaluation of Parallel Programming Python Tools for Particle-in-Cell on Symmetric Multiprocessors', 'The Python programming language has established itself as a popular alternative for implementing scientific computing workflows. Its massive adoption across a wide spectrum of disciplines has created a strong community that develops tools for solving complex problems in science and engineering. In particular, there are several parallel programming libraries for Python codes that target multicore processors. We aim at comparing the performance and scalability of a subset of three popular libraries (Multiprocessing, PyMP, and Torcpy). We use the Particle-in-cell (PIC) method as a benchmark. This method is an attractive option for understanding physical phenomena, specially in plasma physics. A pre-existing PIC code implementation was modified to integrate Multiprocessing, PyMP, and Torcpy. The three tools were tested on a manycore and on a multicore processor by running different problem sizes. The …', 'Livre', '2022-09-26', '2024-05-17', 'Latin American High Performance Computing Conference', '1-15', 19),
(404, 'Calibration of Traffic Simulations Using Simulated Annealing and GPS Navigation Records', 'A traffic simulation tool provides a virtual environment to efficiently analyze current traffic conditions and quickly measure the impact of changes to either transport infrastructure or driving rules. Realizing the full potential of traffic simulations depends on correct parameter setting. In this work, we propose a method to calibrate traffic simulations using available transportation data from Costa Rica. The data comes from Global Position System (GPS) navigation records that only show the traffic speed in different sectors. The calibration algorithm aims to solve the inverse problem of finding the actual traffic flows in all routes to accurately reproduce real traffic conditions. We managed to calibrate the simulations for four case studies and leveraged our program to design solutions that ease traffic conditions in those scenarios. The impact and applications of this work are plenty. First, additional calibration techniques can be …', 'Livre', '2021-12-01', '2024-05-17', 'Annual International Conference on Information Management and Big Data', '17-33', 19),
(405, 'Understanding COVID-19 Epidemic in Costa Rica Through Network-Based Modeling', 'As a result of the critical health situation caused by COVID-19, governments and researchers have acknowledged the significance of epidemic models for understanding a transmissible disease and assessing public policies, in order to determine which ones are truly effective in mitigating its propagation. We apply a modified SEIR model to characterize the behavior of the COVID-19 epidemic in the context of Costa Rica, employing a contact network to simulate the social connections among the inhabitants. Then, we use this model to weigh up the impact of important sanitary restrictions by simulating different scenarios associated to vaccination, authorization for organizing social events, and reopening of the school system. Our validation tests show that the obtained model is precise. In the scenario evaluation, simulations estimate that a constant vaccination reduces the reported cases by 45% and deaths by 42% in …', 'Livre', '2021-10-06', '2024-05-17', 'Latin American High Performance Computing Conference', '61-75', 19),
(406, 'Understanding failures through the lifetime of a top-level supercomputer', 'High performance computing systems are required to solve grand challenges in many scientific disciplines. These systems assemble many components to be powerful enough for solving extremely complex problems. An inherent consequence is the intricacy of the interaction of all those components, especially when failures come into the picture. It is crucial to develop an understanding of how these systems fail to design reliable supercomputing platforms in the future. This paper presents the results on studying multi-year failure and workload records of a powerful supercomputer that topped the world rankings. We provide a thorough analysis of the data and characterize the reliability of the system through several dimensions: failure classification, failure-rate modelling, and interplay between failures and workload. The results shed some light on the dynamics of top-level supercomputers and sensitive areas ripe for …', 'Revue', '2021-08-01', '2024-05-17', 'Journal of Parallel and Distributed Computing', '27-41', 42),
(407, 'Adaptive plasma physics simulations: Dealing with load imbalance using charm++', ' High Performance Computing (HPC) is nearing the exascale era and several challenges have to be addressed in terms of application development. Future parallel programming models should not only help developers take full advantage of the underlying machine but they should also account for highly dynamic runtime conditions, including frequent hardware failures. In this paper, we analyze the porting process of a plasma confinement simulator from a traditional MPI+OpenMP approach to a parallel objects based model like Charm++. The main driver for this effort is the existence of load imbalanced input scenarios that pure OpenMP scheduling can not solve. By using Charm++ adaptive runtime and integrated balancing strategies, we were able to increase total CPU usage from 45.2% to 80.2%, achieving a 1.64 × acceleration, after load balancing, over the MPI+OpenMP implementation on a specific input …', 'Livre', '2021-07-17', '2024-05-17', 'Practice and Experience in Advanced Research Computing', '1-8', 5),
(408, 'Towards photorealistic visualizations for plasma confinement simulations', ' As the world moves away from traditional energy sources, based on fossil fuels, one promising clean alternative source is nuclear fusion. To accelerate the required breakthroughs in that community, numerical simulations and scientific visualizations over high-performance computing systems are mandatory. The proper display of data resulting from the simulation is key to the design, tune-up, and dissemination of nuclear fusion reactors. We present a computer-graphics model that uses the output of numerical simulations to create visually plausible images of plasma confinement. The model is based on a combination of computer graphics techniques implemented on a ray-tracing framework.', 'Livre', '2021-07-17', '2024-05-17', 'Practice and Experience in Advanced Research Computing', '1-4', 5),
(409, 'The impact of school reopening strategies during COVID-19: A case study of Sao Paulo, Brazil', 'During the COVID-19 pandemic, many countries opted for strict public health measures, including closing schools. They have now started relaxing some of those restrictions. To avoid overwhelming health systems, predictions for the number of new COVID-19 cases need to be considered when choosing a school reopening strategy. Using computer simulation, we analyze different strategies to reopen schools in the Sao Paulo Metropolitan Area, including the official reopening plan. Our results indicate that reopening schools with all students at once has a big impact on the number of new COVID-19 cases, which could cause a collapse of the health system. On the other hand, a controlled school reopening avoids the collapse of the health system, with a maximum ICU occupancy between 48.8% and 97.8%, depending on how people attending school follow sanitary measures. Postponing the schools\' return date for after a vaccine becomes available can save up to 37,753 lives just in the Sao Paulo Metropolitan Area.', 'Revue', '2020-10-13', '2024-05-17', 'arXiv preprint arXiv:2010.08426', '', 5),
(410, 'Towards a model to estimate the reliability of large-scale hybrid supercomputers', ' Supercomputers stand as a fundamental tool for developing our understanding of the universe. State-of-the-art scientific simulations, big data analyses, and machine learning executions require high performance computing platforms. Such infrastructures have been growing lately with the addition of thousands of newly designed components, calling their resiliency into question. It is crucial to solidify our knowledge on the way supercomputers fail. Other recent studies have highlighted the importance of characterizing failures on supercomputers. This paper aims at modelling component failures of a supercomputer based on Mixed Weibull distributions. The model is built using a real-life multi-year failure record from a leadership-class supercomputer. Using several key observations from the data, we designed an analytical model that is robust enough to represent each of the main components of …', 'Conférence', '2020-01-01', '2024-05-17', 'Euro-Par 2020: Parallel Processing: 26th International Conference on Parallel and Distributed Computing, Warsaw, Poland, August 24–28, 2020, Proceedings 26', '37-51', 19),
(411, 'Parallelization of a magnetohydrodynamics model for plasma simulation', 'Plasma simulations are inherently complex due to the numerous and intricate processes that naturally occur to matter in this state. Computer simulations and visualizations of plasma help researchers and scientists understand the physics that takes place in it. We have developed a parallel implementation of an application used to simulate and visualize the process of convection in plasma cells. This application implements a magnetohydrodynamics (MHD) approach to plasma modeling by numerically solving a fourth-order two-dimensional differential scheme. Results of experimentation with our parallel implementation are presented and analyzed. We managed to speedup the program by a factor of nearly 42× after parallelizing the code with OpenMP and using 128 cores on our Intel Xeon Phi KNL server. We also achieved an almost linear scalability of the execution time when increasing the size of the spatial and …', 'Conférence', '2018-11-07', '2024-05-17', '2018 IEEE 38th Central America and Panama Convention (CONCAPAN XXXVIII)', '1-6', 15),
(412, 'Algorithm for history reconstruction of viral recombination events: preliminary results', 'An accurate understanding of the evolutionary history of virus species could help in the development of prevention measures or new treatments. Most current tools offer phylogenetic analysis focused on mutations as the main evolutionary mechanism and ignore inconsistencies caused by recombination events. This work intends to describe an algorithm for history reconstruction of recombination events detected from a set of viral genomic sequences. Preliminary results are provided from the analysis of some sequences of Human Adenovirus D with the proposed algorithm.', 'Conférence', '2018-07-18', '2024-05-17', '2018 IEEE International Work Conference on Bioinspired Intelligence (IWOBI)', '1-8', 15),
(413, 'Accelerating Discovery and Innovation through Advanced Computing: Perspective of a High-Performance Computing Scientist in Costa Rica', 'A new generation of computational scientists is currently being trained across Costa Rica, mainly at research laboratories in public universities. This new wave of scientists is expected to further increase the impact of advanced computing in conceiving creative, powerful ways to understand the universe and solve complex problems.', 'Revue', '2018-05-11', '2024-05-17', 'Computing in Science & Engineering', '36-38', 15),
(414, 'Developing a Web Caching Architecture with Configurable Consistency: A Proposal.', 'In recent years, Web Caching has been considered one of the key areas to improve web usage efficiency. However, caching web objects proposes many considerations about the validity of the cache. Ideally, it would be valuable to have a consistent cache, where no invalid relationships among objects are held. Several alternatives have been offered to keep consistency in the web cache, each one being better in different situations and for diverse requirements. Usually, web cachers implement just one strategy for maintaining consistency, sometimes giving bad results if circumstances are not appropriate for such strategy. Given that, a web cacher where this policy can be adapted to different situations, will offer good results in an execution with changing conditions. A web caching architecture is proposed as a testbed for consistency models, allowing both timing and ordering issues to be considered.', 'Conférence', '2005-01-01', '2024-05-17', 'WEBIST', '110-116', 5),
(415, 'A characterization of soft-error sensitivity in data-parallel and model-parallel distributed deep learning', 'The latest advances in artificial intelligence deep learning models are unprecedented. A wide spectrum of application areas is now thriving thanks to available massive training datasets and gigantic complex neural network models. Those two characteristics demand outstanding computing power that only advanced computing platforms can provide. Therefore, distributed deep learning has become a necessity in capitalizing on the potential of cutting-edge artificial intelligence. Two basic schemes have emerged in distributed learning. First, the data-parallel approach, which aims at dividing the training dataset into multiple computing nodes. Second, the model-parallel approach, which splits layers of a model into several computing nodes. Each scheme has its upsides and downsides, particularly when running on large machines that are susceptible to soft errors. Those errors occur as a consequence of several …', 'Revue', '2024-08-01', '2024-05-17', 'Journal of Parallel and Distributed Computing', '104879', 42),
(416, 'High Performance Computing: 10th Latin American Conference, CARLA 2023, Cartagena, Colombia, September 18-22, 2023, Revised Selected Papers', '', '', '2024-01-01', '2024-05-17', '', '', 50),
(417, 'Automatic Classification of Seismo-Volcanic Signals with Deep Learning: The Case of Turrialba Volcano', 'Monitoring and surveillance of volcanic activity is crucial to properly forecast the associated hazards. In this context, the analysis of volcanic seismicity plays a fundamental role. There are different seismic signals associated with volcanic activity, such as: volcano tectonic earthquakes (VT), long period earthquakes (LP) or low frequency earthquakes, earthquakes associated with explosions, hybrid earthquakes, deep LP earth-quakes and tremors. These are originated due to the movement or pumping of magma, fracturing of the rock under the surface, sound vibrations in the emission conduits, magma gasification processes, collapse of the magmatic chamber and explosions originated by the eruption. The identification and classification of these signals is a complex and time-consuming proces due to the lack of applicability of conventional tectonic earthquake location procedures and the difficulty experienced by …', 'Conférence', '2023-11-28', '2024-05-17', '2023 IEEE 5th International Conference on BioInspired Processing (BIP)', '1-6', 15),
(418, 'Evaluation of Alternatives to Accelerate Scientific Numerical Calculations on Graphics Processing Units Using Python', 'In this paper, the Numba, JAX, CuPy, PyTorch, and TensorFlow Python GPU accelerated libraries were benchmarked using scientific numerical kernels on a NVIDIA V100 GPU. The benchmarks consisted of a simple Monte Carlo estimation, a particle interaction kernel, a stencil evolution of an array, and tensor operations. The benchmarking procedure included general memory consumption measurements, a statistical analysis of scalability with problem size to determine the best libraries for the benchmarks, and a productivity measurement using source lines of code (SLOC) as a metric. It was statistically determined that the Numba library outperforms the rest on the Monte Carlo, particle interaction, and stencil benchmarks. The deep learning libraries show better performance on tensor operations. The SLOC count was similar for all the libraries except Numba which presented a higher SLOC count which implies …', 'Livre', '2023-09-18', '2024-05-17', 'Latin American High Performance Computing Conference', '3-20', 61),
(419, 'Ten Billion Events in Three Minutes: Scaling an Agent-basedEpidemic Simulation on Realistic Social Contact Networks', '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58', '', '2023-04-05', '2024-05-17', '', '', 62),
(420, 'An Evaluation of a Ray-Tracing Based Model for Photorealistic Image Rendering of Confined Plasma in Stellarators', 'As the world moves away from traditional energy sources based on fossil fuels, several alternatives have been explored. One promising clean energy source is nuclear fusion. The fusion of hydrogen isotopes may provide generous consumable energy gains. However, nuclear fusion reactors are not ready to become a productive mechanism yet. To get a better understanding of plasma, numerical simulations and scientific visualizations over high-performance computing systems are mandatory. The results from the simulations and a proper display of the data are key to design and tune up nuclear fusion reactors. It is also thanks to the international collaboration effort such as the advisory contribution and tools of researchers from the Argonne National Laboratory in the United States in conjunction with the National Center for High Technology of Costa Rica that this work was successfully carried out. In a previous work, we explored a new approach of the scientific visualization of plasma confinement, presenting one model to generate realistic plasma representations. This work presents an evaluation of the expected quality of the images rendered with the created model. We propose a concept called visual plausibility as an evaluation attribute to rate each rendered image by physicists that already know about the plasma appearance.', 'Revue', '2022-12-01', '2024-05-17', 'Computación y Sistemas', '1649-1659', 64),
(421, 'Early Experiences of Noise-Sensitivity Performance Analysis of a Distributed Deep Learning Framework', 'Deep Learning (DL) applications are used to solve complex problems efficiently. These applications require complex neural network models composed of millions of parameters and huge amounts of data for proper training. This is only possible by parallelizing the necessary computations by so-called distributed deep learning (DDL) frameworks over many GPUs distributed over multiple nodes of a HPC cluster. These frameworks mostly utilize the compute power of the GPUs and use only a small portion of the available compute power of the CPUs in the nodes for I/O and inter-process communication, leaving many CPU cores idle and unused. The more powerful the base CPU in the cluster nodes, the more compute resources are wasted. In this paper, we investigate how much of this unutilized compute resources could be used for executing other applications without lowering the performance of the DDL …', 'Conférence', '2022-09-05', '2024-05-17', '2022 IEEE International Conference on Cluster Computing (CLUSTER)', '516-522', 15),
(422, 'A Performance Evaluation of Adaptive MPI for a Particle-In-Cell Code', 'In the quest for extreme-scale supercomputers, the High Performance Computing (HPC) community has developed many resources (programming paradigms, architectures, method-ologies, numerical methods) to face the multiple challenges along the way. One of those resources are task-based parallel program-ming tools. The availability of mature programming models, pro-gramming languages, and runtime systems that use task-based parallelism represent a favorable ecosystem. The fundamental premise of these tools is their ability to naturally cope with dynamically changing execution conditions, i.e. adaptivity. In this paper, we explore Adaptive MPI, a parallel-object framework, as a mechanism to provide, among other features, automatic and dynamic load balancing for a particle-in-cell application. We ported a pre-existing MPI application on the Adaptive MPI infrastructure and highlight the changes required …', 'Conférence', '2022-09-05', '2024-05-17', '2022 IEEE International Conference on Cluster Computing (CLUSTER)', '506-511', 15),
(423, 'High Performance Computing: 8th Latin American Conference, CARLA 2021, Guadalajara, Mexico, October 6–8, 2021, Revised Selected Papers', 'This book constitutes revised selected papers of the 8th Latin American High Performance Computing Conference, CARLA 2021, held in Guadalajara, Mexico, in October 2021. Due to the COVID-19 pandemic the conference was held in a virtual mode. The 16 revised full papers and 2 short papers presented were carefully reviewed and selected out of 45 submissions. The papers included in this book are organized according to the topics on​ high performance computing; high performance computing and artificial intelligence; high performance computing applications.', '', '2022-04-11', '2024-05-17', '', '', 63),
(424, 'A Comparative Evaluation of Modern Architectures for the Non-Local Means Filter using Performance Primitives Libraries and Compiler Directive APIs', 'The performance achieved by an application is limited by architectural features such as program data access and processing patterns. Parallelization approaches exhibit dissimilar performance and have a direct impact in application execution time. Additionally, developing parallel code involves additional complexity and productivity for programmers to accelerate or rewrite the program. In this paper, we present a comparative performance evaluation of a CPU, GPU, and many-core (Xeon Phi KNL) architectures for the Non-Local Means filter. We asses the effect of different data access and processing patterns in two computational optimizations developed for the aforementioned filter. We follow a top-down approach in terms of the parallelization approach chosen, starting from performance primitives as a first step to give easy drop-in acceleration and then compiler directives with frameworks such as OpenMP and …', 'Conférence', '2021-11-04', '2024-05-17', '2021 IEEE 3rd International Conference on BioInspired Processing (BIP)', '1-6', 15),
(425, 'Evaluating resilience of deep learning models', 'Deep learning applications have become a valuable tool to solve complex problems in many critical areas. It is important to provide reliability on the outputs of those applications, even if failures occur during execution. In this paper, we present a reliability evaluation of three deep learning models. We use an ImageNet dataset and a homebrew fault injector to make all the tests. The results show there is a difference in failure sensitivity among the models. Also, there are models that despite an increase in the failure rate can keep the resulting error values low.', '', '2020-01-01', '2024-05-17', '', '', 65),
(426, 'Locating seismo-volcanic signals in Turrialba Volcano (Costa Rica) using Python and Advanced Computing: a case of multidisciplinary collaboration for scientific development', 'Low frequency seismo-volcanic signals are generated by the internal motion of fluids like magma, gases and water. They commonly occur before or together with erupting activity. Therefore, there study is fundamental for monitoring volcanic activity and assessment of volcanic risk. Nevertheless, because of their source complexity, it’s not possible to use the classical procedures for seismic location, which were developed for locating the more common tectonic earthquakes. Moreover, the volcanic edifice heterogeneity modifies the waveform of seimovolcanic signals, making the process of finding its location more challenging. Hence, signals must be processed using other methods that, because of their computational complexity, require advanced computing platforms (supercomputers), specially if real-time processing is required. However, seismic observatories of volcano monitoring in Central America have limited resources and may not afford in-house professional software developers. The present work analyzes a study case about a collaborative experience between specialists in volcano seismology and in advanced computing. We developed a computational platform to locate seismo-volcanic signals in Turrialba Volcano. Our principal conclusion is that the creation of multidisciplinary collaboration networks allow resource maximization to tackle and overcome many limitations common in our context (lack of human resource, technology, low budget, among others).', '', '2019-03-12', '2024-05-17', '', '', 66),
(427, 'High Performance Computing', 'The use and development of high-performance computing (HPC) in Latin America is steadily growing. New challenges come from the capabilities provided by clusters, grids, and distributed systems for HPC, promoting research and innovation in many scientific disciplines. Building on the great success of the previous editions, the Latin American Conference on High-Performance Computing (CARLA 2018) was held in Bucaramanga, Colombia, during September 26–28. The main goal of CARLA 2018 was to provide a regional forum to foster the growth of the HPC community in Latin America through the exchange and dissemination of new ideas, techniques, and research projects. The conference featured invited talks from academy and industry as well as short-and full-paper sessions presenting both mature work and new ideas in research and industrial applications.The list of topics included: parallel algorithms …', '', '2019-01-01', '2024-05-17', '', '', 19),
(428, 'Localizando señales sismo-volcánicas del volcán Turrialba (Costa Rica) usando Python y Computación Avanzada: un caso de colaboración multidisciplinar para el desarrollo científico', 'Las señales sismo-volcánicas de baja frecuencia son generadas por el movimiento interno de magma, gases, agua, entre otros. Suelen preceder o acompañar la actividad eruptiva. Por lo tanto, estudiarlos resulta fundamental para el monitoreo de la actividad volcánica y una apropiada estimación de la amenaza. Sin embargo, la complejidad del mecanismo de la fuente hace que los procedimientos clásicos de localización de sismos generados por procesos tectónicos, que son los más comunes, no puedan ser utilizados para los volcánicos. A esto se suma la heterogeneidad de los edificios volcánicos que modifican en gran medida las formas de onda de las señales sismo-volcánicas, lo que también dificulta su procesamiento. Es por ello que se requiere aplicar otro tipo de métodos de tratamiento de señal los cuales, por su complejidad computacional, requieren de plataformas de computación avanzada (supercomputadoras), sobretodo cuando se precisa de resultados en tiempo real. No obstante, los observatorios o entes encargados de la auscultación y monitoreo volcánico en la región centroamericana tienen recursos limitados y no pueden mantener un departamento completo de desarrollo de softwareespecializado. La presente ponencia analiza un caso de estudio, en el cual se desarrolló un trabajo colaborativo entre especialistas en sismología volcánica y en computación avanzada, quienes implementaron una plataforma computacional para la localización de señales sismo-volcánicas en el Volcán Turrialba, Costa Rica. Nuestra principal conclusión es que la creación de redes de colaboración multidisciplinaria es una opción …', 'Revue', '2019-01-01', '2024-05-17', 'Tecnología en Marcha', '18-26', 60),
(429, 'Framework para Simulación en Paralelo de Fenómenos Sismológicos y Vulcanológicos', 'Costa Rica es un país situado en el llamado Cinturón de Fuego del Pacífico, una zona altamente sísmica que comprende países en ambos extremos del Océano Pacífico. En Costa Rica, en promedio, se experimenta un sismo de magnitud 4.0 o superior diariamente. Es fundamental para el país contar con una plataforma computacional para entender mejor los fenómenos sismológicos y el efecto que pueden tener los sismos en la sociedad. Este proyecto tuvo como objetivo principal identificar las necesidades de simulación y procesamiento de datos de los observatorios sismológicos del país (OVSICORI y RSN) y construir un framework que permitiera ejecutar esos programas. El entregable principal fue una primera versión del framework para obtener sismogramas sintéticos. Se diseñó una plataforma que simula sismos computacionalmente y que a la vez asocia información geográfica para crear videos del sismo con información del entorno físico. Esta integración permite una visualización enriquecida de los fenómenos. El framework integra varias herramientas de código libre que ejecutan en arquitecturas paralelas y que tienen la capacidad de simular una amplia variedad de escenarios. Este tipo de infraestructura es esencial para el país y demuestra el potencial que existe en la colaboración científica y el uso de tecnologías de computación avanzada.', '', '2018-01-01', '2024-05-17', '', '', 67),
(430, 'Full-wave simulation of mode-converted electron Bernstein waves at very low magnetic field in the SCR-1 Stellarator', 'The generation of electron Bernstein waves in SCR-1 plasma was studied through the coupling between the incident electromagnetic radiation and charged particles of the plasma. The microwave scenarios performed with the IPF-FDMC full wave code allowed to recognize the localizations along the radial coordinate at the z= 0 position where this coupling occurred by looking for high variations of the electric field amplitude of the incident electromagnetic radiation [2]. The IPF-FDMC full wave input parameters were obtained by VMEC equilibrium and the value of the experimental electron line-averaged density.', '', '2018-01-01', '2024-05-17', '', '', 68),
(431, 'Exploring Application-Level Message-Logging in Scalable HPC Programs', ' The next generation of supercomputers will require HPC applications to handle failures. This paper presents, through an example application, the benefits of logging messages at the application level. The proposed method will do both, provide resilience to failures and improve performance.', 'Conférence', '2018-01-01', '2024-05-17', 'High Performance Computing: 4th Latin American Conference, CARLA 2017, Buenos Aires, Argentina, and Colonia del Sacramento, Uruguay, September 20-22, 2017, Revised Selected Papers 4', '250-254', 19),
(432, 'Parallel Programming Tools in Python', 'The Python programming language is widely used in scien-tific computing. Five rankings on the popularity of program-ming languages with different methodologies [1],[2],[3],[4] and [5] list Python in position 1, 4, 2, 3 and 3, respectively. Those rankings considered the number of results returned by web searches, Github projects, questions tagged in StackOver-flow, open job positions, among other variables. As stated in [6], in 2015 approximately 10% of all computer jobs at Texas Advanced Computing Center were Python applications. Also, there exists specific modules for a wide diversity of scientific disciplines. Because of this strong code base and ease of use, Python is commonly the first language learned by engineering, basic and applied science students.', 'Revue', '2017-01-01', '2024-05-17', 'Memorias de congresos TEC', '', 5),
(433, 'Diseño de una infraestructura de computación de alto rendimiento para objetos paralelos en un lenguaje de alto nivel', 'La computación paralela ha alcanzado una posición predominante en la última década gracias a la abundancia de arquitecturas computacionales de múltiples núcleos. Explotar el poder computacional disponible en los sistemas modernos ofrece una enorme posibilidad de avanzar el estado del arte en la ciencia y la ingeniería. El modelo de programación de objetos paralelos ofrece muchas ventajas con respecto a otros modelos en computación paralela. Sin embargo, este modelo no ha sido explorado en el contexto de lenguajes de alto nivel. Este proyecto se enfocó en explorar las posibilidades de diseño de un sistema de computación de alto rendimiento para objetos paralelos en un lenguaje de alto nivel. Para lograr ese objetivo se hizo una recolección exhaustiva de herramientas en el lenguaje Python para computación de alto rendimiento. Esa colección demostró la oportunidad que existe al combinar los dos dominios: objetos paralelos y un lenguaje de alto nivel. Además, el proyecto creó un panorama de las posibilidades de diseño de tal combinación.', '', '2017-01-01', '2024-05-17', '', '', 69),
(434, 'Algoritmos alternos de bajo coste para la comparación de rutas metabólicas en plantas', 'Las rutas metabólicas proveen información clave para alcanzar un mejor entendimiento de la vida y sus procesos; esta información es útil para el mejoramiento de la medicina, la agronomía, farmacia y otras áreas similares. La herramienta de análisis principal usada para estudiar estas rutas está basada en la idea de la comparación de rutas, usando estructuras de datos tipo grafos. La comparación de grafos ha sido definida como una tarea computacionalmente compleja.Se proponen 2 algoritmos con enfoques diferentes que simplifican el problema de comparar rutas representadas como grafos. El primer algoritmo consiste en la transformación de una estructura grafo de 2 dimensiones a una estructura de 1 dimensión, posteriormente alinear los datos correspondientes usando la estructura 1D reducida. El segundo algoritmo consiste en realizar un análisis de pares entre grafos, es decir una relación de 2 nodos iguales presentes en ambos grafos, para eliminar las similitudes, y finalmente mostrar las diferencias al usuario.', '', '2017-01-01', '2024-05-17', '', '', 70),
(435, 'Using Community Detection Algorithms to Identify Clusters of Ranks in an MPI Application Based on the Communication Matrix', 'In the MPI parallel programming model, communication remains the bottleneck that prevents applications to achieve greater performance and scalability. Due to this problem it is important to know the behavior of this communication in each application. For this reason, we propose the use of community detection algorithms to identify from the communication matrix the clusters of ranks that maximize intracluster communication and minimize intercluster communication. The aim of this project is providing another tool to identify how you can improve the performance of a MPI application.', 'Revue', '2017-01-01', '2024-05-17', 'Memorias de congresos TEC', '', 5),
(436, 'Reducing the Overhead of Message Logging in Fault-Tolerant HPC Applications', ' With the exascale era within reach, the high performance computing community is preparing to embrace the challenges associated with extreme-scale systems. Resilience raises as one of the major hurdles in making those systems usable for the advance of science and industry. Message logging is a well-known strategy to provide fault tolerance, one that is promising due to its ability to avoid global restart. However, message-logging protocols may suffer considerable overhead if implemented for the general case. This paper introduces a new message-logging protocol that leverages the benefits of a flexible parallel programming paradigm. We evaluate the protocol using a particular type of applications and demonstrate it can keep a low performance penalization when scaling up to 128,000 cores.', 'Conférence', '2017-01-01', '2024-05-17', 'High Performance Computing: Third Latin American Conference, CARLA 2016, Mexico City, Mexico, August 29–September 2, 2016, Revised Selected Papers 3', '204-218', 19),
(437, 'Dynamic Load Balancing Strategies for Parallel Reacting Flow Simulations', 'Load balancing in parallel computing aims at distributing the work as evenly as possible among the processors. This is a critical issue in the performance of parallel, time accurate, flow simulators. The constraint of time accuracy requires that all processes must be finished with their calculation for a given time step before any process can begin calculation of the next time step. Thus, an irregularly balanced compute load will result in idle time for many processes for each iteration and thus increased walltimes for calculations. Two existing, dynamic load balancing approaches are applied to the simplified case of a partially stirred reactor for methane combustion. The first is Zoltan, a parallel partitioning, load balancing, and data management library developed at the Sandia National Laboratories. The second is Charm++, which is its own machine independent parallel programming system developed at the University of …', 'Revue', '2014-11-01', '2024-05-17', 'APS Division of Fluid Dynamics Meeting Abstracts', 'R31. 001', 5);

--
-- Déchargement des données de la table `2025_publish`
--

INSERT INTO `2025_publish` (`id_author`, `id_publication`) VALUES
(4, 1),
(5, 1),
(6, 1),
(5, 2),
(9, 2),
(10, 2),
(5, 3),
(11, 3),
(12, 3),
(4, 4),
(5, 4),
(13, 4),
(14, 4),
(5, 5),
(15, 5),
(16, 5),
(5, 6),
(9, 6),
(17, 6),
(18, 6),
(5, 7),
(19, 7),
(20, 7),
(21, 7),
(22, 7),
(5, 8),
(13, 8),
(23, 8),
(24, 8),
(4, 9),
(5, 9),
(6, 9),
(4, 10),
(5, 10),
(13, 10),
(14, 10),
(5, 11),
(15, 11),
(16, 11),
(5, 12),
(9, 12),
(25, 12),
(5, 13),
(5, 14),
(9, 14),
(13, 14),
(17, 14),
(18, 14),
(26, 14),
(27, 14),
(28, 14),
(75, 14),
(5, 15),
(13, 15),
(23, 15),
(24, 15),
(5, 16),
(29, 16),
(30, 16),
(5, 17),
(29, 17),
(31, 17),
(5, 18),
(13, 18),
(32, 18),
(33, 18),
(34, 18),
(5, 19),
(13, 19),
(35, 19),
(36, 19),
(5, 20),
(11, 20),
(12, 20),
(13, 20),
(5, 21),
(11, 21),
(12, 21),
(37, 21),
(5, 22),
(13, 22),
(23, 22),
(38, 22),
(5, 23),
(39, 23),
(40, 23),
(5, 24),
(13, 24),
(32, 24),
(34, 24),
(41, 24),
(5, 25),
(9, 25),
(42, 25),
(43, 25),
(5, 26),
(29, 26),
(30, 26),
(31, 26),
(44, 26),
(5, 27),
(13, 27),
(32, 27),
(34, 27),
(45, 27),
(5, 28),
(9, 28),
(46, 28),
(5, 29),
(9, 29),
(42, 29),
(43, 29),
(5, 30),
(19, 30),
(20, 30),
(21, 30),
(22, 30),
(5, 31),
(13, 31),
(23, 31),
(38, 31),
(47, 31),
(5, 32),
(23, 32),
(5, 33),
(12, 33),
(48, 33),
(5, 34),
(13, 34),
(47, 34),
(5, 35),
(39, 35),
(40, 35),
(49, 35),
(50, 35),
(51, 35),
(52, 35),
(53, 35),
(54, 35),
(55, 35),
(56, 35),
(57, 35),
(5, 36),
(58, 36),
(59, 36),
(5, 37),
(13, 37),
(31, 37),
(60, 37),
(5, 38),
(36, 38),
(61, 38),
(5, 39),
(13, 39),
(31, 39),
(60, 39),
(62, 39),
(5, 40),
(13, 40),
(47, 40),
(5, 41),
(6, 41),
(12, 41),
(5, 42),
(26, 42),
(5, 43),
(59, 43),
(63, 43),
(64, 43),
(65, 43),
(5, 44),
(59, 44),
(64, 44),
(66, 44),
(5, 45),
(58, 45),
(59, 45),
(5, 46),
(13, 46),
(35, 46),
(36, 46),
(5, 47),
(9, 47),
(46, 47),
(5, 48),
(5, 49),
(59, 49),
(63, 49),
(64, 49),
(5, 50),
(67, 50),
(68, 50),
(5, 51),
(59, 51),
(63, 51),
(64, 51),
(5, 52),
(35, 52),
(36, 52),
(69, 52),
(5, 53),
(13, 53),
(35, 53),
(36, 53),
(5, 54),
(11, 54),
(12, 54),
(13, 54),
(5, 55),
(39, 55),
(40, 55),
(5, 56),
(11, 56),
(12, 56),
(5, 57),
(13, 57),
(35, 57),
(36, 57),
(5, 58),
(6, 58),
(5, 59),
(11, 59),
(12, 59),
(37, 59),
(4, 60),
(5, 60),
(13, 60),
(5, 61),
(9, 61),
(70, 61),
(71, 61),
(72, 61),
(73, 61),
(74, 61),
(5, 62),
(46, 62),
(5, 63),
(25, 63),
(5, 64),
(19, 64),
(20, 64),
(21, 64),
(22, 64),
(76, 64),
(5, 65),
(59, 65),
(64, 65),
(66, 65),
(5, 66),
(58, 66),
(59, 66),
(5, 67),
(67, 67),
(68, 67),
(77, 67),
(5, 68),
(36, 68),
(57, 68),
(78, 68),
(79, 68),
(80, 68),
(81, 68),
(82, 68),
(83, 68),
(84, 68),
(85, 68),
(86, 68),
(87, 68),
(88, 68),
(89, 68),
(90, 68),
(91, 68),
(92, 68),
(93, 68),
(94, 68),
(95, 68),
(96, 68),
(97, 68),
(98, 68),
(5, 69),
(5, 70),
(99, 70),
(100, 70),
(5, 71),
(12, 71),
(48, 71),
(5, 72),
(9, 72),
(46, 72),
(5, 73),
(9, 73),
(17, 73),
(5, 74),
(9, 74),
(42, 74),
(43, 74),
(5, 75),
(46, 75),
(5, 76),
(26, 76),
(5, 77),
(5, 78),
(68, 78),
(101, 78),
(102, 79),
(103, 79),
(104, 79),
(5, 80),
(105, 80),
(106, 80),
(107, 80),
(108, 80),
(109, 80),
(110, 80),
(111, 80),
(112, 80),
(5, 81),
(113, 81),
(114, 81),
(115, 81),
(116, 81),
(117, 81),
(118, 81),
(119, 81),
(120, 81),
(121, 81),
(122, 81),
(123, 81),
(124, 81),
(125, 81),
(126, 81),
(127, 81),
(128, 81),
(129, 81),
(130, 81),
(131, 81),
(132, 81),
(133, 81),
(134, 81),
(135, 81),
(136, 81),
(137, 81),
(138, 81),
(139, 81),
(140, 81),
(141, 81),
(142, 81),
(143, 81),
(144, 81),
(145, 81),
(146, 81),
(147, 81),
(148, 81),
(149, 81),
(150, 81),
(151, 81),
(152, 81),
(153, 81),
(154, 81),
(155, 81),
(156, 81),
(157, 81),
(158, 81),
(159, 81),
(160, 81),
(161, 81),
(162, 81),
(163, 81),
(164, 81),
(165, 81),
(166, 81),
(167, 81),
(168, 81),
(169, 81),
(170, 81),
(171, 81),
(172, 81),
(173, 81),
(174, 81),
(175, 81),
(176, 81),
(177, 81),
(178, 81),
(179, 81),
(180, 81),
(181, 81),
(182, 81),
(183, 81),
(184, 81),
(185, 81),
(186, 81),
(187, 81),
(188, 81),
(189, 81),
(190, 81),
(191, 81),
(111, 82),
(192, 82),
(193, 82),
(194, 82),
(195, 82),
(111, 83),
(192, 83),
(195, 83),
(192, 84),
(194, 84),
(195, 84),
(196, 84),
(197, 84),
(198, 84),
(199, 84),
(200, 84),
(201, 84),
(202, 84),
(111, 85),
(192, 85),
(193, 85),
(195, 85),
(192, 86),
(193, 86),
(195, 86),
(203, 86),
(204, 86),
(205, 86),
(13, 87),
(192, 87),
(196, 87),
(197, 87),
(198, 87),
(199, 87),
(200, 87),
(192, 88),
(193, 88),
(195, 88),
(206, 88),
(207, 88),
(13, 89),
(192, 89),
(196, 89),
(197, 89),
(198, 89),
(199, 89),
(200, 89),
(192, 90),
(208, 90),
(209, 90),
(210, 90),
(211, 90),
(212, 90),
(213, 90),
(13, 91),
(192, 91),
(196, 91),
(197, 91),
(198, 91),
(199, 91),
(200, 91),
(192, 92),
(195, 92),
(197, 92),
(198, 92),
(199, 92),
(200, 92),
(192, 93),
(209, 93),
(213, 93),
(214, 93),
(192, 94),
(209, 94),
(210, 94),
(213, 94),
(6, 95),
(192, 95),
(194, 95),
(215, 95),
(216, 95),
(217, 95),
(218, 95),
(192, 96),
(195, 96),
(197, 96),
(198, 96),
(199, 96),
(200, 96),
(192, 97),
(193, 97),
(195, 97),
(192, 98),
(193, 98),
(195, 98),
(192, 99),
(193, 99),
(15, 100),
(193, 100),
(196, 100),
(197, 100),
(198, 100),
(193, 101),
(207, 101),
(219, 101),
(193, 102),
(220, 102),
(221, 102),
(222, 102),
(193, 103),
(223, 103),
(224, 103),
(193, 104),
(207, 104),
(219, 104),
(225, 104),
(15, 105),
(193, 105),
(226, 105),
(227, 105),
(15, 106),
(193, 106),
(193, 107),
(207, 107),
(228, 107),
(193, 108),
(195, 108),
(229, 108),
(230, 108),
(231, 108),
(193, 109),
(207, 109),
(219, 109),
(225, 109),
(193, 110),
(232, 110),
(233, 110),
(193, 111),
(233, 111),
(234, 111),
(235, 111),
(15, 112),
(193, 112),
(15, 113),
(193, 113),
(15, 114),
(193, 114),
(236, 114),
(193, 115),
(207, 115),
(219, 115),
(193, 116),
(207, 116),
(228, 116),
(237, 116),
(15, 117),
(193, 117),
(193, 118),
(233, 118),
(234, 118),
(235, 118),
(193, 119),
(207, 119),
(225, 119),
(15, 120),
(193, 120),
(26, 121),
(28, 121),
(193, 121),
(238, 121),
(239, 121),
(240, 121),
(241, 121),
(242, 121),
(243, 121),
(244, 121),
(245, 121),
(246, 121),
(247, 122),
(248, 122),
(249, 122),
(250, 122),
(251, 122),
(193, 123),
(252, 123),
(193, 124),
(233, 124),
(234, 124),
(235, 124),
(15, 125),
(193, 125),
(253, 125),
(193, 126),
(195, 126),
(254, 126),
(15, 127),
(193, 127),
(236, 127),
(15, 128),
(193, 128),
(253, 128),
(193, 129),
(193, 130),
(204, 130),
(255, 130),
(193, 131),
(256, 131),
(257, 131),
(258, 131),
(193, 132),
(204, 132),
(255, 132),
(193, 133),
(259, 133),
(260, 133),
(192, 134),
(193, 134),
(195, 134),
(15, 135),
(193, 135),
(261, 135),
(262, 135),
(263, 135),
(193, 136),
(15, 137),
(193, 137),
(253, 137),
(15, 138),
(193, 138),
(193, 139),
(193, 140),
(193, 141),
(193, 142),
(193, 143),
(193, 144),
(193, 145),
(207, 145),
(219, 145),
(264, 145),
(265, 145),
(266, 145),
(267, 145),
(268, 145),
(269, 145),
(270, 145),
(271, 145),
(272, 145),
(273, 145),
(274, 145),
(275, 145),
(276, 145),
(277, 145),
(192, 146),
(193, 146),
(195, 146),
(15, 147),
(193, 147),
(261, 147),
(262, 147),
(193, 148),
(15, 149),
(193, 149),
(236, 149),
(110, 150),
(193, 150),
(195, 150),
(197, 150),
(200, 150),
(229, 150),
(230, 150),
(278, 150),
(279, 150),
(280, 150),
(281, 150),
(282, 150),
(283, 150),
(284, 150),
(285, 150),
(286, 150),
(287, 150),
(288, 150),
(289, 150),
(290, 150),
(291, 150),
(292, 150),
(293, 150),
(111, 151),
(294, 151),
(295, 151),
(296, 151),
(297, 151),
(298, 151),
(299, 151),
(251, 152),
(300, 152),
(301, 152),
(302, 152),
(303, 152),
(300, 153),
(301, 153),
(111, 154),
(304, 154),
(305, 154),
(306, 154),
(307, 154),
(308, 154),
(111, 155),
(195, 155),
(198, 155),
(231, 155),
(309, 155),
(310, 155),
(311, 155),
(312, 155),
(313, 155),
(314, 155),
(315, 155),
(316, 155),
(317, 155),
(318, 155),
(319, 155),
(320, 155),
(321, 155),
(322, 155),
(323, 155),
(324, 155),
(325, 155),
(326, 155),
(327, 155),
(328, 155),
(329, 155),
(330, 155),
(331, 155),
(332, 155),
(333, 155),
(334, 155),
(335, 155),
(336, 155),
(337, 155),
(338, 155),
(339, 155),
(340, 155),
(341, 155),
(342, 155),
(343, 155),
(344, 155),
(345, 155),
(346, 155),
(347, 155),
(348, 155),
(349, 155),
(350, 155),
(351, 155),
(352, 155),
(353, 155),
(354, 155),
(355, 155),
(356, 155),
(357, 155),
(358, 155),
(359, 155),
(360, 155),
(361, 155),
(362, 155),
(363, 155),
(364, 155),
(365, 155),
(366, 155),
(367, 155),
(368, 155),
(369, 155),
(370, 156),
(371, 156),
(111, 157),
(195, 157),
(283, 157),
(324, 157),
(333, 157),
(372, 157),
(373, 157),
(374, 157),
(375, 157),
(376, 157),
(377, 157),
(378, 157),
(379, 157),
(380, 157),
(381, 157),
(382, 157),
(383, 157),
(384, 157),
(385, 157),
(386, 157),
(387, 157),
(388, 157),
(389, 157),
(390, 157),
(391, 157),
(392, 157),
(393, 157),
(394, 157),
(111, 158),
(395, 158),
(111, 159),
(195, 159),
(324, 159),
(325, 159),
(337, 159),
(396, 159),
(111, 160),
(195, 160),
(294, 160),
(334, 160),
(337, 160),
(397, 160),
(398, 161),
(399, 161),
(400, 162),
(401, 162),
(402, 162),
(403, 162),
(111, 163),
(404, 163),
(405, 163),
(111, 164),
(308, 164),
(406, 164),
(111, 165),
(308, 165),
(406, 165),
(111, 166),
(381, 166),
(407, 166),
(408, 166),
(409, 166),
(410, 166),
(411, 166),
(412, 166),
(413, 166),
(414, 166),
(415, 166),
(416, 166),
(417, 166),
(418, 166),
(419, 166),
(420, 166),
(421, 166),
(422, 166),
(423, 166),
(424, 166),
(425, 166),
(426, 166),
(427, 166),
(428, 166),
(429, 166),
(430, 166),
(431, 166),
(432, 166),
(433, 166),
(434, 166),
(435, 166),
(436, 166),
(437, 166),
(438, 166),
(439, 166),
(440, 166),
(441, 166),
(442, 166),
(443, 166),
(444, 166),
(445, 166),
(446, 166),
(447, 166),
(448, 166),
(449, 166),
(450, 166),
(451, 166),
(452, 166),
(453, 166),
(454, 166),
(455, 166),
(456, 166),
(111, 167),
(400, 167),
(457, 167),
(111, 168),
(458, 168),
(459, 168),
(460, 168),
(461, 168),
(462, 168),
(111, 169),
(463, 169),
(464, 169),
(251, 170),
(300, 170),
(301, 170),
(302, 170),
(303, 170),
(111, 171),
(465, 171),
(111, 172),
(400, 172),
(457, 172),
(111, 173),
(466, 173),
(111, 174),
(467, 174),
(468, 174),
(469, 174),
(111, 175),
(294, 175),
(296, 175),
(297, 175),
(299, 175),
(324, 175),
(470, 175),
(471, 175),
(111, 176),
(400, 176),
(457, 176),
(111, 177),
(251, 177),
(295, 177),
(472, 177),
(473, 177),
(111, 178),
(308, 178),
(406, 178),
(111, 179),
(111, 180),
(399, 180),
(472, 180),
(474, 180),
(111, 181),
(298, 181),
(475, 181),
(476, 181),
(477, 181),
(478, 181),
(479, 181),
(480, 181),
(481, 181),
(482, 181),
(483, 181),
(484, 181),
(485, 181),
(486, 181),
(487, 181),
(488, 181),
(489, 181),
(111, 182),
(490, 182),
(491, 182),
(492, 182),
(111, 183),
(493, 183),
(494, 183),
(495, 183),
(111, 184),
(492, 184),
(640, 184),
(111, 185),
(496, 185),
(497, 185),
(498, 185),
(499, 185),
(500, 185),
(501, 185),
(502, 185),
(111, 186),
(195, 186),
(285, 186),
(503, 186),
(111, 187),
(399, 187),
(472, 187),
(474, 187),
(111, 188),
(406, 188),
(111, 189),
(504, 189),
(111, 190),
(304, 190),
(305, 190),
(308, 190),
(406, 190),
(505, 190),
(111, 191),
(427, 191),
(506, 191),
(507, 191),
(508, 191),
(509, 191),
(9, 192),
(111, 192),
(195, 192),
(510, 192),
(511, 192),
(111, 193),
(512, 193),
(513, 193),
(514, 193),
(515, 193),
(516, 193),
(517, 193),
(518, 193),
(111, 194),
(519, 194),
(520, 194),
(521, 194),
(522, 194),
(523, 194),
(524, 194),
(525, 194),
(111, 195),
(196, 195),
(199, 195),
(204, 195),
(205, 195),
(309, 195),
(376, 195),
(387, 195),
(516, 195),
(526, 195),
(527, 195),
(528, 195),
(529, 195),
(530, 195),
(531, 195),
(532, 195),
(533, 195),
(534, 195),
(535, 195),
(536, 195),
(537, 195),
(111, 196),
(111, 197),
(308, 197),
(406, 197),
(111, 198),
(478, 198),
(538, 198),
(539, 198),
(540, 198),
(541, 198),
(542, 198),
(543, 198),
(544, 198),
(545, 198),
(546, 198),
(547, 198),
(548, 198),
(549, 198),
(111, 199),
(111, 200),
(430, 200),
(550, 200),
(551, 200),
(111, 201),
(195, 201),
(200, 201),
(285, 201),
(552, 201),
(553, 201),
(111, 202),
(294, 202),
(465, 202),
(503, 202),
(111, 203),
(294, 203),
(297, 203),
(554, 203),
(555, 203),
(556, 203),
(557, 203),
(558, 203),
(111, 204),
(465, 204),
(559, 204),
(111, 205),
(406, 205),
(560, 205),
(198, 206),
(300, 206),
(301, 206),
(474, 206),
(561, 206),
(562, 206),
(563, 206),
(564, 206),
(565, 206),
(566, 206),
(567, 206),
(568, 206),
(569, 206),
(570, 206),
(571, 206),
(572, 206),
(573, 206),
(574, 206),
(575, 206),
(576, 206),
(577, 206),
(578, 206),
(579, 206),
(580, 206),
(581, 206),
(582, 206),
(583, 206),
(584, 206),
(585, 206),
(586, 206),
(587, 206),
(588, 206),
(589, 206),
(590, 206),
(591, 206),
(592, 206),
(593, 206),
(594, 206),
(595, 206),
(596, 206),
(597, 206),
(598, 206),
(599, 206),
(600, 206),
(601, 206),
(602, 206),
(603, 206),
(604, 206),
(605, 206),
(606, 206),
(607, 206),
(608, 206),
(609, 206),
(610, 206),
(611, 206),
(612, 206),
(613, 206),
(614, 206),
(615, 206),
(616, 206),
(617, 206),
(618, 206),
(619, 206),
(111, 207),
(304, 207),
(308, 207),
(406, 207),
(505, 207),
(620, 207),
(621, 207),
(622, 207),
(111, 208),
(623, 208),
(624, 209),
(111, 210),
(111, 213),
(298, 213),
(475, 213),
(476, 213),
(477, 213),
(478, 213),
(479, 213),
(480, 213),
(481, 213),
(111, 214),
(463, 214),
(111, 215),
(506, 215),
(507, 215),
(111, 216),
(625, 216),
(111, 217),
(362, 217),
(376, 217),
(626, 217),
(627, 217),
(628, 217),
(629, 217),
(111, 218),
(630, 218),
(631, 218),
(111, 219),
(632, 219),
(111, 220),
(362, 220),
(376, 220),
(626, 220),
(628, 220),
(629, 220),
(111, 221),
(496, 221),
(497, 221),
(498, 221),
(500, 221),
(501, 221),
(502, 221),
(575, 221),
(633, 221),
(634, 221),
(635, 221),
(636, 221),
(637, 221),
(111, 222),
(638, 222),
(639, 222),
(111, 223),
(294, 223),
(111, 224),
(195, 224),
(285, 224),
(503, 224),
(111, 225),
(195, 225),
(386, 225),
(641, 225),
(642, 225),
(111, 226),
(643, 226),
(644, 226),
(111, 227),
(519, 227),
(522, 227),
(645, 227),
(646, 227),
(111, 228),
(230, 228),
(517, 228),
(647, 228),
(648, 228),
(649, 228),
(111, 229),
(650, 229),
(651, 229),
(9, 230),
(111, 230),
(195, 230),
(510, 230),
(511, 230),
(652, 230),
(653, 230),
(654, 230),
(655, 230),
(111, 231),
(195, 231),
(630, 231),
(656, 231),
(657, 231),
(300, 232),
(658, 232),
(659, 232),
(660, 232),
(661, 232),
(662, 232),
(663, 232),
(664, 232),
(665, 232),
(666, 232),
(667, 232),
(668, 232),
(669, 232),
(670, 232),
(671, 232),
(672, 232),
(673, 232),
(674, 232),
(675, 232),
(676, 232),
(297, 233),
(300, 233),
(677, 233),
(111, 235),
(519, 235),
(522, 235),
(523, 235),
(111, 236),
(230, 236),
(517, 236),
(647, 236),
(648, 236),
(649, 236),
(111, 237),
(554, 237),
(678, 237),
(679, 237),
(680, 237),
(111, 238),
(681, 238),
(111, 239),
(682, 239),
(683, 239),
(684, 239),
(106, 240),
(111, 240),
(685, 240),
(686, 240),
(687, 240),
(688, 240),
(689, 240),
(690, 240),
(691, 240),
(111, 241),
(294, 241),
(515, 241),
(111, 242),
(195, 242),
(283, 242),
(285, 242),
(692, 242),
(693, 242),
(694, 242),
(695, 242),
(111, 243),
(519, 243),
(696, 243),
(111, 244),
(230, 244),
(517, 244),
(647, 244),
(648, 244),
(649, 244),
(697, 244),
(278, 245),
(280, 245),
(281, 245),
(282, 245),
(296, 245),
(324, 245),
(341, 245),
(353, 245),
(379, 245),
(393, 245),
(698, 245),
(699, 245),
(700, 245),
(701, 245),
(702, 245),
(703, 245),
(704, 245),
(705, 245),
(706, 245),
(707, 245),
(708, 245),
(709, 245),
(710, 245),
(711, 245),
(712, 245),
(713, 245),
(714, 245),
(715, 245),
(716, 245),
(717, 245),
(718, 245),
(719, 245),
(203, 246),
(720, 246),
(721, 246),
(722, 246),
(203, 247),
(720, 247),
(723, 247),
(203, 248),
(724, 248),
(203, 249),
(720, 249),
(725, 249),
(203, 250),
(720, 250),
(203, 251),
(726, 251),
(727, 251),
(203, 252),
(721, 252),
(728, 252),
(203, 253),
(729, 253),
(203, 254),
(724, 254),
(203, 255),
(724, 255),
(200, 256),
(203, 256),
(730, 256),
(731, 256),
(732, 256),
(733, 256),
(203, 257),
(721, 257),
(728, 257),
(734, 257),
(203, 258),
(721, 258),
(731, 258),
(203, 259),
(720, 259),
(721, 259),
(203, 260),
(720, 260),
(200, 261),
(203, 261),
(735, 261),
(736, 261),
(721, 262),
(734, 262),
(737, 262),
(738, 262),
(203, 263),
(731, 263),
(732, 263),
(739, 263),
(740, 263),
(741, 263),
(203, 264),
(721, 264),
(728, 264),
(734, 264),
(203, 265),
(721, 265),
(742, 265),
(743, 265),
(744, 265),
(203, 266),
(721, 266),
(745, 266),
(746, 266),
(203, 267),
(720, 267),
(203, 268),
(728, 268),
(747, 268),
(748, 268),
(749, 268),
(750, 268),
(203, 269),
(720, 269),
(751, 269),
(203, 270),
(553, 270),
(728, 270),
(742, 270),
(743, 270),
(203, 271),
(721, 271),
(728, 271),
(734, 271),
(203, 273),
(752, 273),
(753, 273),
(754, 273),
(755, 273),
(203, 274),
(721, 274),
(728, 274),
(742, 274),
(756, 274),
(203, 275),
(720, 275),
(203, 276),
(757, 276),
(203, 277),
(758, 277),
(203, 278),
(721, 278),
(729, 278),
(759, 278),
(203, 279),
(739, 279),
(740, 279),
(741, 279),
(760, 279),
(203, 280),
(720, 280),
(728, 280),
(203, 281),
(720, 281),
(203, 282),
(720, 282),
(761, 282),
(762, 282),
(200, 283),
(203, 283),
(763, 283),
(764, 283),
(203, 284),
(724, 284),
(203, 285),
(721, 285),
(728, 285),
(734, 285),
(203, 286),
(728, 286),
(747, 286),
(750, 286),
(765, 286),
(766, 286),
(767, 286),
(768, 286),
(769, 286),
(770, 286),
(203, 287),
(721, 287),
(728, 287),
(203, 288),
(736, 288),
(771, 288),
(772, 288),
(203, 289),
(731, 289),
(203, 290),
(757, 290),
(203, 291),
(721, 291),
(729, 291),
(203, 292),
(721, 292),
(203, 293),
(720, 293),
(771, 293),
(200, 294),
(203, 294),
(763, 294),
(203, 295),
(733, 295),
(773, 295),
(774, 295),
(203, 296),
(721, 296),
(733, 296),
(203, 297),
(721, 297),
(729, 297),
(759, 297),
(203, 298),
(731, 298),
(732, 298),
(739, 298),
(740, 298),
(741, 298),
(203, 299),
(775, 299),
(776, 299),
(203, 300),
(721, 300),
(745, 300),
(777, 300),
(203, 301),
(720, 301),
(771, 301),
(203, 302),
(721, 302),
(728, 302),
(734, 302),
(203, 303),
(754, 303),
(778, 303),
(779, 303),
(203, 304),
(720, 304),
(728, 304),
(203, 305),
(721, 305),
(745, 305),
(759, 305),
(200, 306),
(203, 306),
(763, 306),
(203, 307),
(724, 307),
(731, 307),
(771, 307),
(728, 308),
(780, 308),
(203, 309),
(721, 309),
(781, 309),
(782, 309),
(200, 310),
(203, 310),
(552, 310),
(553, 310),
(763, 310),
(783, 310),
(784, 310),
(203, 311),
(745, 311),
(785, 311),
(780, 312),
(786, 312),
(787, 312),
(788, 312),
(789, 312),
(780, 313),
(786, 313),
(787, 313),
(788, 313),
(789, 313),
(790, 313),
(791, 313),
(792, 313),
(793, 313),
(794, 313),
(795, 313),
(796, 313),
(797, 313),
(798, 313),
(799, 313),
(800, 313),
(801, 313),
(802, 313),
(803, 313),
(203, 314),
(757, 314),
(780, 315),
(786, 315),
(787, 315),
(788, 315),
(789, 315),
(791, 315),
(795, 315),
(800, 315),
(803, 315),
(804, 315),
(203, 316),
(733, 316),
(773, 316),
(774, 316),
(203, 317),
(733, 317),
(773, 317),
(805, 317),
(203, 318),
(203, 319),
(203, 320),
(721, 320),
(729, 320),
(759, 320),
(203, 321),
(721, 321),
(203, 322),
(721, 322),
(728, 322),
(203, 323),
(740, 323),
(806, 323),
(807, 323),
(808, 323),
(809, 323),
(203, 324),
(721, 324),
(729, 324),
(759, 324),
(203, 325),
(775, 325),
(810, 325),
(811, 325),
(203, 326),
(775, 326),
(776, 326),
(203, 327),
(771, 327),
(203, 328),
(721, 328),
(729, 328),
(203, 329),
(729, 329),
(812, 329),
(813, 329),
(203, 330),
(814, 330),
(815, 330),
(816, 330),
(203, 331),
(203, 332),
(736, 332),
(772, 332),
(203, 333),
(785, 333),
(203, 334),
(720, 334),
(728, 334),
(203, 335),
(813, 335),
(203, 336),
(759, 336),
(203, 337),
(817, 337),
(203, 338),
(758, 338),
(203, 339),
(724, 339),
(771, 339),
(203, 340),
(758, 340),
(807, 340),
(818, 340),
(203, 341),
(727, 341),
(731, 341),
(739, 341),
(203, 342),
(720, 342),
(203, 343),
(720, 343),
(203, 344),
(759, 344),
(813, 344),
(819, 344),
(204, 345),
(205, 345),
(820, 345),
(821, 345),
(204, 346),
(205, 346),
(822, 346),
(823, 346),
(204, 347),
(205, 347),
(822, 347),
(823, 347),
(204, 348),
(205, 348),
(824, 348),
(204, 349),
(205, 349),
(825, 349),
(204, 350),
(205, 350),
(820, 350),
(204, 351),
(205, 351),
(820, 351),
(822, 351),
(824, 351),
(204, 352),
(205, 352),
(825, 352),
(204, 353),
(205, 353),
(825, 353),
(204, 354),
(205, 354),
(825, 354),
(826, 354),
(827, 354),
(828, 354),
(829, 354),
(204, 355),
(222, 355),
(822, 355),
(830, 355),
(831, 355),
(204, 356),
(205, 356),
(281, 356),
(204, 357),
(229, 357),
(832, 357),
(833, 357),
(834, 357),
(204, 358),
(205, 358),
(387, 358),
(534, 358),
(828, 358),
(835, 358),
(204, 359),
(205, 359),
(820, 359),
(204, 360),
(820, 360),
(836, 360),
(837, 360),
(204, 361),
(205, 361),
(281, 361),
(204, 362),
(832, 362),
(836, 362),
(837, 362),
(838, 363),
(839, 363),
(840, 363),
(841, 363),
(842, 363),
(843, 363),
(844, 363),
(845, 363),
(846, 364),
(204, 365),
(204, 366),
(847, 366),
(848, 367),
(849, 367),
(204, 368),
(850, 368),
(204, 369),
(396, 369),
(427, 369),
(528, 369),
(533, 369),
(534, 369),
(536, 369),
(820, 369),
(821, 369),
(822, 369),
(823, 369),
(825, 369),
(826, 369),
(827, 369),
(828, 369),
(829, 369),
(835, 369),
(851, 369),
(852, 369),
(853, 369),
(854, 369),
(855, 369),
(856, 369),
(857, 369),
(858, 369),
(859, 369),
(860, 369),
(861, 369),
(862, 369),
(863, 369),
(864, 369),
(865, 369),
(866, 369),
(867, 369),
(868, 369),
(869, 369),
(870, 369),
(871, 369),
(872, 369),
(873, 369),
(874, 369),
(875, 369),
(876, 369),
(877, 369),
(878, 369),
(879, 369),
(880, 369),
(881, 369),
(882, 369),
(883, 369),
(884, 369),
(885, 369),
(886, 369),
(887, 369),
(888, 369),
(889, 369),
(890, 369),
(891, 369),
(892, 369),
(893, 369),
(894, 369),
(895, 369),
(896, 369),
(897, 369),
(898, 369),
(899, 369),
(900, 369),
(901, 369),
(902, 369),
(903, 369),
(904, 369),
(905, 369),
(906, 369),
(907, 369),
(908, 369),
(909, 369),
(910, 369),
(911, 369),
(204, 370),
(912, 370),
(913, 370),
(914, 370),
(915, 370),
(916, 370),
(204, 371),
(205, 371),
(204, 372),
(917, 372),
(918, 372),
(919, 372),
(920, 372),
(921, 372),
(204, 373),
(922, 373),
(843, 374),
(923, 374),
(204, 375),
(205, 375),
(820, 375),
(204, 376),
(204, 377),
(229, 377),
(255, 377),
(832, 377),
(836, 377),
(924, 377),
(204, 378),
(205, 378),
(822, 378),
(823, 378),
(204, 379),
(925, 379),
(926, 379),
(927, 379),
(928, 379),
(204, 380),
(929, 380),
(204, 381),
(930, 381),
(931, 381),
(932, 381),
(933, 381),
(934, 381),
(935, 381),
(204, 382),
(925, 382),
(936, 382),
(937, 382),
(938, 382),
(204, 383),
(850, 383),
(204, 384),
(832, 384),
(836, 384),
(939, 384),
(843, 385),
(940, 385),
(941, 385),
(942, 385),
(943, 385),
(944, 385),
(945, 385),
(946, 385),
(947, 385),
(948, 385),
(949, 385),
(950, 385),
(951, 385),
(952, 385),
(953, 385),
(954, 385),
(204, 386),
(850, 386),
(204, 387),
(850, 387),
(204, 388),
(955, 388),
(204, 389),
(925, 389),
(956, 389),
(957, 389),
(204, 390),
(958, 390),
(959, 390),
(289, 391),
(832, 391),
(846, 391),
(204, 392),
(960, 392),
(961, 392),
(962, 392),
(963, 392),
(204, 393),
(912, 393),
(964, 393),
(843, 394),
(940, 394),
(941, 394),
(942, 394),
(943, 394),
(951, 394),
(965, 394),
(966, 394),
(967, 394),
(968, 394),
(1032, 394),
(1033, 394),
(1034, 394),
(1035, 394),
(204, 395),
(912, 395),
(969, 395),
(970, 395),
(971, 395),
(972, 395),
(204, 396),
(205, 396),
(204, 397),
(847, 397),
(204, 398),
(204, 399),
(850, 399),
(204, 400),
(823, 400),
(912, 400),
(973, 400),
(974, 400),
(975, 400),
(976, 400),
(977, 400),
(978, 400),
(979, 400),
(204, 401),
(255, 401),
(832, 401),
(204, 402),
(912, 402),
(980, 402),
(981, 402),
(982, 402),
(204, 403),
(983, 403),
(204, 404),
(922, 404),
(963, 404),
(204, 405),
(984, 405),
(985, 405),
(986, 405),
(987, 405),
(988, 405),
(989, 405),
(204, 406),
(832, 406),
(836, 406),
(837, 406),
(204, 407),
(912, 407),
(941, 407),
(204, 408),
(912, 408),
(913, 408),
(914, 408),
(941, 408),
(990, 408),
(991, 408),
(204, 409),
(863, 409),
(984, 409),
(989, 409),
(992, 409),
(993, 409),
(994, 409),
(995, 409),
(204, 410),
(832, 410),
(836, 410),
(837, 410),
(204, 411),
(996, 411),
(997, 411),
(998, 411),
(204, 412),
(999, 412),
(1000, 412),
(204, 413),
(204, 414),
(850, 414),
(1001, 414),
(204, 415),
(255, 415),
(832, 415),
(204, 416),
(1002, 416),
(1003, 416),
(1004, 416),
(1005, 416),
(1006, 416),
(204, 417),
(925, 417),
(937, 417),
(938, 417),
(1007, 417),
(1008, 417),
(204, 418),
(1009, 418),
(843, 419),
(1010, 419),
(1011, 419),
(1012, 419),
(1013, 419),
(1014, 419),
(1015, 419),
(1016, 419),
(1017, 419),
(204, 420),
(912, 420),
(1018, 420),
(1019, 420),
(204, 421),
(345, 421),
(832, 421),
(1020, 421),
(1021, 421),
(204, 422),
(912, 422),
(981, 422),
(982, 422),
(1022, 422),
(204, 423),
(1002, 423),
(1023, 423),
(204, 424),
(929, 424),
(1024, 424),
(204, 425),
(289, 425),
(832, 425),
(204, 426),
(926, 426),
(927, 426),
(1025, 426),
(1026, 426),
(204, 427),
(1002, 427),
(1027, 427),
(1028, 427),
(846, 428),
(938, 428),
(1029, 428),
(1030, 428),
(1031, 428),
(1036, 429),
(1037, 429),
(1038, 429),
(1039, 429),
(846, 430),
(1040, 430),
(1041, 430),
(1042, 430),
(1043, 430),
(1044, 430),
(1045, 430),
(1046, 430),
(1047, 430),
(1048, 430),
(1049, 430),
(1050, 430),
(204, 431),
(204, 432),
(1025, 432),
(1036, 433),
(1036, 434),
(1051, 434),
(204, 435),
(1052, 435),
(204, 436),
(204, 437),
(1053, 437),
(1054, 437);

--
-- Déchargement des données de la table `2025_quotes`
--

INSERT INTO `2025_quotes` (`id_publication`, `id_quote`) VALUES
(5, 69),
(5, 85),
(5, 86),
(5, 99),
(5, 146),
(5, 361),
(5, 364);

--
-- Déchargement des données de la table `2025_users`
--

INSERT INTO `2025_users` (`id`, `lastname`, `firstname`, `email`, `phone_number`, `password`, `registration_date`, `description`, `update_date`, `id_author`) VALUES
(1, 'Mathieu', 'Lin', 'math@gmail.com', NULL, 'math', '2024-05-21', NULL, '2024-05-21', 625),
(2, 'MAKBOUL', 'OTHMANE', 'otman.makboul17@gmail.com', NULL, 'Othmane@2003', '2024-05-22', NULL, '2024-05-22', NULL);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
